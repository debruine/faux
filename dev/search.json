[{"path":"https://debruine.github.io/faux/dev/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://debruine.github.io/faux/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Lisa DeBruine Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/codebook.html","id":"simulated-data","dir":"Articles","previous_headings":"","what":"Simulated Data","title":"Codebook Demo","text":"simulate data sim_design, codebook function reads parameters design. can set codebook function codebook(). don’t specify name, defaults variable name (pet_data). just type codebook object console, ’ll see info JSON format like . set return “list”, get codebook R list prints like . codebook actually nested list formatted like :","code":"pet_data <- sim_design(   between = list(pet = c(cat = \"Cat Owners\",                           dog = \"Dog Owners\")),   n = c(4, 6),   dv = list(happy = \"Happiness Score\"),   id = list(id = \"Subject ID\"),   mu = c(10, 12),   sd = 4,   plot = FALSE ) cb <- codebook(pet_data) #> id set to dataType string #> pet set to dataType string #> happy set to dataType float cb #> { #>     \"@context\": \"https://schema.org/\", #>     \"@type\": \"Dataset\", #>     \"name\": \"pet_data\", #>     \"schemaVersion\": \"Psych-DS 0.1.0\", #>     \"variableMeasured\": [ #>         { #>             \"@type\": \"PropertyValue\", #>             \"name\": \"id\", #>             \"description\": \"Subject ID\", #>             \"dataType\": \"string\" #>         }, #>         { #>             \"@type\": \"PropertyValue\", #>             \"name\": \"pet\", #>             \"description\": \"pet\", #>             \"levels\": { #>                 \"cat\": \"Cat Owners\", #>                 \"dog\": \"Dog Owners\" #>             }, #>             \"dataType\": \"string\", #>             \"levelsOrdered\": false #>         }, #>         { #>             \"@type\": \"PropertyValue\", #>             \"name\": \"happy\", #>             \"description\": \"Happiness Score\", #>             \"dataType\": \"float\" #>         } #>     ] #> } #> cb <- codebook(pet_data, return = \"list\") #> id set to dataType string #> pet set to dataType string #> happy set to dataType float cb #> Codebook for pet_data (Psych-DS 0.1.0) #>  #> Dataset Parameters #>  #> * name: pet_data #> * schemaVersion: Psych-DS 0.1.0 #>  #> Column Parameters #>  #> * id (string): Subject ID #> * pet (string) #>   * Levels #>     * cat: Cat Owners #>     * dog: Dog Owners #>   * Ordered: FALSE #> * happy (float): Happiness Score str(cb) #> List of 5 #>  $ @context        : chr \"https://schema.org/\" #>  $ @type           : chr \"Dataset\" #>  $ name            : chr \"pet_data\" #>  $ schemaVersion   : chr \"Psych-DS 0.1.0\" #>  $ variableMeasured:List of 3 #>   ..$ :List of 4 #>   .. ..$ @type      : chr \"PropertyValue\" #>   .. ..$ name       : chr \"id\" #>   .. ..$ description: chr \"Subject ID\" #>   .. ..$ dataType   : chr \"string\" #>   ..$ :List of 6 #>   .. ..$ @type        : chr \"PropertyValue\" #>   .. ..$ name         : chr \"pet\" #>   .. ..$ description  : chr \"pet\" #>   .. ..$ levels       :List of 2 #>   .. .. ..$ cat: chr \"Cat Owners\" #>   .. .. ..$ dog: chr \"Dog Owners\" #>   .. ..$ dataType     : chr \"string\" #>   .. ..$ levelsOrdered: logi FALSE #>   ..$ :List of 4 #>   .. ..$ @type      : chr \"PropertyValue\" #>   .. ..$ name       : chr \"happy\" #>   .. ..$ description: chr \"Happiness Score\" #>   .. ..$ dataType   : chr \"float\" #>  - attr(*, \"class\")= chr [1:2] \"psychds_codebook\" \"list\""},{"path":"https://debruine.github.io/faux/dev/articles/codebook.html","id":"variable-parameters","dir":"Articles","previous_headings":"Simulated Data","what":"Variable parameters","title":"Codebook Demo","text":"saw messages data type codebook guesses column. can override setting values manually. , ’ll create new column called followup consisting 0 1 values, change data type column integer boolean (T/F) also set descriptions id, pet followup. id column description “Subject ID” sim_design function, properties set using vardesc override . can also add unobserved levels factor. can change data type column codebook, won’t affect data unless set return argument “data”. runs type conversion column gives warning type can’t converted. Note change levels variable followup ’re converting boolean (logical) values names levels vector strings. codebook attached returned converted data attribute can accessed follows. can set variable parameters name, type, description, levels. variable parameters Psych-DS currently supports : “description”, “privacy”, “dataType”, “propertyID”, “minValue”, “maxValue”, “levels”, “ordered”, “na”, “naValues”, “alternateName”, “unitCode”. See technical specs descriptions properties. can add custom parameters, get warning. column ordered factor, codebook look like :","code":"pet_data$followup <- sample(0:1, nrow(pet_data), TRUE)  vardesc <- list(   dataType = list(followup = \"b\"),   description = c(id = \"Pet ID\",                   pet = \"Pet Type\",                   followup = \"Followed up 2 weeks later\"                   ),   levels = list(pet = c(cat = \"Cat Owners\",                         dog = \"Dog Owners\",                          ferret = \"Ferret Owners\"),                 followup = c(\"0\" = \"No\", \"1\" = \"Yes\")             ) ) cb <- codebook(pet_data, name = \"pets\", vardesc, return = \"list\") #> id set to dataType string #> pet set to dataType string #> happy set to dataType float  cb #> Codebook for pets (Psych-DS 0.1.0) #>  #> Dataset Parameters #>  #> * name: pets #> * schemaVersion: Psych-DS 0.1.0 #>  #> Column Parameters #>  #> * id (string): Pet ID #> * pet (string): Pet Type #>   * Levels #>     * cat: Cat Owners #>     * dog: Dog Owners #>     * ferret: Ferret Owners #>   * Ordered: FALSE #> * happy (float): Happiness Score #> * followup (bool): Followed up 2 weeks later #>   * Levels #>     * 0: No #>     * 1: Yes #>   * Ordered: FALSE vardesc$levels$followup <- c(\"FALSE\" = \"No\", \"TRUE\" = \"Yes\") converted_data <- codebook(pet_data, \"pets\", vardesc, return = \"data\") #> id set to dataType string #> pet set to dataType string #> happy set to dataType float #> Converting pet from int to string #> Converting followup from int to bool  head(converted_data) #>    id pet     happy followup #> 1 S01 cat  6.013671     TRUE #> 2 S02 cat 12.887297     TRUE #> 3 S03 cat  7.531165     TRUE #> 4 S04 cat 18.117566     TRUE #> 5 S05 dog 16.261664     TRUE #> 6 S06 dog 15.948879    FALSE attr(converted_data, \"codebook\") #> Codebook for pets (Psych-DS 0.1.0) #>  #> Dataset Parameters #>  #> * name: pets #> * schemaVersion: Psych-DS 0.1.0 #>  #> Column Parameters #>  #> * id (string): Pet ID #> * pet (string): Pet Type #>   * Levels #>     * cat: Cat Owners #>     * dog: Dog Owners #>     * ferret: Ferret Owners #>   * Ordered: FALSE #> * happy (float): Happiness Score #> * followup (bool): Followed up 2 weeks later #>   * Levels #>     * FALSE: No #>     * TRUE: Yes #>   * Ordered: FALSE cb <- codebook(pet_data, vardesc = list(new_param = c(id = \"YES\"))) #> Warning in codebook(pet_data, vardesc = list(new_param = c(id = \"YES\"))): The following variable properties are not standard: new_param #> id set to dataType string #> pet set to dataType string #> happy set to dataType float #> followup set to dataType int dat <- data.frame(   initial = sample(LETTERS, 10) )  dat$initial <- factor(dat$initial, levels = LETTERS, ordered = TRUE)  alevels <- paste(\"The letter\", LETTERS) names(alevels) <- LETTERS  codebook(dat, vardesc = list(levels = list(initial = alevels)), return = \"list\") #> initial set to dataType string #> Codebook for dat (Psych-DS 0.1.0) #>  #> Dataset Parameters #>  #> * name: dat #> * schemaVersion: Psych-DS 0.1.0 #>  #> Column Parameters #>  #> * initial (string) #>   * Levels #>     * A: The letter A #>     * B: The letter B #>     * C: The letter C #>     * D: The letter D #>     * E: The letter E #>     * F: The letter F #>     * G: The letter G #>     * H: The letter H #>     * I: The letter I #>     * J: The letter J #>     * K: The letter K #>     * L: The letter L #>     * M: The letter M #>     * N: The letter N #>     * O: The letter O #>     * P: The letter P #>     * Q: The letter Q #>     * R: The letter R #>     * S: The letter S #>     * T: The letter T #>     * U: The letter U #>     * V: The letter V #>     * W: The letter W #>     * X: The letter X #>     * Y: The letter Y #>     * Z: The letter Z #>   * Ordered: TRUE"},{"path":"https://debruine.github.io/faux/dev/articles/codebook.html","id":"dataset-parameters","dir":"Articles","previous_headings":"Simulated Data","what":"Dataset Parameters","title":"Codebook Demo","text":"can add extra parameters whole data set. Psych-DS supports following: “license”, “author”, “citation”, “funder”, “url”, “sameAs”, “keywords”, “temporalCoverage”, “spatialCoverage”, “datePublished”, “dateCreated”. variable parameters, can add custom parameters just get warning. can also add parameters lists.","code":"codebook(pet_data, license = \"CC-BY 3.0\", author = \"Lisa DeBruine\", source = \"faux\") #> Warning in codebook(pet_data, license = \"CC-BY 3.0\", author = \"Lisa DeBruine\", : The following dataset properties are not standard: source #> id set to dataType string #> pet set to dataType string #> happy set to dataType float #> followup set to dataType int #> { #>     \"@context\": \"https://schema.org/\", #>     \"@type\": \"Dataset\", #>     \"name\": \"pet_data\", #>     \"schemaVersion\": \"Psych-DS 0.1.0\", #>     \"license\": \"CC-BY 3.0\", #>     \"author\": \"Lisa DeBruine\", #>     \"source\": \"faux\", #>     \"variableMeasured\": [ #>         { #>             \"@type\": \"PropertyValue\", #>             \"name\": \"id\", #>             \"description\": \"Subject ID\", #>             \"dataType\": \"string\" #>         }, #>         { #>             \"@type\": \"PropertyValue\", #>             \"name\": \"pet\", #>             \"description\": \"pet\", #>             \"levels\": { #>                 \"cat\": \"Cat Owners\", #>                 \"dog\": \"Dog Owners\" #>             }, #>             \"dataType\": \"string\", #>             \"levelsOrdered\": false #>         }, #>         { #>             \"@type\": \"PropertyValue\", #>             \"name\": \"happy\", #>             \"description\": \"Happiness Score\", #>             \"dataType\": \"float\" #>         }, #>         { #>             \"@type\": \"PropertyValue\", #>             \"name\": \"followup\", #>             \"description\": \"followup\", #>             \"dataType\": \"int\" #>         } #>     ] #> } #> dat <- sim_design(plot= FALSE)  author_list <- list(   list(     \"@type\" = \"Person\",     \"name\" = \"Melissa Kline\"   ),   list(     \"@type\" = \"Person\",     \"name\" = \"Lisa DeBruine\"   ) )   codebook(dat, return = \"list\",           author = author_list,          keywords = c(\"test\", \"demo\")) #> id set to dataType string #> y set to dataType float #> Codebook for dat (Psych-DS 0.1.0) #>  #> Dataset Parameters #>  #> * name: dat #> * schemaVersion: Psych-DS 0.1.0 #> * author:  #>     1.  #>         * @type: Person #>         * name: Melissa Kline #>     2.  #>         * @type: Person #>         * name: Lisa DeBruine #> * keywords:  #>     1. test #>     2. demo #>  #> Column Parameters #>  #> * id (string) #> * y (float): value"},{"path":"https://debruine.github.io/faux/dev/articles/codebook.html","id":"existing-data","dir":"Articles","previous_headings":"","what":"Existing Data","title":"Codebook Demo","text":"can run codebook function existing data created faux, need manually input column descriptions factor levels.","code":"vardesc <- list(   description = list(     mpg = \"Miles/(US) gallon\",     cyl = \"Number of cylinders\",     disp = \"Displacement (cu.in.)\",     hp = \"Gross horsepower\",     drat = \"Rear axle ratio\",     wt = \"Weight (1000 lbs)\",     qsec = \"1/4 mile time\",     vs = \"Engine\",     am = \"Transmission\",     gear = \"Number of forward gears\",     carb = \"Number of carburetors\"   ),   # min and max values can be set manually or from data   # min and max are often outside the observed range   minValue = list(mpg = 0, cyl = min(mtcars$cyl)),   maxValue = list(cyl = max(mtcars$cyl)),   dataType = list(     cyl = \"integer\",     hp = \"integer\",     vs = \"integer\",     am = \"integer\",      gear = \"integer\",     carb = \"integer\"   ),   # supply levels to mark factors   levels = list(     vs = c(\"0\" = \"V-shaped\", \"1\" = \"straight\"),     am = c(\"0\" = \"automatic\", \"1\" = \"manual\")   ) )  codebook(mtcars, \"Motor Trend Car Road Tests\",           vardesc, return = \"list\") #> mpg set to dataType float #> disp set to dataType float #> drat set to dataType float #> wt set to dataType float #> qsec set to dataType float #> Codebook for Motor Trend Car Road Tests (Psych-DS 0.1.0) #>  #> Dataset Parameters #>  #> * name: Motor Trend Car Road Tests #> * schemaVersion: Psych-DS 0.1.0 #>  #> Column Parameters #>  #> * mpg (float): Miles/(US) gallon #> * cyl (int): Number of cylinders #> * disp (float): Displacement (cu.in.) #> * hp (int): Gross horsepower #> * drat (float): Rear axle ratio #> * wt (float): Weight (1000 lbs) #> * qsec (float): 1/4 mile time #> * vs (int): Engine #>   * Levels #>     * 0: V-shaped #>     * 1: straight #>   * Ordered: FALSE #> * am (int): Transmission #>   * Levels #>     * 0: automatic #>     * 1: manual #>   * Ordered: FALSE #> * gear (int): Number of forward gears #> * carb (int): Number of carburetors"},{"path":"https://debruine.github.io/faux/dev/articles/codebook.html","id":"interactive-editing","dir":"Articles","previous_headings":"","what":"Interactive Editing","title":"Codebook Demo","text":"experimental argument edit codebook interactively. runs codebook function, asks confirm types edit descriptions. run console, RMarkdown file script meant run non-interactively.","code":"cb <- codebook(mtcars, interactive = TRUE)"},{"path":"https://debruine.github.io/faux/dev/articles/continuous.html","id":"one-continuous-predictor","dir":"Articles","previous_headings":"","what":"One continuous predictor","title":"Continuous Predictors","text":"","code":"dat <- sim_design(within = list(vars = c(\"dv\", \"predictor\")),                 mu = list(dv = 100, predictor = 0),                 sd = list(dv = 10, predictor = 1),                 r = 0.5, plot = FALSE)"},{"path":"https://debruine.github.io/faux/dev/articles/continuous.html","id":"between-continuous-predictors","dir":"Articles","previous_headings":"","what":"Between continuous predictors","title":"Continuous Predictors","text":", pred1 correlated r = 0.5 DV, pred2 correlated 0.0 DV, pred1 pred2 correlated r = -0.2 .","code":"dat <- sim_design(within = list(vars = c(\"dv\", \"pred1\", \"pred2\")),                 mu = list(dv = 100, pred1 = 0, pred2 = 0),                 sd = list(dv = 10, pred1 = 1, pred2 = 1),                 r = c(0.5, 0, -0.2), plot = FALSE)"},{"path":"https://debruine.github.io/faux/dev/articles/continuous.html","id":"within-continuous-predictors","dir":"Articles","previous_headings":"","what":"Within continuous predictors","title":"Continuous Predictors","text":"continuous predictors within-subjects (e.g., dv predictor measured pre- post-test), can set like . correlation matrix can start getting tricky, usually map upper right triangle correlation matrix separately. , dv predictor correlated 0.0 pre-test 0.5 post-test. dv correlated 0.8 pre- post-test predictor correlated 0.3 pre- post-test. correlation pre-test predictor post-test dv, ’m sure values possible correlation post-test predictor pre-test dv, can set NA use pos_def_limits function determine range possible correlations (gven existing correlation structure). range -0.08 0.88, ’ll set value mean. make sort dataset wide format manually convert long. prefer gather spread, ’m trying learn new pivot functions, ’ll use .","code":"#      pre_pred, post_dv, post_pred r <- c(     0.0,     0.8,        NA, # pre_dv                      0.0,       0.3, # pre_pred                                 0.5) # post_dv                                          lim <- faux::pos_def_limits(r) r[[3]] <- mean(c(lim$min, lim$max))  dat <- sim_design(within = list(time = c(\"pre\", \"post\"),                                 vars = c(\"dv\", \"pred\")),                 mu = list(pre_dv = 100, pre_pred = 0,                            post_dv = 110, post_pred = 0.1),                 sd = list(pre_dv = 10, pre_pred = 1,                           post_dv = 10, post_pred = 1),                 r = r, plot = FALSE) long_dat <- dat %>%   pivot_longer(cols = -id, names_to = \"var\", values_to = \"value\") %>%   separate(var, c(\"time\", \"var\")) %>%   pivot_wider(names_from = var, values_from = value)"},{"path":"https://debruine.github.io/faux/dev/articles/continuous.html","id":"one-continuous-one-categorical-predictor","dir":"Articles","previous_headings":"","what":"One continuous, one categorical predictor","title":"Continuous Predictors","text":"design, DV 10 higher group B group correlation predictor DV 0.5 group 0.0 group B.","code":"dat <- sim_design(between = list(group = c(\"A\", \"B\")),                   within = list(vars = c(\"dv\", \"predictor\")),                   mu = list(A = c(dv = 100, predictor = 0),                             B = c(dv = 110, predictor = 0)),                   sd = list(A = c(dv =  10, predictor = 1),                             B = c(dv =  10, predictor = 1)),                   r  = list(A = 0.5, B = 0), plot = FALSE)"},{"path":"https://debruine.github.io/faux/dev/articles/continuous.html","id":"add-a-continuous-predictor","dir":"Articles","previous_headings":"","what":"Add a continuous predictor","title":"Continuous Predictors","text":"already dataset want add continuous predictor, can make new column specified mean, SD correlation one column. First, let’s make simple dataset one -subject factor. Now can add continuous predictor rnorm_pre specifying vector correlated , mean, SD. default, produces values sampled population mean, SD r. set empirical TRUE, resulting vector sample mean, SD r.  want set different mean, SD r -subject groups, can split re-merge dataset (use data wrangling skills devise elegant way using purrr).  can also specify correlations one vector setting first argument data frame containing continuous columns r correlation column. correlation patterns possible, ’ll get error message correlations ask impossible.","code":"dat <- sim_design(between = list(group = c(\"A\", \"B\")),                    mu = list(A = 100, B = 120), sd = 10, plot = FALSE) dat$pred <- rnorm_pre(dat$y, 0, 1, 0.5) A <- filter(dat, group == \"A\") %>%   mutate(pred = rnorm_pre(y, 0, 1, -0.5)) B <- filter(dat, group == \"B\") %>%   mutate(pred = rnorm_pre(y, 0, 1, 0.5))  dat <- bind_rows(A, B) dat <- sim_design(2, r = 0.5, plot = FALSE) dat$B <- rnorm_pre(dat[, 2:3], r = c(A1 = 0.5, A2 = 0)) cor(dat[, 2:4]) #>           W1a       W1b         B #> W1a 1.0000000 0.2736529 0.6455051 #> W1b 0.2736529 1.0000000 0.1352178 #> B   0.6455051 0.1352178 1.0000000 dat$C <- rnorm_pre(dat[, 2:4], r = c(A1 = 0.9, A2 = 0.9, B = -0.9)) #> Warning in rnorm_pre(dat[, 2:4], r = c(A1 = 0.9, A2 = 0.9, B = -0.9)): #> Correlations are impossible."},{"path":"https://debruine.github.io/faux/dev/articles/contrasts.html","id":"terminology","dir":"Articles","previous_headings":"","what":"Terminology","title":"Contrasts","text":"Contrasts often multiple names. names ’m using try maintain relationship base R function, apart anova coding, suggested Dale Barr got frustrated people use many different labels (extremely useful) coding terms used also used refer totally different codings others.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/contrasts.html","id":"faux-contrast-functions","dir":"Articles","previous_headings":"","what":"Faux Contrast Functions","title":"Contrasts","text":"functions development First, ’ll set simple experimental design analyse lm(). set empirical = TRUE make interpreting estimates easier.  Notice default contrast treatment coding, “cat” baseline condition. estimate intercept mean value cats (\\(2\\)), term petdog mean value dogs minus cats (\\(4 - 2\\)), term petferret mean value ferrets minus cats (\\(9 - 2\\)). subsequent examples, try putting words estimates intercept terms mean relation mean values group data.","code":"df <- sim_design(between = list(pet = c(\"cat\", \"dog\", \"ferret\")),                   n = c(50), mu = c(2, 4, 9), empirical = TRUE)"},{"path":"https://debruine.github.io/faux/dev/articles/contrasts.html","id":"section","dir":"Articles","previous_headings":"","what":"Contrasts","title":"Contrasts","text":"Treatment Anova Sum Difference Helmert Polynomial Treatment coding (also called dummy coding) sets mean reference group intercept. straightforward interpret, especially factors obvious default baseline value. type coding default factors shown (unless change default using options()), clearer term labels. contrast compares one level reference level, defaults first level, can set base argument. Now intercept estimates mean value dogs (\\(4\\)). Set reference level third level (“ferret”). Anova coding identical treatment coding, sets grand mean intercept. contrast compares one level reference level. gives us values relatively easy interpret map onto ANOVA values. anova coding first level (“cat”) default base. Now intercept grand mean, mean three group means (\\((2 + 4 + 9)/3\\)). Notice different mean value y dataset (5, since number pets group unbalanced. term pet_dog-cat mean value dogs minus cats (\\(4 - 2\\)) term pet_ferret-cat mean value ferrets minus cats (\\(9 - 2\\)). Anova coding “dog” base. interpretation terms change? Anova coding third level (“ferret”) base. Sum coding also sets grand mean intercept. contrast compares one level grand mean. Therefore, estimate pet_cat-intercept difference mean value cats grand mean (\\(2 - 5\\)). can’t compare levels grand mean, omit one level. last level default, can change omit argument. Omit first level (“cat”). slightly different form contrast coding difference coding, also called forward, backward, successive differences coding. compares level previous one, rather baseline level. want change levels compared, can re-order factor levels. Helmert coding sets grand mean intercept. contrast compares one level mean previous levels. coding somewhat different results stats::contr.helmert() make easier interpret estimates. Thus, pet_ferret-cat.dog mean value ferrets minus mean value cats dogs averaged together (\\(9-(2+4)/2\\)). can change comparisons reordering levels. Polynomial coding default ordered factors R. ’ll set new data simulation five ordered times.  function contr_code_poly() uses contr.poly() set polynomial contrasts linear (^1), quadratic (^2), cubic (^3), quartic (^4) components.","code":"df$pet <- contr_code_treatment(df$pet) df$pet <- contr_code_treatment(df$pet, base = \"dog\") df$pet <- contr_code_treatment(df$pet, base = 3) df$pet <- contr_code_anova(df$pet) df$pet <- contr_code_anova(df$pet, base = \"dog\") df$pet <- contr_code_anova(df$pet, base = 3) df$pet <- contr_code_sum(df$pet) df$pet <- contr_code_sum(df$pet, omit = \"dog\") df$pet <- contr_code_sum(df$pet, omit = 1) df$pet <- contr_code_difference(df$pet) df$pet <- contr_code_difference(df$pet, levels = c(\"ferret\", \"cat\", \"dog\")) df$pet <- contr_code_helmert(df$pet) df$pet <- contr_code_helmert(df$pet, levels = c(\"ferret\", \"dog\", \"cat\")) df <- sim_design(list(time = 1:5),                  mu = 1:5 * 0.25 + (1:5 - 3)^2 * 0.5,                  sd = 5, long = TRUE) df$time <- contr_code_poly(df$time)"},{"path":"https://debruine.github.io/faux/dev/articles/contrasts.html","id":"add-contrasts","dir":"Articles","previous_headings":"","what":"Add Contrasts","title":"Contrasts","text":"function add_contrasts() lets add contrasts column data frame also adds new columns contrast (unless add_cols = FALSE). especially helpful want test subset contrasts. can set colnames change default column names contrasts. can useful want add different codings factor default names long. However, new column duplicate name existing column, add_contrast() automatically add contrast suffix new column.","code":"df <- sim_design(list(time = 1:5),                  mu = 1:5 * 0.25 + (1:5 - 3)^2 * 0.5,                  sd = 5, long = TRUE, plot = FALSE) %>%   add_contrast(\"time\", \"poly\") # test only the linear and quadratic contrasts lm(y ~ `time^1` + `time^2`, df) %>% broom::tidy() btwn <- list(condition = c(\"control\", \"experimental\"))   df <- sim_design(between = btwn, n = 1, plot = FALSE) %>%   add_contrast(\"condition\", \"treatment\", colnames = \"cond.tr\") %>%   add_contrast(\"condition\", \"anova\", colnames = \"cond.aov\") %>%   add_contrast(\"condition\", \"difference\", colnames = \"cond.dif\") %>%   add_contrast(\"condition\", \"sum\", colnames = \"cond.sum\") %>%   add_contrast(\"condition\", \"helmert\", colnames = \"cond.hmt\") %>%   add_contrast(\"condition\", \"poly\", colnames = \"cond.poly\") btwn <- list(pet = c(\"cat\", \"dog\", \"ferret\"))   df <- sim_design(between = btwn, n = 1, plot = FALSE) %>%   add_contrast(\"pet\", \"treatment\") %>%    add_contrast(\"pet\", \"anova\") %>%   add_contrast(\"pet\", \"sum\") %>%   add_contrast(\"pet\", \"difference\") %>%   add_contrast(\"pet\", \"helmert\") %>%   add_contrast(\"pet\", \"poly\")"},{"path":[]},{"path":"https://debruine.github.io/faux/dev/articles/contrasts.html","id":"x2-design","dir":"Articles","previous_headings":"Examples","what":"2x2 Design","title":"Contrasts","text":"Let’s use simulated data empirical = TRUE explore interpret interactions two 2-level factors coded different ways.  table shows cell marginal means. notation \\(Y_{..}\\) used denote mean specific grouping. . used indicate mean groups factor; Y.. grand mean. ’ll usually see subscripts written numbers indicate factor levels, ’re using letters don’t keep referring order factors levels.","code":"mu <- c(0, 4, 6, 10) df <- sim_design(between = list(time = c(\"am\", \"pm\"),                                 pet = c(\"cat\", \"dog\")),                  n = c(50, 60, 70, 80), mu = mu, empirical = TRUE)"},{"path":"https://debruine.github.io/faux/dev/articles/contrasts.html","id":"section-1","dir":"Articles","previous_headings":"","what":"Contrasts","title":"Contrasts","text":"Treatment Anova Sum Difference Helmert","code":"df %>%   add_contrast(\"pet\", \"treatment\") %>%   add_contrast(\"time\", \"treatment\") %>%   lm(y ~ pet * time, .) %>%    broom::tidy() %>% kable() %>% kable_styling() df %>%   add_contrast(\"pet\", \"anova\") %>%   add_contrast(\"time\", \"anova\") %>%   lm(y ~ pet * time, .) %>%    broom::tidy() %>% kable() %>% kable_styling() df %>%   add_contrast(\"pet\", \"sum\") %>%   add_contrast(\"time\", \"sum\") %>%   lm(y ~ pet * time, .) %>%     broom::tidy() %>% kable() %>% kable_styling() df %>%   add_contrast(\"pet\", \"difference\") %>%   add_contrast(\"time\", \"difference\") %>%   lm(y ~ pet * time, .) %>%    broom::tidy() %>% kable() %>% kable_styling() df %>%   add_contrast(\"pet\", \"helmert\") %>%   add_contrast(\"time\", \"helmert\") %>%   lm(y ~ pet * time, .) %>%    broom::tidy() %>% kable() %>% kable_styling()"},{"path":"https://debruine.github.io/faux/dev/articles/contrasts.html","id":"section-2","dir":"Articles","previous_headings":"","what":"Contrasts","title":"Contrasts","text":"N.B. case 2-level factors, anova, difference, Helmert coding identical. Treatment coding differs intercept. Remember interactions can always described two ways, since (A1 - A2) - (B1 - B2) == (A1 - B1) - (A2 - B2). Therefore, “dog minus cat pm, minus dog minus cat ” “pm minus dogs, minus pm minus cats”. way describe paper depends version maps onto hypothesis straightforwardly. examples might written “difference dogs cats bigger evening morning” “difference evening morning bigger dogs cats”. Make sure check plots make sure describing relationships right direction.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/contrasts.html","id":"x3-design","dir":"Articles","previous_headings":"Examples","what":"2x3 Design","title":"Contrasts","text":"Let’s use simulated data empirical = TRUE explore interpret interactions 2-level factor 3-level factor coded different ways.","code":"mu <- c(0, 5, 7, 6, 2, 1) df <- sim_design(between = list(time = c(\"am\", \"pm\"),                                 pet = c(\"cat\", \"dog\", \"ferret\")),                  n = c(50, 60, 70, 80, 90, 100), mu = mu, empirical = TRUE)"},{"path":"https://debruine.github.io/faux/dev/articles/contrasts.html","id":"section-3","dir":"Articles","previous_headings":"","what":"Contrasts","title":"Contrasts","text":"Treatment Anova Sum Difference Helmert","code":"df %>%   add_contrast(\"pet\", \"treatment\") %>%   add_contrast(\"time\", \"treatment\") %>%   lm(y ~ pet * time, .) %>%    broom::tidy() %>% kable() %>% kable_styling() df %>%   add_contrast(\"pet\", \"anova\") %>%   add_contrast(\"time\", \"anova\") %>%   lm(y ~ pet * time, .) %>%    broom::tidy() %>% kable() %>% kable_styling() df %>%   add_contrast(\"pet\", \"sum\") %>%   add_contrast(\"time\", \"sum\") %>%   lm(y ~ pet * time, .) %>%    broom::tidy() %>% kable() %>% kable_styling() df %>%   add_contrast(\"pet\", \"difference\") %>%   add_contrast(\"time\", \"difference\") %>%   lm(y ~ pet * time, .) %>%    broom::tidy() %>% kable() %>% kable_styling() df %>%   add_contrast(\"pet\", \"helmert\") %>%   add_contrast(\"time\", \"helmert\") %>%   lm(y ~ pet * time, .) %>%    broom::tidy() %>% kable() %>% kable_styling()"},{"path":"https://debruine.github.io/faux/dev/articles/contrasts.html","id":"section-4","dir":"Articles","previous_headings":"","what":"Contrasts","title":"Contrasts","text":"N.B. case, difference coding identical anova coding except second pet contrast ferret versus dog instead ferret versus cat.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/contrasts.html","id":"x3-design-1","dir":"Articles","previous_headings":"Examples","what":"3x3 Design","title":"Contrasts","text":"Please just don’t. ’re going break head.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/distributions.html","id":"truncated-normal","dir":"Articles","previous_headings":"","what":"Truncated normal","title":"Distribution Conversions","text":"Imagine ’re trying simulate participant’s mean score 50 trials 1-7 Likert responses mean SD previous paper go . simulating normal distribution likely give impossible values, can convert truncated normal distribution. Convert normal distribution mean 3.5 SD 2.5 truncated normal distribution ranging 1 7 mean sd. red values outside truncated range unbounded normal scale.  omit min max values trunc2norm(), set outside min max data, can really inaccurate, set .","code":"mu = 3.5 sd = 2.5 min = 1 max = 7  x_n <- rnorm(1000, mu, sd) y_t <- norm2trunc(x_n, min, max)  x_t <- rtruncnorm(1000, min, max, mu, sd) y_n <- trunc2norm(x_t, min , max)"},{"path":"https://debruine.github.io/faux/dev/articles/distributions.html","id":"likert","dir":"Articles","previous_headings":"","what":"Likert","title":"Distribution Conversions","text":"can convert normal distribution sample distribution can specify probability level. can specify probability counts proportions. use named vector, output factor named levels.  Faux also provides distribution functions Likert distributions define probabilities value.","code":"mu = 0 sd = 1 prob = c('very low'  = 50,           'low'       = 80,           'medium'    = 100,           'high'      = 40,           'very high' = 20)   x_n <- rnorm(1000, mu, sd) y_l <- norm2likert(x_n, prob)"},{"path":"https://debruine.github.io/faux/dev/articles/distributions.html","id":"rlikert","dir":"Articles","previous_headings":"Likert","what":"rlikert","title":"Distribution Conversions","text":"rlikert() returns random sample distribution Likert levels specified probabilities. set prob named vector, return vector factors. set prob unnamed vector, return vector integers. Specify labels prob named don’t want vector integers starting 1. labels numeric, return vector numbers. labels characters, return vector factors.","code":"rlikert(n = 10, prob = c(A = 10, B = 20, C = 30)) #>  [1] C A A C C B A B C B #> Levels: A B C rlikert(n = 10, prob = c(.1, .2, .4, .2, .1)) #>  [1] 3 2 2 2 3 3 3 1 3 4 rlikert(n = 10, prob = c(10, 20, 30, 20, 10), labels = -2:2) #>  [1]  1  1  0 -1  1 -1  1 -1  0  0 rlikert(n = 10, prob = c(10, 20, 30, 20, 10), labels = LETTERS[1:5]) #>  [1] D B A B A B B E C D #> Levels: A B C D E"},{"path":"https://debruine.github.io/faux/dev/articles/distributions.html","id":"dlikert","dir":"Articles","previous_headings":"Likert","what":"dlikert","title":"Distribution Conversions","text":"dlikert() returns density function.","code":"d <- dlikert(x = 1:5, c(10, 20, 40, 20, 10)) d #>   1   2   3   4   5  #> 0.1 0.2 0.4 0.2 0.1"},{"path":"https://debruine.github.io/faux/dev/articles/distributions.html","id":"plikert","dir":"Articles","previous_headings":"Likert","what":"plikert","title":"Distribution Conversions","text":"plikert() returns probability function, just cumulative sum distribution function.","code":"p <- plikert(q = 1:5, c(10, 20, 40, 20, 10)) p #>   1   2   3   4   5  #> 0.1 0.3 0.7 0.9 1.0 cumsum(d) #>   1   2   3   4   5  #> 0.1 0.3 0.7 0.9 1.0"},{"path":"https://debruine.github.io/faux/dev/articles/distributions.html","id":"qlikert","dir":"Articles","previous_headings":"Likert","what":"qlikert","title":"Distribution Conversions","text":"qlikert() returns quantile function, inverse probability function.","code":"q <- qlikert(p = p, c(10, 20, 40, 20, 10)) q #> [1] 1 2 3 4 5"},{"path":"https://debruine.github.io/faux/dev/articles/distributions.html","id":"uniform","dir":"Articles","previous_headings":"","what":"Uniform","title":"Distribution Conversions","text":"Convert normal distribution mean 0 SD 1 uniform distribution ranging 0 10. omit min max values unif2norm(), set slightly outside min max data.  default, function try guess relevant parameters input distribution, can also specify . especially useful know actual min max values, don’t enough data observations near .","code":"mu = 0 sd = 1 min = 0 max = 100  x_n <- rnorm(1e3, mu, sd) y_u <- norm2unif(x_n, min, max)  x_u <- runif(1e3, min, max) y_n <- unif2norm(x_u, mu, sd) #> min was set to 0.0992686796709895 #> max was set to 99.7016261954084 # cheating a little to make sure no values near min and max x <- runif(1e4, 0.1, 0.9)  y_guess <- unif2norm(x, mu = 100, sd = 10) #> min was set to 0.100089273990691 #> max was set to 0.900074888563156 y_spec <- unif2norm(x, mu = 100, sd = 10, min = 0, max = 1)"},{"path":"https://debruine.github.io/faux/dev/articles/distributions.html","id":"binomial","dir":"Articles","previous_headings":"","what":"Binomial","title":"Distribution Conversions","text":"Convert normal distribution mean 0 SD 1 binomial distribution size 20 probability 0.75 (e.g., sum scores 20-trial test mean 75% correct). Converting binomial normal can produce odd-looking distributions size small probability high low. don’t specify probability, estimated data. don’t specify size, set maximum value x (can wrong, set ).","code":"mu = 0 sd = 1 size = 20 prob = 0.75  x_n <- rnorm(1e4, mu, sd) y_b <- norm2binom(x_n, size, prob)  x_b <- rbinom(1e4, size, prob) y_n <- binom2norm(x_b, mu, sd, size) #> prob was set to 0.74947"},{"path":"https://debruine.github.io/faux/dev/articles/distributions.html","id":"beta","dir":"Articles","previous_headings":"","what":"Beta","title":"Distribution Conversions","text":"Convert normal distribution mean 0 SD 1 beta distribution shape parameters 2 5. function beta2norm() try guess shape parameters data don’t specify .","code":"mu = 0 sd = 1 shape1 = 2 shape2 = 5  x_n <- rnorm(1e4, mu, sd) y_b <- norm2beta(x_n, shape1, shape2)  x_b <- rbeta(1e4, shape1, shape2) y_n <- beta2norm(x_b, mu, sd) #> shape1 was set to 1.95781058581627 #> shape2 was set to 4.95134446291696"},{"path":"https://debruine.github.io/faux/dev/articles/distributions.html","id":"gamma","dir":"Articles","previous_headings":"","what":"Gamma","title":"Distribution Conversions","text":"Convert normal distribution mean 0 SD 1 gamma distribution shape parameter 2 rate 1. function gamma2norm() try guess shape rate parameters data don’t specify .","code":"mu = 0 sd = 1 shape = 2 rate = 1  x_n <- rnorm(1e4, mu, sd) y_g <- norm2gamma(x_n, shape, rate)  x_g <- rgamma(1e4, shape, rate) y_n <- gamma2norm(x_g, mu, sd) #> shape was set to 1.97129505327425"},{"path":"https://debruine.github.io/faux/dev/articles/norta.html","id":"rmulti","dir":"Articles","previous_headings":"","what":"rmulti","title":"NORTA","text":"current implementation rmulti() experimental. six arguments: n number samples required dist named vector distributions variable params list lists arguments pass distribution function r correlations among variables (can single number, vars*vars matrix, vars*vars vector, vars*(vars-1)/2 vector) empirical logical. true, params specify sample parameters, population parameters .matrix logical. true, returns matrix default, returns data frame 100 rows two normally distributed values means 0, standard deviations 1, correlation 0. n, r, empirical .matrix arguments work rnorm_multi().","code":"dat <- rmulti()  get_params(dat) #>     n var     A     B mean   sd #> 1 100   A  1.00 -0.06 0.05 0.99 #> 2 100   B -0.06  1.00 0.05 0.93 dat <- rmulti(n = 200, r = 0.5,               empirical = TRUE,                as.matrix = FALSE)  get_params(dat) #>     n var   A   B mean sd #> 1 200   A 1.0 0.5    0  1 #> 2 200   B 0.5 1.0    0  1"},{"path":"https://debruine.github.io/faux/dev/articles/norta.html","id":"distributions-and-parameters","dir":"Articles","previous_headings":"rmulti","what":"Distributions and parameters","title":"NORTA","text":"can set distribution variable dist argument. options distribution function {stats} package, “norm”, “pois”, “binom”, “unif”, plus “truncnorm” distribution {truncnorm} package “likert” distribution {faux}. Set params argument named list vector named arguments random generation function distribution. example, use ?rpois find arguments rpois() function needs simulate values poisson distribution. Don’t set n params; set nin rmulti() function.  can also simulate two variables. Set correlations using upper right triangle correlation matrix (e.g., pilot dataset ’re trying simulate).","code":"dat <- rmulti(n = 1000,                dist = c(uniform_var = \"unif\",                        poisson_var = \"pois\"),               params = list(uniform_var = c(min = 0, max = 100),                             poisson_var = c(lambda = 3)),               r = 0.5)  get_params(dat) #>      n         var uniform_var poisson_var  mean    sd #> 1 1000 uniform_var        1.00        0.49 50.62 28.67 #> 2 1000 poisson_var        0.49        1.00  2.98  1.75 dat <- rmulti(   n = 1000,   dist = c(N = \"norm\",            T = \"truncnorm\",            L = \"likert\"),   params = list(     N = list(mean = 100, sd = 10),     T = list(a = 1, b = 7, mean = 3.5, sd = 2.1),     L = list(prob = c(`much less` = .10,                        `less`      = .20,                        `equal`     = .35,                        `more`      = .25,                        `much more` = .10))   ),   r = c(-0.5, -0.6, 0.7) )  # convert likert-scale variable to integer dat$L <- as.integer(dat$L) get_params(dat) #>      n var     N     T     L   mean   sd #> 1 1000   N  1.00 -0.47 -0.57 100.32 9.70 #> 2 1000   T -0.47  1.00  0.67   3.80 1.43 #> 3 1000   L -0.57  0.67  1.00   3.08 1.08"},{"path":"https://debruine.github.io/faux/dev/articles/norta.html","id":"impossible-correlations","dir":"Articles","previous_headings":"rmulti","what":"Impossible correlations","title":"NORTA","text":"correlations possible given pair distributions. extreme, ’s obvious normal distribution uniform distribution can’t correlated 1.0, wouldn’t different distributions . ask rmulti() correlation high low, get message telling maximum minimum correlations can generated.","code":"dat <- rmulti(   dist = c(A = \"binom\", B = \"pois\", C = \"norm\"),    params = list(A = list(size = 1, prob = 0.5),                 B = list(lambda = 3),                 C = list(mean = 100, sd = 10)),   r = c(0.8, 0.9, 0.5) ) #> Error in rmulti(dist = c(A = \"binom\", B = \"pois\", C = \"norm\"), params = list(A = list(size = 1, : Some of the correlations are not possible: #>   *  A&B (-0.776 to 0.776) #>   *  A&C (-0.798 to 0.798)"},{"path":"https://debruine.github.io/faux/dev/articles/norta.html","id":"helper-functions","dir":"Articles","previous_headings":"","what":"Helper functions","title":"NORTA","text":"made helper functions rmulti(). ’m sure ’ll useful anyone else, ’re available.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/norta.html","id":"fh_bounds","dir":"Articles","previous_headings":"Helper functions","what":"fh_bounds","title":"NORTA","text":"Fréchet-Hoefding bounds limits correlation pair distributions.","code":"fh_bounds(dist1 = \"truncnorm\",           dist2 = \"beta\",           params1 = list(a = 0, b = 10, mean = 5, sd = 3),           params2 = list(shape1 = 1, shape2 = 5)) #> $min #> [1] -0.9436597 #>  #> $max #> [1] 0.9435562"},{"path":"https://debruine.github.io/faux/dev/articles/norta.html","id":"convert_r","dir":"Articles","previous_headings":"Helper functions","what":"convert_r","title":"NORTA","text":"gives r-value ’d need simulate pair normally-distributed variables achieve target r-value converting target distributions. rmulti() function use adjusted r generate multivariate normal distribution, convert variable target distribution. Note correlation T1 B2 unlikely exactly 0.75 unless n large, especially distributions unique values.","code":"adjusted_r <- convert_r(   target_r = 0.75,   dist1 = \"truncnorm\",   dist2 = \"binom\",   params1 = list(a = 0, b = 10, mean = 5, sd = 3),   params2 = list(size = 1, prob = 0.5) )  adjusted_r #> [1] 0.911 # simulate multivariate normal  dat <- rnorm_multi(n = 1000,                     varnames = c(\"N1\", \"N2\"),                     r = adjusted_r,                     empirical = TRUE)  # convert to target distributions dat$T1 <- norm2trunc(dat$N1,                       min = 0, max = 10,                       mu = 5, sd = 3,                       x_mu = 0, x_sd = 1) dat$B2 = norm2binom(dat$N2,                      size = 1, prob = 0.5,                     mu = 0, sd = 1)  # check get_params(dat) #>      n var   N1   N2   T1   B2 mean   sd #> 1 1000  N1 1.00 0.91 0.99 0.73 0.00 1.00 #> 2 1000  N2 0.91 1.00 0.90 0.79 0.00 1.00 #> 3 1000  T1 0.99 0.90 1.00 0.76 5.02 2.38 #> 4 1000  B2 0.73 0.79 0.76 1.00 0.52 0.50"},{"path":"https://debruine.github.io/faux/dev/articles/plots.html","id":"plotting-designs","dir":"Articles","previous_headings":"","what":"Plotting Designs","title":"Plotting","text":"functions check_design() sim_design() automatically create plots design (unless set plot = FALSE) can check set correctly. can also use plot_design() function plot saved design list.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/plots.html","id":"one-factor-designs","dir":"Articles","previous_headings":"Plotting Designs","what":"One-factor designs","title":"Plotting","text":"","code":"p1 <- check_design(plot = FALSE) %>% plot_design() p2 <- check_design(2, plot = FALSE) %>% plot_design() p3 <- check_design(3, plot = FALSE) %>% plot_design() p4 <- check_design(4, plot = FALSE) %>% plot_design() p5 <- check_design(5, plot = FALSE) %>% plot_design() p6 <- check_design(6, plot = FALSE) %>% plot_design()  cowplot::plot_grid(p1, p2, p3, p4, p5, p6, nrow = 2)"},{"path":"https://debruine.github.io/faux/dev/articles/plots.html","id":"two-factor-designs","dir":"Articles","previous_headings":"Plotting Designs","what":"Two-factor designs","title":"Plotting","text":"","code":"p1 <- check_design(c(2,2), mu = 1:4, plot = FALSE) %>% plot_design() p2 <- check_design(c(2,3), mu = 1:6, plot = FALSE) %>% plot_design() p3 <- check_design(c(2,4), mu = 1:8, plot = FALSE) %>% plot_design() p4 <- check_design(c(3,2), mu = 1:6, plot = FALSE) %>% plot_design() p5 <- check_design(c(3,3), mu = 1:9, plot = FALSE) %>% plot_design() p6 <- check_design(c(3,4), mu = 1:12, plot = FALSE) %>% plot_design()  cowplot::plot_grid(p1, p2, p3, p4, p5, p6, nrow = 3)"},{"path":"https://debruine.github.io/faux/dev/articles/plots.html","id":"three-factor-designs","dir":"Articles","previous_headings":"Plotting Designs","what":"Three-factor designs","title":"Plotting","text":"","code":"check_design(c(2,2,2), mu = 1:2^3)"},{"path":"https://debruine.github.io/faux/dev/articles/plots.html","id":"four-factor-designs","dir":"Articles","previous_headings":"Plotting Designs","what":"Four-factor designs","title":"Plotting","text":"","code":"check_design(c(2,2,2,2), mu = 1:2^4)"},{"path":"https://debruine.github.io/faux/dev/articles/plots.html","id":"five-factor-designs","dir":"Articles","previous_headings":"Plotting Designs","what":"Five-factor designs","title":"Plotting","text":"","code":"check_design(c(2,2,2,2,2), mu = 1:(2^5))"},{"path":"https://debruine.github.io/faux/dev/articles/plots.html","id":"six-factor-designs","dir":"Articles","previous_headings":"Plotting Designs","what":"Six-factor designs","title":"Plotting","text":"","code":"check_design(c(2,2,2,2,2,2), mu = 1:(2^6))"},{"path":"https://debruine.github.io/faux/dev/articles/plots.html","id":"plotting-data","dir":"Articles","previous_headings":"","what":"Plotting Data","title":"Plotting","text":"can plot data created faux using plot_design(), . return ggplot violin-boxplot default.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/plots.html","id":"one-factor-data","dir":"Articles","previous_headings":"Plotting Data","what":"One-factor data","title":"Plotting","text":"","code":"data <- sim_design(2, 2, n = 20, mu = 1:4, plot = FALSE) plot_design(data) plot_design(data, geoms = \"violin\") plot_design(data, geoms = \"box\") plot_design(data, geoms = \"pointrangeSD\") plot_design(data, geoms = c(\"violin\", \"pointrangeSE\")) plot_design(data, geoms = c(\"violin\", \"jitter\"))"},{"path":"https://debruine.github.io/faux/dev/articles/plots.html","id":"two-factor-data","dir":"Articles","previous_headings":"Plotting Data","what":"Two-factor data","title":"Plotting","text":"","code":"data <- sim_design(2, 2, mu = 1:4, plot = FALSE) plot_design(data)"},{"path":"https://debruine.github.io/faux/dev/articles/plots.html","id":"palettes","dir":"Articles","previous_headings":"Plotting Data","what":"Palettes","title":"Plotting","text":"can change default brewer palette “Dark2” options (see ?ggplot2::scale_colour_brewer options).  can also add non-brewer palette (ggplot function). get message duplicate scale, can suppress suppressMessages() r chunk.","code":"data <- sim_design(5, n = 20, mu = 1:5, plot = FALSE) cowplot::plot_grid(   plot_design(data, palette = \"Purples\") + ggtitle(\"Purples\"),   plot_design(data, palette = \"Pastel2\") + ggtitle(\"Pastel2\"),   plot_design(data, palette = \"Spectral\") + ggtitle(\"Spectral\"),   nrow = 1 ) plot_design(data) +    scale_fill_viridis_d() +   theme_classic() +   xlab(\"\") +   ggtitle(\"Plot with viridis fill and classic theme\") #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale."},{"path":"https://debruine.github.io/faux/dev/articles/plots.html","id":"change-order-of-factors","dir":"Articles","previous_headings":"Plotting Data","what":"Change order of factors","title":"Plotting","text":"List factors want show order fill/colour, x-axis, facet row(s), facet column(s).  can also plot subset factors.","code":"data <- sim_design(c(2,2,2), n = 50, mu = 1:8, sd = 16, plot = FALSE) abc <- plot_design(data, \"W1\", \"W2\", \"W3\", geoms = \"violin\") acb <- plot_design(data, \"W1\", \"W3\", \"W2\", geoms = \"violin\") bac <- plot_design(data, \"W2\", \"W1\", \"W3\", geoms = \"violin\") bca <- plot_design(data, \"W2\", \"W3\", \"W1\", geoms = \"violin\") cab <- plot_design(data, \"W3\", \"W1\", \"W2\", geoms = \"violin\") cba <- plot_design(data, \"W3\", \"W2\", \"W1\", geoms = \"violin\")  cowplot::plot_grid(abc, acb, bac, bca, cab, cba, nrow = 3,                     labels = c(\"123\", \"132\", \"213\", \"231\", \"312\", \"321\")) # main effects, no interactions intercept <- 0 effect_code <- list(a = -.5, b = .5) W1 <- lapply(effect_code, `*`, 2) W2 <- lapply(effect_code, `*`, -1) W3 <- lapply(effect_code, `*`, 0)  mu <- list(W1a_W2a_W3a = intercept + W1$a + W2$a + W3$a,            W1b_W2a_W3a = intercept + W1$b + W2$a + W3$a,            W1a_W2b_W3a = intercept + W1$a + W2$b + W3$a,            W1b_W2b_W3a = intercept + W1$b + W2$b + W3$a,            W1a_W2a_W3b = intercept + W1$a + W2$a + W3$b,            W1b_W2a_W3b = intercept + W1$b + W2$a + W3$b,            W1a_W2b_W3b = intercept + W1$a + W2$b + W3$b,            W1b_W2b_W3b = intercept + W1$b + W2$b + W3$b)  data <- sim_design(c(2,2,2), n = 50, mu = mu, sd = 2, plot = FALSE)  # make plots geoms <- c(\"pointrangeSD\") W1 <- plot_design(data, \"W1\", geoms = geoms) + ggtitle(\"W1\") W2 <- plot_design(data, \"W2\", geoms = geoms) + ggtitle(\"W2\") W3 <- plot_design(data, \"W3\", geoms = geoms) + ggtitle(\"W3\") W12 <- plot_design(data, \"W1\", \"W2\", geoms = geoms) + ggtitle(\"W1 & W2\") W13 <- plot_design(data, \"W1\", \"W3\", geoms = geoms) + ggtitle(\"W1 & W3\") W23 <- plot_design(data, \"W2\", \"W3\", geoms = geoms) + ggtitle(\"W2 & W3\")  cowplot::plot_grid(W1, W2, W3, W12, W13, W23, nrow = 2)"},{"path":"https://debruine.github.io/faux/dev/articles/plots.html","id":"facet-labels","dir":"Articles","previous_headings":"Plotting Data","what":"Facet Labels","title":"Plotting","text":"Set labeller “label_both” want facets include factor label.","code":"within <- list(   pet = c(cat = \"Cats\", dog = \"Dogs\"),   time = c(am = \"Morning\", pm = \"Night\"),   grp = c(ctl = \"Control\", exp = \"Experimental\"),   dose = 1:5 )    factor_labels  <- list(pet = \"Type of Pet\",                        time = \"Time of Day\",                        grp = \"Group\",                        dose = \"Treatment Dose\")  sim_design(within, vardesc = factor_labels,            mu = 1:40, sd = 5, plot = FALSE) %>%    plot_design(\"dose\", \"pet\", \"time\", \"grp\", labeller = \"label_both\", palette = \"Spectral\")"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Randomised Reports","text":"functions require version 1.1.0 faux (add_random(), add_between(), add_ranef() add_contrast()). feedback welcome. Start script setting seed unique student. useful function can use generate seed student ID, even contains letters.","code":"# devtools::install_github(\"debruine/faux\") library(faux) library(dplyr) library(tidyr) library(purrr) library(ggplot2) library(readr) library(glue) theme_set(theme_minimal()) seed_from_string <- function(seed) {   if (is.numeric(seed)) return(set.seed(seed))      # otherwise set from characters   seed %>%     openssl::md5() %>%       # turn into something with lots of numbers     gsub(\"[a-z]\", \"\", .) %>% # get rid of letters     substr(1, 8) %>%         # select the first 8 numbers     set.seed() }  student_id <- \"8675309J\" seed_from_string(student_id)"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"simulate-subjects","dir":"Articles","previous_headings":"","what":"Simulate subjects","title":"Randomised Reports","text":"Now, make table subjects.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"random-factor","dir":"Articles","previous_headings":"Simulate subjects","what":"Random factor","title":"Randomised Reports","text":"example, ’m going choose random number subjects 300 400. function add_random() creates random effects structure.","code":"subj_n <- sample(300:400, 1) subjects <- add_random(subj_id = subj_n)"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"gender","dir":"Articles","previous_headings":"Simulate subjects","what":"Gender","title":"Randomised Reports","text":"Now add -subject factor gender three levels: “female”, “male”, “nonbinary”. set probability proportions, randomly sampled. ’s realistic people want disclose gender, can use messy() set proportion gender column NAs.","code":"subjects <- subjects %>%   add_between(gender = c(\"female\", \"male\", \"nonbinary\"),               .prob = c(.3, .6, .1)) subjects <- subjects %>%   messy(prop = 0.05, \"gender\")"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"age","dir":"Articles","previous_headings":"Simulate subjects","what":"Age","title":"Randomised Reports","text":"Now add age column. ’m using 18 + rpois(nrow(.), 3) make distribution ’s pretty typical undergraduate students, can choose simulation function relevant questions. ’m also replacing 5% values word “missing”, convert character column want students practice dealing non-standard missing values.","code":"subjects <- subjects %>%   mutate(age = 18 + rpois(nrow(.), 3)) %>%   messy(prop = 0.05, \"age\", replace = \"missing\")"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"language","dir":"Articles","previous_headings":"Simulate subjects","what":"Language","title":"Randomised Reports","text":"Add -subjects factor language, 70% monolingual 30% bilingual.","code":"subjects <- subjects %>%   add_between(language = c(\"monolingual\", \"bilingual\"),               .prob = c(.7, .3))"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"experiment-factors","dir":"Articles","previous_headings":"Simulate subjects","what":"Experiment factors","title":"Randomised Reports","text":"want condition version crossed ’s equal number subjects cell. Specifying add_between() accomplishes .","code":"subjects <- subjects %>%   add_between(condition = c(\"A\", \"B\"),               version = c(\"V1\", \"V2\"))"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"subject-function","dir":"Articles","previous_headings":"Simulate subjects","what":"Subject function","title":"Randomised Reports","text":"Now wrap code making subject table function. makes easy make one subject table simulated study, example, students practice combining tables. can also add arguments might want vary, like names condition version levels. Set defaults used example .","code":"make_subjects <- function(subj_n = sample(300:400, 1),                           cond_levels = c(\"A\", \"B\"),                           vers_levels = c(\"V1\", \"V2\")) {   add_random(subj_id = subj_n) %>%     add_between(gender = c(\"female\", \"male\", \"nonbinary\"),                 .prob = c(.3, .6, .1)) %>%     messy(prop = 0.05, \"gender\") %>%     mutate(age = 18 + rpois(nrow(.), 3)) %>%     messy(prop = 0.05, \"age\", replace = \"missing\") %>%     add_between(language = c(\"monolingual\", \"bilingual\"),                 .prob = c(.7, .3)) %>%     add_between(condition = cond_levels,                 version = vers_levels) }  subjects <- make_subjects()"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"simulate-questions","dir":"Articles","previous_headings":"","what":"Simulate questions","title":"Randomised Reports","text":"Next, need set questionnaire. ’m going adding question data subject table. ’ll extract questions separate table later, make easier set DV using mixed effects model equation.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"random-factor-1","dir":"Articles","previous_headings":"Simulate questions","what":"Random factor","title":"Randomised Reports","text":"First, ’ll add random factor question, randomly creating 5 15 question IDs. code adds cross-classified random factor, subject sees questions. See Mixed Design Simulation tutorial see add nested random factors.","code":"quest_n <- sample(5:15, 1)  questions <- subjects %>%   add_random(quest_id = quest_n)"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"question-reversing","dir":"Articles","previous_headings":"Simulate questions","what":"Question reversing","title":"Randomised Reports","text":"want questions reverse-coded, ’m adding -question factor reversed levels “F” “R”. , specify .= argument show factor vary question. didn’t need code one random factor vary , default function varies random factors one. set .shuffle = TRUE questions randomly assigned forward reversed values, rather odd questions forward even questions reversed. require sophisticated method wrangle resulting data, randomisation means different students’ datasets need different code.","code":"questions <- questions %>%   add_between(.by = \"quest_id\", reversed = c(\"F\", \"R\"), .shuffle = TRUE)"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"random-effects","dir":"Articles","previous_headings":"Simulate questions","what":"Random effects","title":"Randomised Reports","text":"Now set random effects structure. function add_ranef() lets add columns sample values normal distribution mean 0 specified SD. example data, can get realistic values random effects SDs mixed effects model (see tutorial). , ’re setting SD subject’s random intercept 2, SDs random slopes language, condition, version 1. set small, positive correlation among random effect. time run function, different values joint distribution sampled. also add random intercept question account fact questions higher lower values mean. Finally add overall error term, sigma, vary subject question (can skip first .argument).","code":"questions <- questions %>%   add_ranef(.by = \"subj_id\",              s0i = 2,              s_lang = 1,             s_cond = 1,             s_vers = 1,              .cors = 0.2) %>%   add_ranef(.by = \"quest_id\", q0i = 1) %>%   add_ranef(sigma = 3)"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"fixed-effects","dir":"Articles","previous_headings":"Simulate questions","what":"Fixed effects","title":"Randomised Reports","text":"Now can calculate DV. First, want fixed effects dataset vary, ’m setting fixed effect values sampling -05., 0 +0.5 language, condition, version.","code":"lang_effect <- sample(c(-0.5, 0, 0.5), 1) cond_effect <- sample(c(-0.5, 0, 0.5), 1) vers_effect <- sample(c(-0.5, 0, 0.5), 1)"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"factor-contrasts","dir":"Articles","previous_headings":"Simulate questions","what":"Factor contrasts","title":"Randomised Reports","text":"Next, add contrasts recode fixed factors numbers. See contrasts vignette details. 2-level factor, sets first level factor value -0.5 second level +0.5.","code":"questions <- questions %>%   add_contrast(\"language\", add_cols = T, colnames = \"lang\") %>%   add_contrast(\"condition\", add_cols = T, colnames = \"cond\") %>%   add_contrast(\"version\", add_cols = T, colnames = \"vers\")"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"calculate-dv","dir":"Articles","previous_headings":"Simulate questions","what":"Calculate DV","title":"Randomised Reports","text":"Now, can calculate DV sum grand mean (0), plus random intercepts (s0i q0i). simulates subjects tend use higher lower points scale, questions higher lower mean values. Next, add coded versions fixed factor, multiplied effect size plus subject’s random slope effect. simulates subjects show systematically larger smaller effects. Finally, add error term (sigma).","code":"questions <- questions %>%   mutate(dv = 0 + s0i + q0i +            (s_lang + lang_effect) * lang +             (s_cond + cond_effect) * cond +             (s_vers + vers_effect) * vers +            sigma)"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"recode-dv","dir":"Articles","previous_headings":"Simulate questions","what":"Recode DV","title":"Randomised Reports","text":"assignment, want DV Likert scale, ’m going convert dv normal distribution Likert scale 7 points proportions . second mutate reverses questions reverse-coded.","code":"questions <- questions %>%   mutate(dv = norm2likert(dv, prob = c(1, 2, 4, 6, 10, 5, 1)),          dv = ifelse(reversed == \"R\", abs(dv - 8), dv)   )"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"reshape-data","dir":"Articles","previous_headings":"Simulate questions","what":"Reshape data","title":"Randomised Reports","text":", ’m creating quest_name column quest_id reversed columns. sample(2:3) returns columns random order. unite columns randomly sampled separator. produce question names like F-q04 q10 R. putting information questions name isn’t great practice recording data, ’s unfortunately common dealing skill want students practice. make 0.5% observations missing, pivot table long wide format, sample 95% subjects, number subjects subjects table doesn’t exactly match number questions table, different order.","code":"sep <- sample(c(\"_\", \"\", \"-\", \" \"), 1)  questions <- questions %>%    select(subj_id, quest_id, reversed, dv) %>%   unite(col = quest_name, sample(2:3), sep = sep) questions <- questions %>%    messy(prop = .005, \"dv\") %>%   pivot_wider(names_from = quest_name, values_from = dv) %>%   slice_sample(prop = .95)"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"questionnaire-function","dir":"Articles","previous_headings":"Simulate questions","what":"Questionnaire function","title":"Randomised Reports","text":"Now wrap code making questionnaire table function. can use make several questionnaires per student practice joining tables. code needs subjects table argument. can add randomised values arguments. also added likert_prob argument can easily customise number points Likert scale relative proportions.","code":"# randomise between students make_quest <- function(subjects,                        quest_n = 5:15,                        sep = c(\"_\", \"\", \"-\", \" \"),                        lang_effect = c(-0.5, 0, 0.5),                        cond_effect = c(-0.5, 0, 0.5),                        vers_effect = c(-0.5, 0, 0.5),                        likert_prob = c(.05, .1, .2, .3, .2, .1, .05)                        ) {   # sample values   quest_n <- sample(quest_n, 1)   sep <- sample(sep, 1)   lang_effect <- sample(lang_effect, 1)   cond_effect <- sample(cond_effect, 1)   vers_effect <- sample(vers_effect, 1)    subjects %>%     add_random(quest_id = quest_n) %>%     add_between(\"quest_id\", reversed = c(\"F\", \"R\")) %>%     add_ranef(\"subj_id\",                s0i = 2,                s_lang = 1,               s_cond = 1,               s_vers = 1,                .cors = 0.2) %>%     add_ranef(\"quest_id\", q0i = 1) %>%     add_ranef(sigma = 3) %>%     add_contrast(\"language\", add_cols = T, colnames = \"lang\") %>%     add_contrast(\"condition\", add_cols = T, colnames = \"cond\") %>%     add_contrast(\"version\", add_cols = T, colnames = \"vers\") %>%     mutate(dv = s0i + q0i + sigma +              (s_lang + lang_effect) * lang +               (s_cond + cond_effect) * cond +               (s_vers + vers_effect) * vers,            dv = norm2likert(dv, prob = likert_prob),            dv = ifelse(reversed == \"R\", abs(dv - 8), dv)     ) %>%     select(subj_id, quest_id, reversed, dv) %>%     unite(quest_name, sample(2:3), sep = sep) %>%     messy(prop = .005, \"dv\") %>%     pivot_wider(names_from = quest_name, values_from = dv) %>%     slice_sample(prop = .95) }  questions <- make_quest(subjects)"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"generate-random-assignment","dir":"Articles","previous_headings":"","what":"Generate random assignment","title":"Randomised Reports","text":"also want student different research question answer data.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"write-text","dir":"Articles","previous_headings":"Generate random assignment","what":"Write text","title":"Randomised Reports","text":"First, write text want give students. can use fancier methods , like parametrised R Markdown reports, simple effective strategy. Put variables want randomise inside curly brackets, ’ll sample insert using glue::glue(). can save external file want read . way, can create one set template instructions also randomly assign .","code":"research_question_text <- paste(sep = \"\\n\\n\",   \"=== Reproducible Report for {student_id} ===\",      \"Your questionnaire measures {topic}. Your research question is to determine if the {topic} score differs by {iv} for the subset of the sample where {subset} is {level}.\",      \"The {quest_n} {topic} questionnaire items are on a scale from 1 (low) to 7 (high), but some of the items need to be reverse-coded. This is indicated by the letter R in the question column name. You create the {topic} score by summing the questions.\",      \"Watch out for missing data. You can decide whether to omit subjects with missing data or replace the missing data; just explain your choice and its consequences in the report.\",      \"The report should be written like a summary document for your PI. You don't need to show your code in the rendered report. Include summary tables and/or plots with subject demographics from both the full data set and the subset you'll analyse. Visualise the relationship of interest. Conduct a GLM analysis to answer the research question above. Finally, do a power analysis to determine the sample size you would need to have {power}% power to detect a 0.5-point difference between the levels of {iv} with an alpha criterion of {alpha}.\" ) # write to a template file write(research_question_text, \"template_instructions.txt\")"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"define-random-aspects","dir":"Articles","previous_headings":"Generate random assignment","what":"Define random aspects","title":"Randomised Reports","text":"Now define variables text . want iv subset two different factors list “language”, “condition”, “version”. sample one levels subset factor. sample topic “stress”, “extroversion”, “disgust”. can choose relevant topics discipline, course. also sample alpha level power power calculation aspect assessment. reinforces lesson want teach alpha = 0.5 target power = 0.8 mindless defaults question. Justify everything. produce following text. === Reproducible Report 8675309J === questionnaire measures extroversion. research question determine extroversion score differs version subset sample condition . 5 extroversion questionnaire items scale 1 (low) 7 (high), items need reverse-coded. indicated letter R question column name. create extroversion score summing questions. Watch missing data. can decide whether omit subjects missing data replace missing data; just explain choice consequences report. report written like summary document PI. don’t need show code rendered report. Include summary tables /plots subject demographics full data set subset ’ll analyse. Visualise relationship interest. Conduct GLM analysis answer research question . Finally, power analysis determine sample size need 80% power detect 0.5-point difference levels version alpha criterion 0.01.","code":"factors <- c(\"language\", \"condition\", \"version\") two_factors <- sample(factors, 2) iv <- two_factors[[1]] subset <- two_factors[[2]] level <- subjects[[subset]] %>% unique() %>% sample(1) topic <- sample(c(\"stress\", \"extroversion\", \"disgust\"), 1) alpha <- sample(c(.005, .01, .05), 1) power <- sample(c(80, 85, 90), 1) instructions <- readLines(\"template_instructions.txt\") %>%   paste(collapse = \"\\n\") %>%   glue::glue()"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"instructions-function","dir":"Articles","previous_headings":"Generate random assignment","what":"Instructions function","title":"Randomised Reports","text":", wrap code function.","code":"make_instructions <- function(template,                                subjects,                               factors = c(\"language\", \"condition\", \"version\"),                               topics = c(\"stress\", \"extroversion\", \"disgust\"),                               ... # other values you need for the template, like student_id                               ) {   two_factors <- sample(factors, 2)   iv <- two_factors[[1]]   subset <- two_factors[[2]]   level <- subjects[[subset]] %>% unique() %>% sample(1)   topic <- sample(topics, 1)   alpha <- sample(c(.005, .01, .05), 1)   power <- sample(c(80, 85, 90), 1)    readLines(template) %>%     paste(collapse = \"\\n\") %>%     glue::glue() } make_instructions(template = \"template_instructions.txt\",                   subjects = subjects,                   student_id = student_id,                   quest_n = ncol(questions) - 1) #> === Reproducible Report for 8675309J === #>  #> Your questionnaire measures stress. Your research question is to determine if the stress score differs by condition for the subset of the sample where version is V2. #>  #> The 5 stress questionnaire items are on a scale from 1 (low) to 7 (high), but some of the items need to be reverse-coded. This is indicated by the letter R in the question column name. You create the stress score by summing the questions. #>  #> Watch out for missing data. You can decide whether to omit subjects with missing data or replace the missing data; just explain your choice and its consequences in the report. #>  #> The report should be written like a summary document for your PI. You don't need to show your code in the rendered report. Include summary tables and/or plots with subject demographics from both the full data set and the subset you'll analyse. Visualise the relationship of interest. Conduct a GLM analysis to answer the research question above. Finally, do a power analysis to determine the sample size you would need to have 85% power to detect a 0.5-point difference between the levels of condition with an alpha criterion of 0.005."},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"save-files","dir":"Articles","previous_headings":"","what":"Save files","title":"Randomised Reports","text":"Now need create directory student’s files save subject table, question table, instructions. ’m saving files directory contains student ID can upload Moodle easily.","code":"dir <- paste0(\"exam_\", student_id) dir.create(dir, showWarnings = FALSE) readr::write_csv(subjects, file.path(dir, \"subjects.csv\")) readr::write_csv(questions, file.path(dir, \"questions.csv\")) write(instructions, file.path(dir, \"instructions.txt\"))"},{"path":"https://debruine.github.io/faux/dev/articles/random_reports.html","id":"simulation-function","dir":"Articles","previous_headings":"","what":"Simulation function","title":"Randomised Reports","text":"’ve debugged code , put step inside function argument student_id. Now can map list student IDs create personalised data research questions student. pattern student IDs table column called Student ID.","code":"random_project <- function(student_id) {   # set seed using student ID   seed_from_string(student_id)      # simulate subjects   subjects <- make_subjects()      # simulate questionnaire   questions <- make_quest(subjects)      # customise instructions   instructions <- make_instructions(     template = \"template_instructions.txt\",     subjects = subjects,     student_id = student_id,     quest_n = ncol(questions) - 1   )      # write files to a new directory   dir <- paste0(\"exam_\", student_id)   dir.create(dir, showWarnings = FALSE)   readr::write_csv(subjects, file.path(dir, \"subjects.csv\"))   readr::write_csv(questions, file.path(dir, \"questions.csv\"))   write(instructions, file.path(dir, \"instructions.txt\"))      return(dir) } # load student IDs student_list <- tibble(   `Student ID` = 1:5 )  # iterate over the IDs to create a random project purrr::map_chr(student_list$`Student ID`, random_project)"},{"path":"https://debruine.github.io/faux/dev/articles/rnorm_multi.html","id":"quick-example","dir":"Articles","previous_headings":"","what":"Quick example","title":"Simulate Correlated Variables","text":"example, following creates sample 100 observations 3 variables, drawn population mean 0 SD 1, B C means 20 SDs 5. correlates B C r = 0.5, B C correlate r = 0.25. Sample stats","code":"dat <- rnorm_multi(n = 100,                    mu = c(0, 20, 20),                   sd = c(1, 5, 5),                   r = c(0.5, 0.5, 0.25),                    varnames = c(\"A\", \"B\", \"C\"),                   empirical = FALSE)"},{"path":"https://debruine.github.io/faux/dev/articles/rnorm_multi.html","id":"spec_r","dir":"Articles","previous_headings":"Quick example","what":"Specify correlations","title":"Simulate Correlated Variables","text":"can specify correlations one four ways: single r pairs vars vars matrix vars*vars length vector vars*(vars-1)/2 length vector","code":""},{"path":"https://debruine.github.io/faux/dev/articles/rnorm_multi.html","id":"one-number","dir":"Articles","previous_headings":"Quick example > Specify correlations","what":"One Number","title":"Simulate Correlated Variables","text":"want pairs correlation, just specify single number. Sample stats single rho","code":"bvn <- rnorm_multi(100, 5, 0, 1, .3, varnames = letters[1:5])"},{"path":"https://debruine.github.io/faux/dev/articles/rnorm_multi.html","id":"matrix","dir":"Articles","previous_headings":"Quick example > Specify correlations","what":"Matrix","title":"Simulate Correlated Variables","text":"already correlation matrix, output cor(), can specify simulated data . Sample stats correlation matrix","code":"cmat <- cor(iris[,1:4]) bvn <- rnorm_multi(100, 4, 0, 1, cmat,                    varnames = colnames(cmat))"},{"path":"https://debruine.github.io/faux/dev/articles/rnorm_multi.html","id":"vector-varsvars","dir":"Articles","previous_headings":"Quick example > Specify correlations","what":"Vector (vars*vars)","title":"Simulate Correlated Variables","text":"can specify correlation matrix hand vars*vars length vector, include correlations 1 diagonal. Sample stats vars*vars vector","code":"cmat <- c(1, .3, .5,           .3, 1, 0,           .5, 0, 1) bvn <- rnorm_multi(100, 3, 0, 1, cmat,                    varnames = c(\"first\", \"second\", \"third\"))"},{"path":"https://debruine.github.io/faux/dev/articles/rnorm_multi.html","id":"vector-varsvars-12","dir":"Articles","previous_headings":"Quick example > Specify correlations","what":"Vector (vars*(vars-1)/2)","title":"Simulate Correlated Variables","text":"can specify correlation matrix hand vars*(vars-1)/2 length vector, skipping diagonal lower left duplicate values. Sample stats (vars*(vars-1)/2) vector","code":"rho1_2 <- .3 rho1_3 <- .5 rho1_4 <- .5 rho2_3 <- .2 rho2_4 <- 0 rho3_4 <- -.3 cmat <- c(rho1_2, rho1_3, rho1_4, rho2_3, rho2_4, rho3_4) bvn <- rnorm_multi(100, 4, 0, 1, cmat,                    varnames = letters[1:4])"},{"path":"https://debruine.github.io/faux/dev/articles/rnorm_multi.html","id":"empirical","dir":"Articles","previous_headings":"Quick example","what":"empirical","title":"Simulate Correlated Variables","text":"want samples exact correlations, means, SDs entered, set empirical TRUE. Sample stats empirical = TRUE","code":"bvn <- rnorm_multi(100, 5, 0, 1, .3,                    varnames = letters[1:5],                    empirical = T)"},{"path":"https://debruine.github.io/faux/dev/articles/rnorm_multi.html","id":"pre-existing-variables","dir":"Articles","previous_headings":"","what":"Pre-existing variables","title":"Simulate Correlated Variables","text":"Us rnorm_pre() create vector specified correlation one pre-existing variables. following code creates new column called B mean 10, SD 2 correlation r = 0.5 column. Set empirical = TRUE return vector exact specified parameters. can also specify correlations one vector setting first argument data frame containing continuous columns r correlation column. correlation patterns possible, ’ll get error message correlations ask impossible.","code":"dat <- rnorm_multi(varnames = \"A\") %>%   mutate(B = rnorm_pre(A, mu = 10, sd = 2, r = 0.5)) dat$C <- rnorm_pre(dat$A, mu = 10, sd = 2, r = 0.5, empirical = TRUE) dat$D <- rnorm_pre(dat, r = c(.1, .2, .3), empirical = TRUE) dat$E <- rnorm_pre(dat, r = .9) #> Warning in rnorm_pre(dat, r = 0.9): Correlations are impossible."},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"quick-example","dir":"Articles","previous_headings":"","what":"Quick example","title":"Simulate by Design","text":"example, following creates 2w*2b design 100 observations cell. -subject factor pet two levels (cat dog). within-subject factor time two levels (day night). data sampled population mean cat_day cell 10, mean cat_night cell 20, mean dog_day cell 15, mean dog_night cell 25. cells SD 5 within-subject cells correlated r = 0.5.","code":"between <- list(pet = c(cat = \"Cat Owners\",                          dog = \"Dog Owners\")) within <- list(time = c(\"morning\", \"noon\", \"evening\", \"night\")) mu <- data.frame(   cat    = c(10, 12, 14, 16),   dog    = c(10, 15, 20, 25),   row.names = within$time ) # add factor labels for plotting vardesc <- c(pet = \"Type of Pet\",              time = \"Time of Day\")  df <- sim_design(within, between,                   n = 100, mu = mu, sd = 5, r = .5,                  empirical = TRUE, vardesc = vardesc, plot = TRUE)"},{"path":[]},{"path":[]},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"anonymous","dir":"Articles","previous_headings":"Specification of design parameters > Factor and level names","what":"Anonymous","title":"Simulate by Design","text":"don’t feel like naming factors levels, can just put vector levels. can make quick 2w*3w*2b following code.","code":"df <- sim_design(within = c(2,3), between = c(2),                   n = 10, mu = 1:12, sd = 1, r = 0.5)"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"list-of-vectors","dir":"Articles","previous_headings":"Specification of design parameters > Factor and level names","what":"List of vectors","title":"Simulate by Design","text":"can specify -subject within-subject factors list vectors item names factor labels vectors level labels.","code":"between <- list(   pet = c(\"cat\", \"dog\") ) within <- list(   time = c(\"day\", \"night\") )  df <- sim_design(within, between, mu = 1:4)"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"levels-with-underscores","dir":"Articles","previous_headings":"Specification of design parameters > Factor and level names","what":"Levels with underscores","title":"Simulate by Design","text":"wide format, faux uses underscore separate level names. Therefore, underscores factor level names generate error. can change default faux_options().","code":"# with default sep = _ within <- list(   A = c(\"A_1\", \"A_2\"),   B = c(\"B_1\", \"B_2\") )  sim_design(within, n = 5, plot = FALSE) #> Error in check_design(within = within, between = between, n = n, mu = mu, : These level names have the separator '_' in them: A_1, A_2, B_1, B_2 #> Please change the names (see fix_name_labels) or choose another separator character using the sep argument or faux_options(sep = '~') #> safe separators for your factor labels are: _ faux_options(sep = \".\")  sim_design(within, n = 5, plot = FALSE) #>   id     A_1.B_1    A_1.B_2     A_2.B_1    A_2.B_2 #> 1 S1  0.26758568 -1.0427328 -0.76117907 -1.4205876 #> 2 S2 -1.26342118 -0.6933384 -0.27144145 -0.3073318 #> 3 S3 -1.05053275  0.9666903  1.63505565  0.6926959 #> 4 S4  0.65104622  0.2780749  0.77626277 -0.9197527 #> 5 S5  0.01020941 -0.1250620 -0.04939468  0.4310845 # put the separator back to _ for the rest of this vignette faux_options(sep = \"_\")"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"list-of-named-vectorslists","dir":"Articles","previous_headings":"Specification of design parameters > Factor and level names","what":"List of named vectors/lists","title":"Simulate by Design","text":"can also specify factors list named vectors lists item names factor labels, vector names level labels used data table, vector items long labels codebook plot. #### Factor labels Add factor labels vardesc argument. can also customise ID DV column names (default c(id = \"id\") c(y = \"value\")).  within-subjects factors table wide format, see DV name plots. used convert table wide long.","code":"between <- list(   pet = c(cat = \"Is a cat person\", dog = \"Is a dog person\") ) within <- list(   time = c(day = \"Tested during the day\", night = \"Tested at night\") ) df <- sim_design(within, between, mu = 1:4) vardesc <- c(pet = \"Type of Pet\",              time = \"Time of Day\")  df <- sim_design(within, between, mu = 1:4,                   id = c(pet_id = \"Pet ID\"),                  dv = c(score = \"Score on the Test\"),                  vardesc = vardesc) wide2long(df) %>% head() #>   pet_id pet time      score #> 1   S001 cat  day  2.1304574 #> 2   S002 cat  day  2.1080727 #> 3   S003 cat  day  0.6007963 #> 4   S004 cat  day -0.6186662 #> 5   S005 cat  day  0.1293905 #> 6   S006 cat  day  1.1489877"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"specifying-n","dir":"Articles","previous_headings":"Specification of design parameters","what":"Specifying N","title":"Simulate by Design","text":"can specify Ns -subject cell single number, named list, data frame.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"single-number","dir":"Articles","previous_headings":"Specification of design parameters > Specifying N","what":"Single number","title":"Simulate by Design","text":"usually want specify n single number. N per cell, total sample size.","code":"n <- 20 # n per cell, not total design <- check_design(2, c(2,2), n = n, plot = FALSE) str(design$n) #> List of 4 #>  $ B1a_B2a: num 20 #>  $ B1a_B2b: num 20 #>  $ B1b_B2a: num 20 #>  $ B1b_B2b: num 20"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"named-list","dir":"Articles","previous_headings":"Specification of design parameters > Specifying N","what":"Named list","title":"Simulate by Design","text":"can also specify n named list Ns per -subject cell.","code":"n <- list(   B1a_B2a = 10,    B1a_B2b = 20,    B1b_B2a = 30,    B1b_B2b = 40 ) design <- check_design(2, c(2,2), n = n, plot = FALSE) str(design$n) #> List of 4 #>  $ B1a_B2a: num 10 #>  $ B1a_B2b: num 20 #>  $ B1b_B2a: num 30 #>  $ B1b_B2b: num 40"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"dataframe","dir":"Articles","previous_headings":"Specification of design parameters > Specifying N","what":"Dataframe","title":"Simulate by Design","text":"data frame. just need get row column names right, don’t right order. can specify cells row names column names check_design() fix . Since n within-subject factor, can specify n single column name.","code":"n <- data.frame(   B1b_B2b = 40,   B1a_B2a = 10,    B1a_B2b = 20,    B1b_B2a = 30 ) design <- check_design(2, c(2,2), n = n, plot = FALSE) str(design$n) #> List of 4 #>  $ B1a_B2a: num 10 #>  $ B1a_B2b: num 20 #>  $ B1b_B2a: num 30 #>  $ B1b_B2b: num 40 n <- data.frame(n = c(10, 20, 30, 40),                 row.names = c(\"B1a_B2a\", \"B1a_B2b\", \"B1b_B2a\", \"B1b_B2b\")) design <- check_design(2, c(2,2), n = n, plot = FALSE) str(design$n) #> List of 4 #>  $ B1a_B2a: num 10 #>  $ B1a_B2b: num 20 #>  $ B1b_B2a: num 30 #>  $ B1b_B2b: num 40"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"mu-and-sd","dir":"Articles","previous_headings":"Specification of design parameters","what":"Mu and SD","title":"Simulate by Design","text":"specifications mu sd need within-subject -subject cells. can specify single numbers, vector, named list named vectors data frame.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"unnamed-vector","dir":"Articles","previous_headings":"Specification of design parameters > Mu and SD","what":"Unnamed vector","title":"Simulate by Design","text":"unnamed vector quick way specify means SDs, order relative - within-subject cells can confusing.","code":"between <- list(pet       = c(\"cat\", \"dog\"),                  condition = c(\"A\",   \"B\")) within  <- list(time      = c(\"day\", \"night\")) mu <- c(10, 20, 30, 40, 50, 60, 70, 80) design <- check_design(within, between, mu = mu, plot = FALSE) str(design$mu) #> List of 4 #>  $ cat_A:List of 2 #>   ..$ day  : num 10 #>   ..$ night: num 20 #>  $ cat_B:List of 2 #>   ..$ day  : num 30 #>   ..$ night: num 40 #>  $ dog_A:List of 2 #>   ..$ day  : num 50 #>   ..$ night: num 60 #>  $ dog_B:List of 2 #>   ..$ day  : num 70 #>   ..$ night: num 80"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"named-list-of-named-vectors","dir":"Articles","previous_headings":"Specification of design parameters > Mu and SD","what":"Named list of named vectors","title":"Simulate by Design","text":"named list named vectors prevents confusion due order. levels -subject factors list names levels within-subject factors vector names, order doesn’t matter. Alternatively, can specify data frames. transpose dataframe, works fine unless within- -subject cells identical names.","code":"mu <- list(   cat_B = c(night = 40, day = 30),   cat_A = c(day = 10, night = 20),   dog_A = c(day = 50, night = 60),   dog_B = c(day = 70, night = 80) ) design <- check_design(within, between, mu = mu, sd = 1, plot = FALSE) str(design$mu) #> List of 4 #>  $ cat_A:List of 2 #>   ..$ day  : num 10 #>   ..$ night: num 20 #>  $ cat_B:List of 2 #>   ..$ day  : num 30 #>   ..$ night: num 40 #>  $ dog_A:List of 2 #>   ..$ day  : num 50 #>   ..$ night: num 60 #>  $ dog_B:List of 2 #>   ..$ day  : num 70 #>   ..$ night: num 80 mu <- data.frame(   cat_A = c(10, 20),   cat_B = c(30, 40),   dog_A = c(50, 60),   dog_B = c(70, 80),   row.names = c(\"day\", \"night\") ) design <- check_design(within, between, mu = mu, plot = FALSE) str(design$mu) #> List of 4 #>  $ cat_A:List of 2 #>   ..$ day  : num 10 #>   ..$ night: num 20 #>  $ cat_B:List of 2 #>   ..$ day  : num 30 #>   ..$ night: num 40 #>  $ dog_A:List of 2 #>   ..$ day  : num 50 #>   ..$ night: num 60 #>  $ dog_B:List of 2 #>   ..$ day  : num 70 #>   ..$ night: num 80 mu <- data.frame(   day = c(10, 30, 50, 70),   night = c(20, 40, 60, 80),   row.names = c(\"cat_A\", \"cat_B\", \"dog_A\", \"dog_B\") ) design <- check_design(within, between, mu = mu, plot = FALSE) str(design$mu) #> List of 4 #>  $ cat_A:List of 2 #>   ..$ day  : num 10 #>   ..$ night: num 20 #>  $ cat_B:List of 2 #>   ..$ day  : num 30 #>   ..$ night: num 40 #>  $ dog_A:List of 2 #>   ..$ day  : num 50 #>   ..$ night: num 60 #>  $ dog_B:List of 2 #>   ..$ day  : num 70 #>   ..$ night: num 80"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"correlations","dir":"Articles","previous_headings":"Specification of design parameters","what":"Correlations","title":"Simulate by Design","text":"within-subject factors, need set correlation -cell. , two levels one within-subject factor, can set one correlation per -cell.","code":"r <- list(   cat_A = .5,   cat_B = .5,   dog_A = .6,   dog_B = .4 ) design <- check_design(within, between, r = r, plot = FALSE) design$r #> $cat_A #>       day night #> day   1.0   0.5 #> night 0.5   1.0 #>  #> $cat_B #>       day night #> day   1.0   0.5 #> night 0.5   1.0 #>  #> $dog_A #>       day night #> day   1.0   0.6 #> night 0.6   1.0 #>  #> $dog_B #>       day night #> day   1.0   0.4 #> night 0.4   1.0"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"upper-right-triangle","dir":"Articles","previous_headings":"Specification of design parameters > Correlations","what":"Upper right triangle","title":"Simulate by Design","text":"2 within-subject cells, can specify specific correlation upper right triangle correlation matrix vector.","code":"r <- list(   B1a = c(.10, .20, .30,                .40, .50,                     .60),   B1b = c(.15, .25, .35,                .45, .55,                     .65) ) design <- check_design(4, 2, r = r, plot = FALSE) design$r #> $B1a #>     W1a W1b W1c W1d #> W1a 1.0 0.1 0.2 0.3 #> W1b 0.1 1.0 0.4 0.5 #> W1c 0.2 0.4 1.0 0.6 #> W1d 0.3 0.5 0.6 1.0 #>  #> $B1b #>      W1a  W1b  W1c  W1d #> W1a 1.00 0.15 0.25 0.35 #> W1b 0.15 1.00 0.45 0.55 #> W1c 0.25 0.45 1.00 0.65 #> W1d 0.35 0.55 0.65 1.00"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"correlation-matrix","dir":"Articles","previous_headings":"Specification of design parameters > Correlations","what":"Correlation matrix","title":"Simulate by Design","text":"can also enter correlation matrix cor().","code":"within <- list(cars = c(\"speed\", \"dist\")) between <- list(half = c(\"first\", \"last\")) r <- list(   first = cor(cars[1:25,]),   last = cor(cars[26:50,]) )  design <- check_design(within, between, r = r, plot = FALSE) design$r #> $first #>           speed      dist #> speed 1.0000000 0.6090282 #> dist  0.6090282 1.0000000 #>  #> $last #>           speed      dist #> speed 1.0000000 0.6687654 #> dist  0.6687654 1.0000000"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"empirical","dir":"Articles","previous_headings":"Specification of design parameters","what":"Empirical","title":"Simulate by Design","text":"set empirical = TRUE, get exact means, SDs correlations specified. set empirical = FALSE omit argument, data sampled population parameters, dataset exactly values (just average).","code":"between <- list(pet  = c(\"cat\", \"dog\")) within  <- list(time = c(\"day\", \"night\")) mu <- list(   cat = c(day = 10, night = 20),   dog = c(day = 30, night = 40) )  sd <- list(   cat = c(day = 5, night = 10),   dog = c(day = 15, night = 20) )  r <- list(cat = .5, dog = .6)  df <- sim_design(within, between, n = 100,                   mu = mu, sd = sd, r = r,                  empirical = TRUE)"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"more-factors","dir":"Articles","previous_headings":"","what":"More factors","title":"Simulate by Design","text":"2w*3w*2b*2b example. multiple within factors, need specify parameters cell. Cell names level names, order listed within arguments, separated underscores. Foe example, one within-subject factor condition levels con inc, another within-subject factor version levels easy, med, hard, cell labels : con_easy, inc_easy, con_med, inc_med, con_hard, inc_hard. characters level names except letters numbers, replaced full stop (e.g., super-good level_name become .super.good.level.name). can set correlation -cell single number. can set full correlation matrix vector matrix. Since 6 within-cells, 6x6 matrix vector upper right 15 values. can set long = TRUE return data frame long format, usually easier plotting.","code":"within <- list(   condition = c(con = \"Mean of congruent trials\",                  inc = \"Mean of incongruent trials\"),   version = c(easy = \"Easy\",                med  = \"Medium\",                hard = \"Difficult\") )  between <- list(   experience = c(novice = \"Novice\", expert = \"Expert\"),   time = c(day = \"Before 5pm\", night = \"After 5pm\") )  mu <- data.frame(   row.names = c(\"con_easy\", \"con_med\", \"con_hard\",                 \"inc_easy\", \"inc_med\",  \"inc_hard\"),   novice_day = 10:15,   novice_night = 11:16,   expert_day = 9:14,   expert_night = 10:15 ) r <- list(   novice_day = 0.3,   novice_night = 0.2,   expert_day = 0.5,   expert_night = 0.4 ) # upper right triangle correlation specification # inc and con have r = 0.5 within each difficultly level, 0.2 otherwise #          ce,  ie,  cm,  im,  ch,  ih triangle <-  c(0.5, 0.2, 0.2, 0.2, 0.2, #con_easy                     0.2, 0.2, 0.2, 0.2, #inc_easy                          0.5, 0.2, 0.2, #con_med                               0.2, 0.2, #inc_med                                    0.5) #con_hard                                         #inc_hard  r <- list(   novice_day = triangle,   novice_night = triangle,   expert_day = triangle,   expert_night = triangle ) df <- sim_design(within, between, n = 100,                   mu = mu, sd = 2, r = r,                   dv = c(rt = \"Reaction Time\"),                   plot = FALSE, long = TRUE)  head(df) #>     id experience time condition version        rt #> 1 S001     novice  day       con    easy  8.955105 #> 2 S002     novice  day       con    easy 11.444310 #> 3 S003     novice  day       con    easy  9.951363 #> 4 S004     novice  day       con    easy  9.840359 #> 5 S005     novice  day       con    easy  7.108761 #> 6 S006     novice  day       con    easy 13.018959"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"multiple-datasets","dir":"Articles","previous_headings":"","what":"Multiple datasets","title":"Simulate by Design","text":"might want make multiple datasets design simulations. can inefficient just put sim_design() apply function loop (especially leave plot = TRUE). patterns make faster.","code":""},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"rep-argument","dir":"Articles","previous_headings":"Multiple datasets","what":"rep argument","title":"Simulate by Design","text":"can simulate multiple datasets setting rep argument sim_design() number greater 1. return nested data frame one column called rep another column called data, contains individual data frame. method faster repeatedly calling sim_design(), check syntax design time, returns nested dataset makes easy apply analysis replicate. code creates 5 data frames 2W*2B design. can access individual data frame using df$data[[1]] run function data frame using pattern like :","code":"df <- sim_design(within = 2, between = 2,                   n = 50, mu = c(1, 1, 1, 1.5),                   sd = 1, r = 0.5, plot = FALSE,                   long = TRUE, rep = 5)  df #>   rep #> 1   1 #> 2   2 #> 3   3 #> 4   4 #> 5   5 #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   data #> 1            S001, S002, S003, S004, S005, S006, S007, S008, S009, S010, S011, S012, S013, S014, S015, S016, S017, S018, S019, S020, S021, S022, S023, S024, S025, S026, S027, S028, S029, S030, S031, S032, S033, S034, S035, S036, S037, S038, S039, S040, S041, S042, S043, S044, S045, S046, S047, S048, S049, S050, S051, S052, S053, S054, S055, S056, S057, S058, S059, S060, S061, S062, S063, S064, S065, S066, S067, S068, S069, S070, S071, S072, S073, S074, S075, S076, S077, S078, S079, S080, S081, S082, S083, S084, S085, S086, S087, S088, S089, S090, S091, S092, S093, S094, S095, S096, S097, S098, S099, S100, S001, S002, S003, S004, S005, S006, S007, S008, S009, S010, S011, S012, S013, S014, S015, S016, S017, S018, S019, S020, S021, S022, S023, S024, S025, S026, S027, S028, S029, S030, S031, S032, S033, S034, S035, S036, S037, S038, S039, S040, S041, S042, S043, S044, S045, S046, S047, S048, S049, S050, S051, S052, S053, S054, S055, S056, S057, S058, S059, S060, S061, S062, S063, S064, S065, S066, S067, S068, S069, S070, S071, S072, S073, S074, S075, S076, S077, S078, S079, S080, S081, S082, S083, S084, S085, S086, S087, S088, S089, S090, S091, S092, S093, S094, S095, S096, S097, S098, S099, S100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0.823628416606036, 1.04947775580423, 2.14830047764618, 1.2746143971463, 1.85528774323286, 0.287939677300414, -1.27415818354606, 1.35855179067829, 0.903614515067483, 1.12671889162066, 0.353474382511494, 1.20954835734338, 1.89912794546735, 1.35203136557311, 2.1778106637565, 0.451015637372707, 2.31046707184244, -0.888552646978253, 0.72149642539336, -0.669736179991179, 0.769872970303931, 1.20474880438577, 1.37968594771501, 0.240252828701029, 0.50185382952182, 0.44855979013257, 1.15458135761622, 1.3566380728204, 1.70198218026366, 0.754409303867608, 0.694858402572212, -0.273090219641491, -0.245883352029218, 0.0802483363202747, -0.25998108734952, 1.20445939086955, 0.837588857408504, -0.0994548351456142, -0.371990312540926, 1.95394843334331, 0.119557697448772, 0.840296366318227, 0.564219478920604, -0.169958089890487, 1.04128828676752, 2.05358703106541, 0.330591650499939, 0.290976662359473, 2.22606719773034, 1.63952582998424, 1.36110578262358, 1.81680440451965, 2.08567609750736, 1.16649125163109, 1.03160165204683, 1.51589513092244, 0.688866730527635, 0.330481547665992, 1.05337427336241, 2.89128544728883, 1.09803816918536, 2.59603752908679, 3.27721369070762, -0.0197106839195025, 0.992087370598539, 2.22000991912815, 0.278801046148988, -1.04299701393165, 2.11240965152578, -0.315332071101054, 2.33207963166107, 0.547941301633339, 2.85417747031179, 1.03741353356912, 0.725190043569734, 1.52037837047341, 1.15865622411926, 0.375213759851367, 2.19144331741016, -0.0719439849573331, 1.15291306563139, 0.752495033684313, 1.48462290848953, 0.785400153053635, 0.402325303408856, 1.90031589608581, 2.00698734577334, 2.58434245812388, 0.0471156655267447, 1.00138217081603, -0.533397534037533, 0.897328379823144, 1.119312040762, 2.57769083116132, 0.364739008436025, 0.735669130080452, 2.7898897544857, -0.429289201622085, 2.59767391322935, 0.0220715593972221, 1.42812632814137, 1.83180834945825, 2.64162416822216, 0.212839425921167, 2.24875193767116, 1.22786654052047, -0.188304336636493, 2.5696922567609, 1.58161994529385, 0.404785156091983, 1.07639480873454, 1.93495974279469, 0.0948050906749599, 1.03280358196676, 0.0753688565096863, 1.04452915854102, 1.88942971006669, 0.625224368661162, 1.73127378137021, 1.28363253679448, 0.673196841819345, 1.04864492482672, 0.461438348496473, 0.986367086001815, -0.211442452191251, 1.28667862271651, -0.110032234471713, -0.0947216795574568, 2.1686629710495, 0.275433394090764, -0.176141163688576, -0.574154094435054, -0.960123019911506, -0.975125226852169, 1.76424174921601, 1.18195181449038, 0.770030114124141, 0.312944956892903, 0.416400233385417, 1.94574445806849, -1.17892799703716, 1.73827512620301, 0.375855960938711, 1.18768790361655, 1.54069496704814, 0.326973544732288, 0.439392210654003, 0.073356333081424, 0.516475961724828, 0.914867537592882, 1.99746734949878, 1.85616256296007, 2.02083527576117, 1.97394463939547, 0.646851279799486, 1.41004654431424, 2.57452245155355, 2.862770251989, 2.37656180852146, 2.81359435224678, 2.90271372803568, 4.24607694141317, 2.56824427297405, 2.44821346577655, 1.90329274465825, 1.52160314267697, 0.883615478398367, 0.46297273564758, 3.09078322946075, 0.0890925281198609, 1.70389349506644, 0.548169024441266, 2.59595777336759, 1.48315485280796, 1.30629470392602, 1.71339526948514, 1.4296509635746, 1.1968885644779, 0.426794630739931, -0.0567084559451141, 1.376783160249, 1.18483730604954, 0.71919921099173, 0.189789684221004, 0.0747130429313805, 1.85368037073154, 4.08709192712577, 1.01974252859095, -0.674030240437482, 0.737642837155642, -0.587726221725291, 0.0581842238237242, 0.42808908803952, 2.0560740961566, 2.16921532062153, 0.975203201587821, 0.124257751487148, -0.72530985168842, 1.03518732483913, 1.029223113283 #> 2    S001, S002, S003, S004, S005, S006, S007, S008, S009, S010, S011, S012, S013, S014, S015, S016, S017, S018, S019, S020, S021, S022, S023, S024, S025, S026, S027, S028, S029, S030, S031, S032, S033, S034, S035, S036, S037, S038, S039, S040, S041, S042, S043, S044, S045, S046, S047, S048, S049, S050, S051, S052, S053, S054, S055, S056, S057, S058, S059, S060, S061, S062, S063, S064, S065, S066, S067, S068, S069, S070, S071, S072, S073, S074, S075, S076, S077, S078, S079, S080, S081, S082, S083, S084, S085, S086, S087, S088, S089, S090, S091, S092, S093, S094, S095, S096, S097, S098, S099, S100, S001, S002, S003, S004, S005, S006, S007, S008, S009, S010, S011, S012, S013, S014, S015, S016, S017, S018, S019, S020, S021, S022, S023, S024, S025, S026, S027, S028, S029, S030, S031, S032, S033, S034, S035, S036, S037, S038, S039, S040, S041, S042, S043, S044, S045, S046, S047, S048, S049, S050, S051, S052, S053, S054, S055, S056, S057, S058, S059, S060, S061, S062, S063, S064, S065, S066, S067, S068, S069, S070, S071, S072, S073, S074, S075, S076, S077, S078, S079, S080, S081, S082, S083, S084, S085, S086, S087, S088, S089, S090, S091, S092, S093, S094, S095, S096, S097, S098, S099, S100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1.90465229732828, 1.06198784411447, -1.11993218857811, 0.10242812527078, -0.851647815261025, 3.17117992735718, 2.67709080859294, -0.930150861728016, 1.17585719528139, -0.343487427451215, 1.33991145588199, 0.918930239273988, 1.38010508577914, 1.28945122292931, -0.065455607974511, 2.6552426764415, 2.63750888770195, 0.749008148851663, -0.127844636693301, 0.958155681939372, -0.944154614445071, 0.0710215710963019, -0.401764310467773, -0.865460826185294, -0.0184753076039441, 2.3899277037351, 0.907444731029447, 0.861376532762667, 2.4604006232517, 2.95818582912113, 0.619097698737209, -0.110836004144444, -0.323162882406991, 0.473686499983562, 1.37097524031067, 1.23182645854664, 1.83777054900764, 1.44070370739898, 1.31361693710181, -0.0137106899245247, 1.8399173900601, 0.0812437106573605, 0.34424511093412, 0.237446739868993, 0.946574602328317, 1.55686402952348, 0.673138543684497, 0.132403127996968, 0.789356383015864, -0.696622019463734, 1.65631812715454, 1.77105895200328, 1.17996076387191, 0.373869402280734, 1.02586355081287, 0.694893062115468, 3.35665857817994, 1.95223086788051, 0.130890281076721, 2.01523883715557, 2.62966939824132, 2.73726960164887, 1.13084464016922, 0.708515621742369, 2.07789990148477, 1.36370803258267, 2.63272560167718, 0.883272356853168, 0.611053859244452, 0.64420148060547, 1.264210420005, -0.0537151911755669, -0.449965354997748, 0.885924663246442, 0.566284955480372, 2.21140638635234, 0.93305588032562, 1.14270520563204, 1.39482892569309, 1.15404250926349, 0.78391613183892, 2.33673913140353, 1.38039127840802, 2.72238567112031, 2.93115786210439, -0.866154402912144, -0.812316368059252, 1.63864879593345, 0.597713575840404, 1.44671608752152, 1.99647052468985, 1.88622662158374, 0.899859571603906, 0.710873362886771, 0.441183190706073, 0.671481416640846, -0.0817108705961334, 0.322575188368267, 0.231564191621544, 3.14406672620753, 1.42291481377734, 1.92046190790218, -0.54809953951236, -1.33960373079946, 0.415128346254614, 1.07813733079041, 1.21011513696181, 0.0691247143161282, -0.254278672794543, 0.50225627448203, 0.685962782349445, 2.72497446167223, 2.39754377596228, 0.410593212203332, 0.341317866799366, 1.19580679192877, 1.6268446613244, 2.46402195242323, 0.571513821838305, 1.83733807723985, -0.319479650862979, 0.766003368330817, 0.306461952369043, 0.230875177783035, 1.2736666384873, 1.93333641621109, 1.83080748042965, 1.20677449603872, 2.22583038747998, 1.71975891005644, 1.85539009020169, 0.237130019626108, 0.142156838274743, 1.46858387111842, 1.71627887560387, -0.0923515385599889, 0.767649774454755, 1.19603256795815, 1.01844421697097, 0.760156729085601, 1.93824700607915, 1.35322813416232, 1.09466562856273, -0.0799817017628586, 0.637771368724645, -0.052353217990607, -0.147804185065258, -0.197415121737115, 1.42754558327861, -0.522921002376816, 2.20941961568005, 2.78294055957259, 0.472966226025793, 0.351779052096493, 1.34474587605048, 1.26859190535215, 1.79551256708872, 2.74107948209215, 1.642726717989, 1.67748231945323, 2.46597650743427, -0.148492406484585, 0.267729233234942, 1.14799802339491, 3.15117044291975, 1.71500570620158, 2.61072144604461, 1.62330464812291, 0.24326661543679, 1.89653061434271, 1.25477377972854, -0.638562031383791, 0.323076526188073, 2.31952878593284, 2.12317362913381, 1.34194256664925, 1.28396417550097, 1.63274147222502, 1.85193603750414, 1.93624715220635, 2.16305511162732, 3.60993486166158, 2.29342358616731, 1.96576969922615, 2.6473893957396, 0.0870145873234263, -0.219903223950104, 0.720768921720583, 1.22943688315488, 1.69224444719971, 2.46979494140074, 1.24554263474835, 1.48073646336263, 0.201056478818837, 0.0870052993966877, 1.46737086460298, -0.0621263034376274, 0.851661850192684, 1.83673370195333, 2.5315240256722 #> 3          S001, S002, S003, S004, S005, S006, S007, S008, S009, S010, S011, S012, S013, S014, S015, S016, S017, S018, S019, S020, S021, S022, S023, S024, S025, S026, S027, S028, S029, S030, S031, S032, S033, S034, S035, S036, S037, S038, S039, S040, S041, S042, S043, S044, S045, S046, S047, S048, S049, S050, S051, S052, S053, S054, S055, S056, S057, S058, S059, S060, S061, S062, S063, S064, S065, S066, S067, S068, S069, S070, S071, S072, S073, S074, S075, S076, S077, S078, S079, S080, S081, S082, S083, S084, S085, S086, S087, S088, S089, S090, S091, S092, S093, S094, S095, S096, S097, S098, S099, S100, S001, S002, S003, S004, S005, S006, S007, S008, S009, S010, S011, S012, S013, S014, S015, S016, S017, S018, S019, S020, S021, S022, S023, S024, S025, S026, S027, S028, S029, S030, S031, S032, S033, S034, S035, S036, S037, S038, S039, S040, S041, S042, S043, S044, S045, S046, S047, S048, S049, S050, S051, S052, S053, S054, S055, S056, S057, S058, S059, S060, S061, S062, S063, S064, S065, S066, S067, S068, S069, S070, S071, S072, S073, S074, S075, S076, S077, S078, S079, S080, S081, S082, S083, S084, S085, S086, S087, S088, S089, S090, S091, S092, S093, S094, S095, S096, S097, S098, S099, S100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1.9737450918103, 1.64320906841127, 0.958676179557793, 0.294754067057176, -0.112546834606141, -0.201173472840118, 1.49795020202022, 1.45795373282259, 0.0385146042864689, 0.287447187570144, 0.380138179924483, 1.63603622022354, 0.748738273851613, 0.174412420674836, 1.94500766667424, 0.156739459323396, 2.07760410858934, 2.3236660616101, 0.0654116822593307, 2.20543010681263, 0.558884611299277, 1.00204635812021, 1.37344218397735, 0.31659323481872, 0.799269775778175, -0.656969665362632, 1.66855447294793, -0.210377597021361, 1.3106759388556, 1.66527539621559, 0.801839268171165, 1.20968016790627, 0.905106373028091, -0.752754443229771, 0.943893012815787, 0.915889636924835, 1.16391721595452, 1.57115168787737, 1.56858534538085, 1.06244886426909, 0.396278003390966, 2.17481515871821, 1.0303292837572, 1.9512571334894, 1.30980025270411, 0.690248942574886, 4.94860054846248, 1.20439258847645, -0.354697073697517, -1.57562689714456, 0.418332710178813, 1.44143583649402, -0.0279331287363278, 1.71913335238061, 0.761008632164523, 0.911907366447158, 0.860476400950227, 1.07332614379804, -0.0707820511345212, 0.967791773527854, 0.372930811416405, -0.861923171304875, 0.127699798404964, 0.513548510247477, 0.343708177492247, -0.069482468898433, 2.101115779921, 0.398077149501514, 0.448135406734009, 0.820790408530792, 0.90407612564314, 1.29041508591675, 1.79209342832725, 1.6747957971092, 2.88851921104752, 1.67127512092513, 1.64366109603636, 0.996146079905438, 2.63919884185081, 0.0593736664465006, 3.17472553605963, 2.93218238306114, 1.1257449602024, 0.515697667081752, 2.42064765757116, 1.76851386693002, 0.686115511981994, 1.21485084395878, -1.67605600564177, 1.73794934274063, 0.225157086889011, 1.72805611336854, -1.41097996813186, 0.166324099135176, 1.06231317742006, 1.02478719546407, 0.941554762018201, 0.886087284972219, 1.68378657046218, 0.534075372070759, 0.0769958145717444, 0.870687019548965, 0.886569709949101, 0.663422318749611, 1.18373933864069, 0.0232502180595517, 2.24546932264582, 0.210001155932983, 0.264462958686605, 0.525044734783659, 1.97635622586246, -0.283312285948857, -0.0466883104342943, 1.42288546102119, 1.47642658830485, 0.133982785502962, 1.21755298503097, 2.67315349148364, 0.371391155097052, 0.716624796288705, 0.310002147447957, 0.0512183426905735, 1.61611037794153, 0.134652439622188, 0.90690160417093, 1.37639459100847, 0.834840850201426, 0.476586219882975, 0.876753394144688, 1.40004121923938, 1.4385504743226, -0.242384830035351, -0.0936999265519012, -0.321207251585891, 2.31684685023459, 1.83037859770428, 0.0103174190381249, 1.01112069132805, 0.253528027050705, 1.07051035614793, 1.3014462028851, 1.53025587981684, 1.64496339460888, 2.19695554982165, 1.44204992420213, 0.681328174173575, 2.68997237989256, 1.2285065120897, 0.695507528045564, -1.05403669535038, 1.7116695010068, 1.55753699721284, 0.931532302627625, 0.892171541726528, 1.09587938231459, 1.19176109090001, 0.698063345659408, 0.796335246675921, 0.528059817407198, 0.993186938215116, 2.06166568699501, 2.28723159296839, 2.11891742177647, 1.90007237252346, 0.649820317671236, 0.931355170985388, 1.16459881336835, 2.84618374008527, 2.19779051507682, -0.71520374558115, 1.21107518490257, 0.691884844901935, 2.27825898961737, 1.16481196373126, 3.93974046754938, 3.26703070843019, 3.12936126376486, 1.87383282035814, 1.82923528839767, -0.211735484159459, 3.79570786692933, 1.63977943370158, 0.731736425377912, 1.72718404539228, 2.54888073310448, 2.36666705532102, 1.68692635016056, 1.08085321085718, 0.571589731702317, 0.320904956811594, -0.123411091029727, 2.8265953050602, -1.15163182879684, 2.63108930653715, 1.28586646202123, 2.63390687209281, 0.216384383454463, 2.65994666732998, 2.30064601518556, 2.11950251627486 #> 4                                  S001, S002, S003, S004, S005, S006, S007, S008, S009, S010, S011, S012, S013, S014, S015, S016, S017, S018, S019, S020, S021, S022, S023, S024, S025, S026, S027, S028, S029, S030, S031, S032, S033, S034, S035, S036, S037, S038, S039, S040, S041, S042, S043, S044, S045, S046, S047, S048, S049, S050, S051, S052, S053, S054, S055, S056, S057, S058, S059, S060, S061, S062, S063, S064, S065, S066, S067, S068, S069, S070, S071, S072, S073, S074, S075, S076, S077, S078, S079, S080, S081, S082, S083, S084, S085, S086, S087, S088, S089, S090, S091, S092, S093, S094, S095, S096, S097, S098, S099, S100, S001, S002, S003, S004, S005, S006, S007, S008, S009, S010, S011, S012, S013, S014, S015, S016, S017, S018, S019, S020, S021, S022, S023, S024, S025, S026, S027, S028, S029, S030, S031, S032, S033, S034, S035, S036, S037, S038, S039, S040, S041, S042, S043, S044, S045, S046, S047, S048, S049, S050, S051, S052, S053, S054, S055, S056, S057, S058, S059, S060, S061, S062, S063, S064, S065, S066, S067, S068, S069, S070, S071, S072, S073, S074, S075, S076, S077, S078, S079, S080, S081, S082, S083, S084, S085, S086, S087, S088, S089, S090, S091, S092, S093, S094, S095, S096, S097, S098, S099, S100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0.390996737022794, 0.514419279322078, 0.465219941640955, 3.11701542636532, 0.544508779491317, 1.26640342605438, 0.709468434016184, 0.484091606530019, 0.340539327010012, 2.12816657988586, 0.526209660745157, 4.11955918681923, 0.586072991553786, 0.445353388305301, 1.2873722573024, 2.42438100691483, 1.46376969611168, 0.244762961808145, 0.992138814536005, 1.60642717441871, 0.538123401841899, 0.0520964369671474, 2.3940425280377, -0.10812510122673, 2.69834325728841, 2.47191522038167, 1.70335072085337, 2.12887526887032, 0.109412156214895, 2.39913712451626, 0.422345527805536, 0.30639868683018, 1.62093820625479, 1.38401069001983, 1.38952311927667, 1.73279772123413, 1.48328138825603, 3.26329836805232, 3.04693384236406, 0.824473231486417, 0.885141996232264, 1.6606545062688, 2.59548844818765, 1.75364937350649, 1.38058410232143, 1.39653311665508, 1.07671098458765, -0.240137130147369, 2.33861232245748, 0.524135561249644, 0.821194691692955, 1.00171076830003, -0.788958644559531, 1.72205053035894, 1.95019581302341, -1.75211040818413, 1.67495167058991, 0.530876972948112, -0.773195598832142, 0.670528408487344, 0.530897768872627, 2.93232396847259, 1.18433869678288, 0.206317111442945, 0.627277699948352, -0.125484460442242, 2.13128060856378, 2.40178193039027, 0.14264046642039, 0.688007299088954, 1.50221960058724, 3.05611986163872, 0.507409391923066, 0.50014671867989, 0.329414866172453, 0.375249435746574, 1.99288730939544, 2.22757555228064, 1.25644770007495, -1.19489410365346, 1.9729220247366, 1.59073470778152, 0.112214778600658, 2.56296082138495, 2.40843012347995, 1.82161350871862, 2.49908459645729, -0.0660931867045258, 0.794847035690629, -0.0279214365944875, 1.49282759605946, 2.51887477996389, 0.303306762375942, 3.08205144041933, 0.965129427962902, 2.20452112879489, 0.675904589942106, 1.01629357199723, 0.0757747164006191, 2.87673218842204, 1.80706953821955, 0.112349601830626, 0.889576594319076, 3.23924763347067, 1.41234686276884, 2.91733964106671, -0.540123510184444, -0.0722300541322409, 0.242944347089705, 1.62368508335076, 1.71282694532638, 2.52503981722833, -0.469895996129148, -0.3399012383782, 0.821157755788413, 1.21211609539506, -0.656061212239198, 0.260009604272351, 0.585975452392078, 2.34563582174388, 0.241786060637767, -0.955628614675378, 0.286133672767774, 0.128647112456209, 2.66439296745249, 2.21504152597742, 1.85192628707628, 0.954779196420469, 0.851312800839909, 1.73615771942524, -0.259875702852075, 0.79563883733003, 1.96980049479768, 2.14284616963924, 0.740454361686355, 1.39041287644043, 2.21889790881344, 1.98804601079687, 1.62167543173107, 1.76704974044433, 0.68066488343528, 0.597515070229046, 2.26728221582283, 1.34308906106656, 1.52427451863171, 2.34570853078019, 1.16521984857001, 0.598396492444016, 2.6518136907934, 0.753180837150408, 1.98132637774831, 1.06056822187545, 0.496894518169738, 0.723168221627451, 2.3862145904786, 0.46598433377952, 2.61939620009976, 2.08246382528877, 1.12884724884493, 1.43479191708313, 0.56514850543195, 1.500884252108, 3.4389201262876, 2.22532226264786, -0.566105049094095, -0.400617203104187, 1.19544869077937, 2.58837268506061, 1.61630764483899, 2.80649984607692, 2.63043262439607, 1.05777389527377, 2.69908701788188, 1.32700894914053, 1.72148809914738, 0.703069282348873, 2.65255437281893, 2.67604032597864, 2.37044918275909, 0.332395475810734, 2.95554256560293, 2.61711303339079, 1.03952339983093, 2.48095970276917, 1.03064469012436, 3.26327110809061, 1.32943769209757, 0.24527908086878, 2.22153278482233, 0.169005762196623, -0.336406939332894, 3.08851131198831, 0.759081882205124, 2.24000933805869, 1.84716178368636, 2.29595154065351, 2.53493545171893, 2.11185580974179, 1.44669225916909, 1.99719258745106 #> 5 S001, S002, S003, S004, S005, S006, S007, S008, S009, S010, S011, S012, S013, S014, S015, S016, S017, S018, S019, S020, S021, S022, S023, S024, S025, S026, S027, S028, S029, S030, S031, S032, S033, S034, S035, S036, S037, S038, S039, S040, S041, S042, S043, S044, S045, S046, S047, S048, S049, S050, S051, S052, S053, S054, S055, S056, S057, S058, S059, S060, S061, S062, S063, S064, S065, S066, S067, S068, S069, S070, S071, S072, S073, S074, S075, S076, S077, S078, S079, S080, S081, S082, S083, S084, S085, S086, S087, S088, S089, S090, S091, S092, S093, S094, S095, S096, S097, S098, S099, S100, S001, S002, S003, S004, S005, S006, S007, S008, S009, S010, S011, S012, S013, S014, S015, S016, S017, S018, S019, S020, S021, S022, S023, S024, S025, S026, S027, S028, S029, S030, S031, S032, S033, S034, S035, S036, S037, S038, S039, S040, S041, S042, S043, S044, S045, S046, S047, S048, S049, S050, S051, S052, S053, S054, S055, S056, S057, S058, S059, S060, S061, S062, S063, S064, S065, S066, S067, S068, S069, S070, S071, S072, S073, S074, S075, S076, S077, S078, S079, S080, S081, S082, S083, S084, S085, S086, S087, S088, S089, S090, S091, S092, S093, S094, S095, S096, S097, S098, S099, S100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0.486725659372221, 1.64357556082774, 0.263194494557383, 1.0296548031938, 0.811726875438496, 0.5976157581421, 1.90602786838901, 1.28057058318111, 1.56624339125893, 0.998155969775003, 0.00170289563711612, 0.509547462735587, -0.00706356580588374, -0.797435868547153, 1.13284344760021, 1.03035461094415, 1.10535438489287, -0.197824348260161, 1.75269621759939, 1.72800465262085, 1.76707520038246, 0.851881340610244, 1.54363125075404, 1.85215533890089, 0.594390665563255, 2.35970532918645, 0.947998324970383, 0.81567240073653, 0.332835046674711, 0.620404809444938, 1.78989750836414, 2.02759270156495, 2.54545630808485, -0.828374732911002, -0.801094510975028, 1.08107571453343, -1.21899807157319, 0.37450302180007, 1.18473667818687, -0.166122980632638, 0.159384167235982, -0.922610427995531, -0.832063998534347, 0.387313458504679, 0.670837122851231, 3.39890689453518, 0.685587046958218, 0.137996866146473, 2.75580651598626, 0.381296723364541, -0.571471926350737, 1.56372990933579, 0.811422647695064, 1.74820580179273, 1.06426592792395, 1.45976091883044, 0.0632732127200647, -0.656127063017977, 1.63700995639338, 2.74432467786927, 0.0881414374420042, 0.861670915448589, -1.48247489988499, 1.43163376124232, 2.14987611850804, 0.226800595386425, 0.901575222264706, 0.859722443799302, 1.00484933846561, 0.413386452147952, 1.50345968290061, -0.0209971611468218, 0.945624780088165, 1.39596168009528, 2.11555398525582, 0.969177721547276, 0.33167730810068, 0.848772768889905, 1.53101851479371, -1.04671261247307, 0.522985902823807, -0.222720595890356, 0.885180815996636, 2.93302537522913, -0.199168974987085, 0.667713043850799, 1.24269930424188, -0.363755940323252, 1.96356421280043, 2.17718086781351, 0.332970913207297, 2.93843475564905, 0.327973766128561, -0.0247523761572936, 0.906337422630317, 3.03178302946813, -0.079281092050191, 2.40821815755792, 1.00828963972639, 1.52366884910225, 0.752723204745463, 2.54143078897211, 1.63348422870709, 1.49668266374234, 1.56191299075821, 1.90084447585914, 1.19130863286561, 1.23380201228986, 1.07177867507661, 0.990674913375293, 1.2029157469686, 0.942211223315491, 1.077593960246, 1.692175031131, 1.63680871096879, 2.23186244841482, 1.51016555011943, 0.298784108846654, 2.39172384433106, 0.926277183435013, 3.60965377132057, 0.357507986215217, 1.19820585650051, -0.0815578789434006, 1.20773770169254, 2.30332999548949, 0.615194661374982, 0.60178399709971, 0.061198013531931, 1.11195739753951, 1.87050391331559, 1.77392005091269, 1.10592976678195, -0.492546742240126, -0.996543170563963, -0.0743749228705897, -1.26406223534939, 0.117735044120884, 2.71285713441115, -0.0316282020028198, 0.410455710338117, 0.173880619460838, 0.714667321650425, 1.03675268218041, -0.231031745450341, 3.14028996613381, -0.175721448321136, 0.930082019065776, 2.64735159540688, 1.18845643623468, -0.630265793191784, 0.935619809552062, 0.460192276556114, 2.8485302708645, 1.87192007126775, 1.59236896995704, 1.364872838976, -0.022774803626495, 1.71767714223523, 1.80575660305377, 2.54316072533052, 1.84593828861636, -1.66331966871552, 1.96958863560675, 2.52384276217459, 1.00190361237165, 1.65407460075167, 1.78667552036777, 1.33320784401231, 0.605333408261912, 3.45962136980245, 0.244187071485811, 2.10622652276742, 2.40770063778364, 2.2704631768497, 0.849843375257935, 0.774647774582052, 1.81455437244012, 1.89079024112148, 0.318784320738019, 1.74159036091936, 0.840666949567401, 1.81279632464054, 3.77251434407046, -0.346018184183341, 1.70069180204209, 0.834905078486252, 0.255960460856275, 1.31640195037946, 1.25880932188798, 1.14145511912438, 1.45723490194377, -0.0818208655607746, 1.13210993968314, 1.76896305566814, 3.48572911798513, 1.41233612186743, 2.82461287595284, 0.766380639932241, 2.04150889429403 # using tidyverse functions analyse <- function(data) {   stats::aov(y ~ B1 * W1 + Error(id/W1), data = data) %>%      broom::tidy() }  df %>%   dplyr::mutate(analysis = lapply(data, analyse)) %>%   dplyr::select(-data) %>%   tidyr::unnest(analysis) #> # A tibble: 25 × 8 #>      rep stratum term         df   sumsq meansq statistic  p.value #>    <int> <chr>   <chr>     <dbl>   <dbl>  <dbl>     <dbl>    <dbl> #>  1     1 id      B1            1  11.9   11.9       8.52   0.00436 #>  2     1 id      Residuals    98 137.     1.40     NA     NA       #>  3     1 id:W1   W1            1   0.550  0.550     1.01   0.316   #>  4     1 id:W1   B1:W1         1   0.464  0.464     0.855  0.357   #>  5     1 id:W1   Residuals    98  53.2    0.542    NA     NA       #>  6     2 id      B1            1  12.4   12.4       8.03   0.00558 #>  7     2 id      Residuals    98 151.     1.54     NA     NA       #>  8     2 id:W1   W1            1   1.39   1.39      3.18   0.0776  #>  9     2 id:W1   B1:W1         1   0.266  0.266     0.611  0.436   #> 10     2 id:W1   Residuals    98  42.8    0.436    NA     NA       #> # ℹ 15 more rows"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"unnested-reps","dir":"Articles","previous_headings":"Multiple datasets","what":"Unnested reps","title":"Simulate by Design","text":"can also get unnested data frame setting nested = FALSE. bit faster return, less useful pattern .","code":"df <- sim_design(within = 2, between = 2,                   n = 2, mu = c(1, 1, 1, 1.5),                   sd = 1, r = 0.5, plot = FALSE,                   long = TRUE, rep = 2, nested = FALSE)  df #>    rep id  B1  W1          y #> 1    1 S1 B1a W1a -0.6145438 #> 2    1 S2 B1a W1a  1.5815508 #> 3    1 S3 B1b W1a -0.9296229 #> 4    1 S4 B1b W1a  0.9573383 #> 5    1 S1 B1a W1b -0.2703416 #> 6    1 S2 B1a W1b  1.4611508 #> 7    1 S3 B1b W1b  2.0628431 #> 8    1 S4 B1b W1b  2.5993118 #> 9    2 S1 B1a W1a  0.7399179 #> 10   2 S2 B1a W1a  1.5328323 #> 11   2 S3 B1b W1a  0.2531167 #> 12   2 S4 B1b W1a  2.1176671 #> 13   2 S1 B1a W1b -0.3890839 #> 14   2 S2 B1a W1b  1.6844656 #> 15   2 S3 B1b W1b  1.9668646 #> 16   2 S4 B1b W1b  2.5087846"},{"path":"https://debruine.github.io/faux/dev/articles/sim_design.html","id":"simulate-by-design","dir":"Articles","previous_headings":"Multiple datasets","what":"Simulate by design","title":"Simulate by Design","text":"check_design() function converts abbreviated design specification fully expanded version; checks design specification run sim_design() can run create validated design list. [DV] y: value [ID] id: id day: day night: night cat: cat dog: dog Parameters: |pet |time | day| night| n| mu| sd| |:—|:—–|—:|—–:|–:|–:|–:| |cat |day | 1.0| 0.5| 10| 1| 1| |cat |night | 0.5| 1.0| 10| 2| 2| |dog |day | 1.0| 0.5| 10| 3| 3| |dog |night | 0.5| 1.0| 10| 4| 4| can use design object create simulated datasets. set design sim_design() design argument instead specifying parameters, skip time-consuming checks, can speed simulations 30% .","code":"between <- list(pet = c(\"cat\", \"dog\")) within <- list(time = c(\"day\", \"night\")) vardesc <- c(pet = \"Type of Pet\",              time = \"Time of Day\") design <- check_design(within, between, n = 10,                         mu = 1:4, sd = 1:4, r = 0.5,                         vardesc = vardesc, plot = FALSE)  design data <- sim_design(design = design)"},{"path":"https://debruine.github.io/faux/dev/articles/sim_df.html","id":"between-subject-variables","dir":"Articles","previous_headings":"","what":"Between-subject variables","title":"Simulate from Existing Data","text":"can also optionally add -subject variables. example, relationship horsepower (hp) weight (wt) automatic (= 0) versus manual (= 1) transmission built-dataset mtcars. Original mtcars dataset new sample 50 observations . Simulated iris dataset","code":"mtcars %>%   mutate(transmission = factor(am, labels = c(\"automatic\", \"manual\"))) %>%   ggplot(aes(hp, wt, color = transmission)) +   geom_point() +   geom_smooth(method = \"lm\", formula = \"y~x\") sim_df(mtcars, 50 , between = \"am\") %>%   mutate(transmission = factor(am, labels = c(\"automatic\", \"manual\"))) %>%   ggplot(aes(hp, wt, color = transmission)) +   geom_point() +   geom_smooth(method = \"lm\", formula = \"y~x\")"},{"path":"https://debruine.github.io/faux/dev/articles/sim_df.html","id":"empirical","dir":"Articles","previous_headings":"","what":"Empirical","title":"Simulate from Existing Data","text":"Set empirical = TRUE return data frame exactly means, SDs, correlations original dataset.","code":"exact_mtcars <- sim_df(mtcars, 50, between = \"am\", empirical = TRUE)"},{"path":"https://debruine.github.io/faux/dev/articles/sim_df.html","id":"rounding","dir":"Articles","previous_headings":"","what":"Rounding","title":"Simulate from Existing Data","text":"now, function creates new variables sampled continuous normal distribution. hope add sampling distributions future. ’d need rounding truncating . Simulated iris dataset (rounded)","code":"sim_df(mtcars, 50, between = \"am\") %>%   mutate(hp = round(hp),          transmission = factor(am, labels = c(\"automatic\", \"manual\"))) %>%   ggplot(aes(hp, wt, color = transmission)) +   geom_point() +   geom_smooth(method = \"lm\", formula = \"y~x\")"},{"path":"https://debruine.github.io/faux/dev/articles/sim_df.html","id":"missing-data","dir":"Articles","previous_headings":"","what":"Missing data","title":"Simulate from Existing Data","text":"faux 0.0.1.8, want simulate missing data, set missing = TRUE sim_df simulate missing data joint probabilities data. dataset , condition B1a, 30% W1a values missing 60% W1b values missing. correlated 100% chance W1b missing W1a . missing data condition B1b. simulated data pattern missingness (sampled joint distribution, won’t exact).","code":"data <- sim_design(2, 2, n = 10, plot = FALSE) data$W1a[1:3] <- NA data$W1b[1:6] <- NA data #>     id  B1         W1a         W1b #> 1  S01 B1a          NA          NA #> 2  S02 B1a          NA          NA #> 3  S03 B1a          NA          NA #> 4  S04 B1a -0.87577954          NA #> 5  S05 B1a  0.27931928          NA #> 6  S06 B1a  0.46277729          NA #> 7  S07 B1a -0.11678369 -0.66795544 #> 8  S08 B1a  1.34454748  2.30398889 #> 9  S09 B1a -1.26771349  0.55738252 #> 10 S10 B1a -0.71258675  0.09183975 #> 11 S11 B1b -0.39607245  0.85023624 #> 12 S12 B1b -1.15357665 -0.18013489 #> 13 S13 B1b -0.21533313  1.08873598 #> 14 S14 B1b -0.42370435  0.94812875 #> 15 S15 B1b -0.05717782  0.63667947 #> 16 S16 B1b -0.12733224 -1.47331528 #> 17 S17 B1b  0.21208884  0.69005635 #> 18 S18 B1b -0.20401676 -1.01059002 #> 19 S19 B1b -1.14885697 -0.50127757 #> 20 S20 B1b  0.87586766  1.47606428 simdat <- sim_df(data, between = \"B1\", n = 1000,                   missing = TRUE)"},{"path":"https://debruine.github.io/faux/dev/articles/sim_mixed.html","id":"building-multilevel-designs","dir":"Articles","previous_headings":"","what":"Building multilevel designs","title":"Mixed Design Simulation","text":"can build mixed effects model adding random factors stepwise fashion using add_random(). example simulates 3 schools 2, 3 4 classes nested school. cross-classified design 2 subjects 3 items. can also name items directly don’t like default names. Crossed factors can named vector names, nested factors need list one vector names nesting level.","code":"data <- add_random(school = 3) %>%   add_random(class = c(2, 3, 4), .nested_in = \"school\") data <- add_random(subj = 2, item = 3) data <- add_random(school = c(\"Hyndland Primary\", \"Hyndland Secondary\")) %>%   add_random(class = list(paste0(\"P\", 1:2),                           paste0(\"S\", 1:2)),              .nested_in = \"school\")"},{"path":"https://debruine.github.io/faux/dev/articles/sim_mixed.html","id":"adding-fixed-factors","dir":"Articles","previous_headings":"","what":"Adding fixed factors","title":"Mixed Design Simulation","text":"Add within factors add_within(). Add factors add_between(). one factor, crossed. set .shuffle = TRUE, factors added randomly (“order”), separately added factors may end confounded. simulates true random allocation.","code":"data <- add_random(subj = 2) %>%   add_within(\"subj\", time = c(\"pre\", \"post\"),              condition = c(\"control\", \"test\")) data <- add_random(subj = 4, item = 2) %>%   add_between(\"subj\", cond = c(\"control\", \"test\"), gen = c(\"X\", \"Z\")) %>%   add_between(\"item\", version = c(\"A\", \"B\")) %>%   add_between(c(\"subj\", \"item\"), shuffled = 1:4, .shuffle = TRUE) %>%   add_between(c(\"subj\", \"item\"), not_shuffled = 1:4, .shuffle = FALSE)"},{"path":"https://debruine.github.io/faux/dev/articles/sim_mixed.html","id":"unequal-cells","dir":"Articles","previous_headings":"Adding fixed factors","what":"Unequal cells","title":"Mixed Design Simulation","text":"levels factor don’t equal probability, set probability .prob. sum values equals number groups, always get exact numbers (e.g., always 8 control 2 test; set shuffle = TRUE get random order). Otherwise, values sampled exact proportions change simulation. one -subject factor, setting together allows set joint proportions cell.","code":"data <- add_random(subj = 10) %>%   add_between(\"subj\", cond = c(\"control\", \"test\"), .prob = c(8, 2)) %>%   add_between(\"subj\", age = c(\"young\", \"old\"), .prob = c(.8, .2)) data <- add_random(subj = 10) %>%   add_between(\"subj\",                cond = c(\"control\", \"test\"),               age = c(\"young\", \"old\"),                .prob = c(2, 3, 4, 1))"},{"path":"https://debruine.github.io/faux/dev/articles/sim_mixed.html","id":"counterbalanced-designs","dir":"Articles","previous_headings":"Adding fixed factors","what":"Counterbalanced designs","title":"Mixed Design Simulation","text":"can use filter() function dplyr create counterbalanced designs. example, items grouped B counterbalanced groups, add -subjects -items factor levels filter rows subject value matches item value. example , odd-numbered subjects respond odd-numbered items.","code":"data <- add_random(subj = 4, item = 4) %>%   add_between(\"subj\", subj_cb = c(\"odd\", \"even\")) %>%   add_between(\"item\", item_cb = c(\"odd\", \"even\")) %>%   dplyr::filter(subj_cb == item_cb)"},{"path":"https://debruine.github.io/faux/dev/articles/sim_mixed.html","id":"recoding","dir":"Articles","previous_headings":"Adding fixed factors","what":"Recoding","title":"Mixed Design Simulation","text":"set data analysis, often need recode categorical variables. Use helper function add_contrast() . code creates anova-coded treatment-coded versions “cond” two variables needed treatment-code 3-level variable “type”. See contrasts vignette details. can add_recode() setting manual contrast isn’t available add_contrast(), weighted contrasts.","code":"data <- add_random(subj = 2, item = 3) %>%   add_between(\"subj\", cond = c(\"A\", \"B\")) %>%   add_between(\"item\", type = c(\"X\", \"Y\", \"Z\")) %>%   # add contrasts   add_contrast(\"cond\", \"anova\", add_cols = TRUE) %>%   add_contrast(\"cond\", \"treatment\", add_cols = TRUE) %>%   # you can change the default column names   add_contrast(\"type\", \"treatment\", add_cols = TRUE, colnames = c(\"Y\", \"Z\")) %>%   add_recode(\"type\", \"type.w\", X = -1.3, Y = 0, Z = 0.92)"},{"path":"https://debruine.github.io/faux/dev/articles/sim_mixed.html","id":"adding-random-effects","dir":"Articles","previous_headings":"","what":"Adding random effects","title":"Mixed Design Simulation","text":"simulate multilevel data, need add random intercepts slopes random factor (combination random factors). randomly sampled time simulate new sample, can characterise standard deviation. can use function add_ranef() add random effects specified SDs. add one random effect group (e.g., random intercept random slope), can specify correlation .cors (can specify correlations way rnorm_multi()). code sets simple cross-classified design 2 subjects crossed 2 items. adds -subject, within-item factor “version”. adds random effects subject, item, interaction, well error term (sigma).","code":"data <- add_random(subj = 4, item = 2) %>%   add_between(\"subj\", version = 1:2) %>%   # add by-subject random intercept   add_ranef(\"subj\", u0s = 1.3) %>%   # add by-item random intercept and slope   add_ranef(\"item\", u0i = 1.5, u1i = 1.5, .cors = 0.3) %>%   # add by-subject:item random intercept   add_ranef(c(\"subj\", \"item\"), u0si = 1.7) %>%   # add error term (by observation)   add_ranef(sigma = 2.2)"},{"path":"https://debruine.github.io/faux/dev/articles/sim_mixed.html","id":"simulating-data","dir":"Articles","previous_headings":"","what":"Simulating data","title":"Mixed Design Simulation","text":"Now can define data-generating parameters put everything together simulate dataset. example,subject crossed items, single treatment-coded -subject, within-item fixed factor condition levels “control” “test”. intercept effect condition set 0. SDs random intercepts slopes set 1 (need pilot data estimate realistic values design), correlation random intercept slope items set 0. SD error term set 2.","code":"# define parameters subj_n = 10  # number of subjects item_n = 10  # number of items b0 = 0       # intercept b1 = 0       # fixed effect of condition u0s_sd = 1   # random intercept SD for subjects u0i_sd = 1   # random intercept SD for items u1i_sd = 1   # random b1 slope SD for items r01i = 0     # correlation between random effects 0 and 1 for items sigma_sd = 2 # error SD    # set up data structure data <- add_random(subj = subj_n, item = item_n) %>%   # add and recode categorical variables   add_between(\"subj\", cond = c(\"control\", \"test\")) %>%   add_recode(\"cond\", \"cond.t\", control = 0, test = 1) %>%   # add random effects    add_ranef(\"subj\", u0s = u0s_sd) %>%   add_ranef(\"item\", u0i = u0i_sd, u1i = u1i_sd, .cors = r01i) %>%   add_ranef(sigma = sigma_sd) %>%   # calculate DV   mutate(dv = b0 + u0s + u0i + (b1 + u1i) * cond.t + sigma)"},{"path":"https://debruine.github.io/faux/dev/articles/sim_mixed.html","id":"analysing-your-multilevel-data","dir":"Articles","previous_headings":"","what":"Analysing your multilevel data","title":"Mixed Design Simulation","text":"can analyse data lme4::lmer().","code":"m <- lmer(dv ~ cond.t + (1 | subj) + (1 + cond.t | item), data = data)  summary(m) #> Linear mixed model fit by REML. t-tests use Satterthwaite's method [ #> lmerModLmerTest] #> Formula: dv ~ cond.t + (1 | subj) + (1 + cond.t | item) #>    Data: data #>  #> REML criterion at convergence: 421 #>  #> Scaled residuals:  #>      Min       1Q   Median       3Q      Max  #> -1.94554 -0.66137  0.03661  0.66655  2.39501  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. Corr  #>  subj     (Intercept) 0.3239   0.5691         #>  item     (Intercept) 0.7649   0.8746         #>           cond.t      1.1253   1.0608   -0.66 #>  Residual             3.2817   1.8115         #> Number of obs: 100, groups:  subj, 10; item, 10 #>  #> Fixed effects: #>             Estimate Std. Error       df t value Pr(>|t|) #> (Intercept) -0.05392    0.45486  9.66296  -0.119    0.908 #> cond.t      -0.58770    0.61102  9.08258  -0.962    0.361 #>  #> Correlation of Fixed Effects: #>        (Intr) #> cond.t -0.690"},{"path":"https://debruine.github.io/faux/dev/articles/sim_mixed.html","id":"power-simulation","dir":"Articles","previous_headings":"","what":"Power simulation","title":"Mixed Design Simulation","text":"Include code function can easily change Ns, fixed effects, random effects values. run mixed effects model data return model. Check function. , ’re simulating fixed effect condition (b1) 0.5 50 subjects 40 items, correlation random intercept slope items 0.2, default values parameters set . Run simulation repeatedly. ’m running 50 times per parameter combination demo doesn’t take forever run, done testing range parameters, probably want run final simulation 100-1000 times. might get warnings like “Model failed converge” “singular boundary”. don’t need worry much get . models warnings, simulation parameters likely . Filter /group resulting table calculate proportion p.values alpha threshold get power fixed effects.","code":"sim <- function(subj_n = 10, item_n = 10,                 b0 = 0, b1 = 0,         # fixed effects                  u0s_sd = 1, u0i_sd = 1, # random intercepts                 u1i_sd = 1, r01i = 0,   # random slope and cor                 sigma_sd = 2,           # error term                 ... # helps the function work with pmap() below                 ) {    # set up data structure   data <- add_random(subj = subj_n, item = item_n) %>%     # add and recode categorical variables     add_between(\"subj\", cond = c(\"control\", \"test\")) %>%     add_recode(\"cond\", \"cond.t\", control = 0, test = 1) %>%     # add random effects      add_ranef(\"subj\", u0s = u0s_sd) %>%     add_ranef(\"item\", u0i = u0i_sd, u1i = u1i_sd, .cors = r01i) %>%     add_ranef(sigma = sigma_sd) %>%     # calculate DV     mutate(dv = b0 + u0s + u0i + (b1 + u1i) * cond.t + sigma)    # run mixed effect model and return relevant values   m <- lmer(dv ~ cond.t + (1 | subj) + (1 + cond.t | item), data = data)    broom.mixed::tidy(m) } sim(subj_n = 50, item_n = 40, b1 = 0.5, r01i = 0.2) #> # A tibble: 7 × 8 #>   effect   group    term              estimate std.error statistic    df p.value #>   <chr>    <chr>    <chr>                <dbl>     <dbl>     <dbl> <dbl>   <dbl> #> 1 fixed    NA       (Intercept)        -0.0715     0.286    -0.250  71.4   0.803 #> 2 fixed    NA       cond.t              0.499      0.395     1.27   68.1   0.210 #> 3 ran_pars subj     sd__(Intercept)     1.19      NA        NA      NA    NA     #> 4 ran_pars item     sd__(Intercept)     0.913     NA        NA      NA    NA     #> 5 ran_pars item     cor__(Intercept)…   0.256     NA        NA      NA    NA     #> 6 ran_pars item     sd__cond.t          1.16      NA        NA      NA    NA     #> 7 ran_pars Residual sd__Observation     2.08      NA        NA      NA    NA x <- crossing(   rep = 1:50, # number of replicates   subj_n = c(50, 100), # range of subject N   item_n = 25, # fixed item N   b1 = c(0.25, 0.5, 0.75), # range of effects   r01i = 0.2 # fixed correlation ) %>%   mutate(analysis = pmap(., sim)) %>%   unnest(analysis) # calculate power for alpha = 0.05 filter(x, effect == \"fixed\", term == \"cond.t\") %>%   group_by(b1, subj_n) %>%    summarise(power = mean(p.value < .05),              .groups = \"drop\") %>%   ggplot(aes(b1, subj_n, fill = power)) +   geom_tile() +   geom_text(aes(label = sprintf(\"%.2f\", power)), color = \"white\", size = 10) +   scale_fill_viridis_c(limits = c(0, 1))"},{"path":"https://debruine.github.io/faux/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lisa DeBruine. Author, maintainer. Anna Krystalli. Contributor. Andrew Heiss. Contributor.","code":""},{"path":"https://debruine.github.io/faux/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lisa DeBruine, (2023). faux: Simulation Factorial Designs R package version 1.2.1.9000. Zenodo. http://doi.org/10.5281/zenodo.2669586","code":"@Manual{,   title = {faux: Simulation for Factorial Designs},   author = {Lisa DeBruine},   doi = {10.5281/zenodo.2669586},   publisher = {Zenodo},   year = {2023},   note = {R package version 1.2.1.9000},   url = {https://debruine.github.io/faux/}, }"},{"path":"https://debruine.github.io/faux/dev/index.html","id":"faux-","dir":"","previous_headings":"","what":"Simulation for Factorial Designs","title":"Simulation for Factorial Designs","text":"useful able simulate data specified structure. faux package provides functions make process easier. See vignettes details.","code":""},{"path":"https://debruine.github.io/faux/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulation for Factorial Designs","text":"can install released version faux CRAN : development version GitHub :","code":"install.packages(\"faux\") # install.packages(\"devtools\") devtools::install_github(\"debruine/faux\")"},{"path":[]},{"path":"https://debruine.github.io/faux/dev/index.html","id":"simulate-data-for-a-factorial-design","dir":"","previous_headings":"Quick overview","what":"Simulate data for a factorial design","title":"Simulation for Factorial Designs","text":"See Simulate Design vignette details. Default design plot Plot data different visualisations.","code":"between <- list(pet = c(cat = \"Cat Owners\",                          dog = \"Dog Owners\")) within <- list(time = c(\"morning\",                          \"noon\",                          \"evening\",                          \"night\")) mu <- data.frame(   cat    = c(10, 12, 14, 16),   dog    = c(10, 15, 20, 25),   row.names = within$time ) df <- sim_design(within, between,                   n = 100, mu = mu,                   sd = 5, r = .5) p1 <- plot_design(df) p2 <- plot_design(df, \"pet\", \"time\")  cowplot::plot_grid(p1, p2, nrow = 2, align = \"v\")"},{"path":"https://debruine.github.io/faux/dev/index.html","id":"simulate-new-data-from-an-existing-data-table","dir":"","previous_headings":"Quick overview","what":"Simulate new data from an existing data table","title":"Simulation for Factorial Designs","text":"See Simulate Existing Data vignette details. Simulated iris dataset","code":"new_iris <- sim_df(iris, 50, between = \"Species\")"},{"path":"https://debruine.github.io/faux/dev/index.html","id":"simulate-data-for-a-mixed-design","dir":"","previous_headings":"Quick overview","what":"Simulate data for a mixed design","title":"Simulation for Factorial Designs","text":"can build cross-classified nested mixed effects design using piped functions. See contrasts vignette details.","code":"# simulate 20 classes with 20 to 30 students per class data <- add_random(class = 20) %>%   add_random(student = sample(20:30, 20, replace = TRUE),               .nested_in = \"class\") %>%   add_between(.by = \"class\",                school_type = c(\"private\",\"public\"),                .prob = c(5, 15)) %>%   add_between(.by = \"student\",               gender = c(\"M\", \"F\", \"NB\"),               .prob = c(.49, .49, .02))"},{"path":"https://debruine.github.io/faux/dev/index.html","id":"other-simulation-packages","dir":"","previous_headings":"","what":"Other simulation packages","title":"Simulation for Factorial Designs","text":"started project collection functions writing help work. ’s one many, many simulation packages R; others. haven’t used , can’t vouch , faux doesn’t meet needs, one might. SimDesign: generate, analyse summarise data models probability density functions simstudy: Simulation Study Data simr: Power Analysis Generalised Linear Mixed Models Simulation simulator: streamlines process performing simulations creating common infrastructure can easily used reused across projects lsasim: Simulate large scale assessment data simmer: Trajectory-based Discrete-Event Simulation (DES parSim: Parallel Simulation Studies","code":""},{"path":"https://debruine.github.io/faux/dev/reference/OR.html","id":null,"dir":"Reference","previous_headings":"","what":"Piped OR — OR","title":"Piped OR — OR","text":"LHS NULL, otherwise RHS","code":""},{"path":"https://debruine.github.io/faux/dev/reference/OR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Piped OR — OR","text":"","code":"l %||% r"},{"path":"https://debruine.github.io/faux/dev/reference/OR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Piped OR — OR","text":"l LHS. r RHS.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/OR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Piped OR — OR","text":"LHS NULL, otherwise RHS.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Add between factors — add_between","title":"Add between factors — add_between","text":"Add factors","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add between factors — add_between","text":"","code":"add_between(.data, .by = NULL, ..., .shuffle = FALSE, .prob = NULL)"},{"path":"https://debruine.github.io/faux/dev/reference/add_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add between factors — add_between","text":".data data frame .grouping column (groups row NULL) ... names levels new factors .shuffle whether assign cells randomly \"order\" .prob probability level, equal NULL","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add between factors — add_between","text":"data frame","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add between factors — add_between","text":"","code":"add_random(subj = 4, item = 2) %>%   add_between(\"subj\", condition = c(\"cntl\", \"test\")) %>%   add_between(\"item\", version = c(\"A\", \"B\")) #> # A tibble: 8 × 4 #>   subj  item  condition version #>   <chr> <chr> <fct>     <fct>   #> 1 subj1 item1 cntl      A       #> 2 subj1 item2 cntl      B       #> 3 subj2 item1 test      A       #> 4 subj2 item2 test      B       #> 5 subj3 item1 cntl      A       #> 6 subj3 item2 cntl      B       #> 7 subj4 item1 test      A       #> 8 subj4 item2 test      B"},{"path":"https://debruine.github.io/faux/dev/reference/add_contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a contrast to a data frame — add_contrast","title":"Add a contrast to a data frame — add_contrast","text":"Add contrast data frame","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a contrast to a data frame — add_contrast","text":"","code":"add_contrast(   data,   col,   contrast = c(\"anova\", \"sum\", \"treatment\", \"helmert\", \"poly\", \"difference\"),   levels = NULL,   ...,   add_cols = TRUE,   colnames = NULL )"},{"path":"https://debruine.github.io/faux/dev/reference/add_contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a contrast to a data frame — add_contrast","text":"data data frame col column recode contrast contrast recode levels levels factor order ... arguments pass contrast function (base omit) add_cols whether just add contrast existing column also create new explicit columns dataset (default) colnames optional list column names added contrasts","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a contrast to a data frame — add_contrast","text":"data frame recoded column added columns (add_cols == TRUE)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a contrast to a data frame — add_contrast","text":"","code":"df <- sim_design(between = list(time = 1:6), plot = FALSE) %>%    add_contrast(\"time\", \"poly\")  # test all polynomial contrasts lm(y ~ time, df) %>% broom::tidy() #> # A tibble: 6 × 5 #>   term        estimate std.error statistic p.value #>   <chr>          <dbl>     <dbl>     <dbl>   <dbl> #> 1 (Intercept)  0.0641     0.0407    1.57    0.116  #> 2 time^1       0.150      0.0998    1.51    0.132  #> 3 time^2       0.165      0.0998    1.65    0.0997 #> 4 time^3      -0.0173     0.0998   -0.174   0.862  #> 5 time^4       0.0507     0.0998    0.508   0.611  #> 6 time^5       0.00460    0.0998    0.0461  0.963   # test only the linear and quadratic contrasts lm(y ~ `time^1` + `time^2`, df) %>% broom::tidy() #> # A tibble: 3 × 5 #>   term        estimate std.error statistic p.value #>   <chr>          <dbl>     <dbl>     <dbl>   <dbl> #> 1 (Intercept)   0.0641    0.0406      1.58  0.115  #> 2 `time^1`      0.150     0.0996      1.51  0.131  #> 3 `time^2`      0.165     0.0996      1.65  0.0989"},{"path":"https://debruine.github.io/faux/dev/reference/add_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Add random factors to a data structure — add_random","title":"Add random factors to a data structure — add_random","text":"Add random factors data structure","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add random factors to a data structure — add_random","text":"","code":"add_random(.data = NULL, ..., .nested_in = NULL)"},{"path":"https://debruine.github.io/faux/dev/reference/add_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add random factors to a data structure — add_random","text":".data data frame ... new random factor column name number values random factor (crossed) n per group (nested); can vector n per group nested .nested_in column(s) nest (NULL, factor crossed columns)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add random factors to a data structure — add_random","text":"data frame","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add random factors to a data structure — add_random","text":"","code":"# start a data frame data1 <- add_random(school = 3) # nest classes in schools (2 classes per school) data2 <- add_random(data1, class = 2, .nested_in = \"school\") # nest pupils in each class (different n per class) data3 <- add_random(data2, pupil = c(20, 24, 23, 21, 25, 24), .nested_in = \"class\") # cross each pupil with 10 questions data4 <- add_random(data3, question = 10)  # compare nesting in 2 different factors data <- add_random(A = 2, B = 2) add_random(data, C = 2, .nested_in = \"A\") #> # A tibble: 8 × 3 #>   A     B     C     #>   <chr> <chr> <chr> #> 1 A1    B1    C1    #> 2 A1    B1    C2    #> 3 A1    B2    C1    #> 4 A1    B2    C2    #> 5 A2    B1    C3    #> 6 A2    B1    C4    #> 7 A2    B2    C3    #> 8 A2    B2    C4    add_random(data, C = 2, .nested_in = \"B\") #> # A tibble: 8 × 3 #>   A     B     C     #>   <chr> <chr> <chr> #> 1 A1    B1    C1    #> 2 A1    B1    C2    #> 3 A1    B2    C3    #> 4 A1    B2    C4    #> 5 A2    B1    C1    #> 6 A2    B1    C2    #> 7 A2    B2    C3    #> 8 A2    B2    C4     # specify item names add_random(school = c(\"Hyndland Primary\", \"Hyndland Secondary\")) %>%   add_random(class = list(paste0(\"P\", 1:7),                           paste0(\"S\", 1:6)),              .nested_in = \"school\") #> # A tibble: 13 × 2 #>    school             class #>    <chr>              <chr> #>  1 Hyndland Primary   P1    #>  2 Hyndland Primary   P2    #>  3 Hyndland Primary   P3    #>  4 Hyndland Primary   P4    #>  5 Hyndland Primary   P5    #>  6 Hyndland Primary   P6    #>  7 Hyndland Primary   P7    #>  8 Hyndland Secondary S1    #>  9 Hyndland Secondary S2    #> 10 Hyndland Secondary S3    #> 11 Hyndland Secondary S4    #> 12 Hyndland Secondary S5    #> 13 Hyndland Secondary S6"},{"path":"https://debruine.github.io/faux/dev/reference/add_ranef.html","id":null,"dir":"Reference","previous_headings":"","what":"Add random effects to a data frame — add_ranef","title":"Add random effects to a data frame — add_ranef","text":"Add random effects data frame","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_ranef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add random effects to a data frame — add_ranef","text":"","code":"add_ranef(.data, .by = NULL, ..., .cors = 0, .empirical = FALSE)"},{"path":"https://debruine.github.io/faux/dev/reference/add_ranef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add random effects to a data frame — add_ranef","text":".data data frame .grouping column (groups row NULL) ... name standard deviation random effect .cors correlations among multiple random effects, passed rnorm_multi r .empirical logical. passed rnorm_multi empirical","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_ranef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add random effects to a data frame — add_ranef","text":"data frame new random effects columns","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_ranef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add random effects to a data frame — add_ranef","text":"","code":"add_random(rater = 2, stimulus = 2, time = 2) %>%   add_ranef(\"rater\", u0r = 1.5) %>%   add_ranef(\"stimulus\", u0s = 2.2, u1s = 0.75, .cors = 0.5) %>%   add_ranef(c(\"rater\", \"stimulus\"), u0sr = 1.2) #> # A tibble: 8 × 7 #>   rater  stimulus  time     u0r   u0s   u1s   u0sr #>   <chr>  <chr>     <chr>  <dbl> <dbl> <dbl>  <dbl> #> 1 rater1 stimulus1 time1 0.0160  6.82 0.952 -1.16  #> 2 rater1 stimulus1 time2 0.0160  6.82 0.952 -1.16  #> 3 rater1 stimulus2 time1 0.0160  3.30 0.653 -0.965 #> 4 rater1 stimulus2 time2 0.0160  3.30 0.653 -0.965 #> 5 rater2 stimulus1 time1 3.60    6.82 0.952 -0.413 #> 6 rater2 stimulus1 time2 3.60    6.82 0.952 -0.413 #> 7 rater2 stimulus2 time1 3.60    3.30 0.653  1.70  #> 8 rater2 stimulus2 time2 3.60    3.30 0.653  1.70"},{"path":"https://debruine.github.io/faux/dev/reference/add_recode.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode a categorical column — add_recode","title":"Recode a categorical column — add_recode","text":"Recode categorical column","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode a categorical column — add_recode","text":"","code":"add_recode(.data, .col, .newcol = paste0(col, \".c\"), ...)"},{"path":"https://debruine.github.io/faux/dev/reference/add_recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode a categorical column — add_recode","text":".data data frame .col column recode .newcol name recoded column (defaults col.c) ... coding categorical column","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_recode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode a categorical column — add_recode","text":"data frame new fixed effects columns","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode a categorical column — add_recode","text":"","code":"add_random(subj = 4, item = 4) %>%   add_between(\"subj\", cond = c(\"cntl\", \"test\")) %>%   add_recode(\"cond\", \"cond.t\", cntl = 0, test = 1) #> # A tibble: 16 × 4 #>    subj  item  cond  cond.t #>    <chr> <chr> <fct>  <dbl> #>  1 subj1 item1 cntl       0 #>  2 subj1 item2 cntl       0 #>  3 subj1 item3 cntl       0 #>  4 subj1 item4 cntl       0 #>  5 subj2 item1 test       1 #>  6 subj2 item2 test       1 #>  7 subj2 item3 test       1 #>  8 subj2 item4 test       1 #>  9 subj3 item1 cntl       0 #> 10 subj3 item2 cntl       0 #> 11 subj3 item3 cntl       0 #> 12 subj3 item4 cntl       0 #> 13 subj4 item1 test       1 #> 14 subj4 item2 test       1 #> 15 subj4 item3 test       1 #> 16 subj4 item4 test       1"},{"path":"https://debruine.github.io/faux/dev/reference/add_within.html","id":null,"dir":"Reference","previous_headings":"","what":"Add within factors — add_within","title":"Add within factors — add_within","text":"Add within factors","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_within.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add within factors — add_within","text":"","code":"add_within(.data, .by = NULL, ...)"},{"path":"https://debruine.github.io/faux/dev/reference/add_within.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add within factors — add_within","text":".data data frame .grouping column (groups row NULL) ... names levels new factors","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_within.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add within factors — add_within","text":"data frame","code":""},{"path":"https://debruine.github.io/faux/dev/reference/add_within.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add within factors — add_within","text":"","code":"add_random(subj = 2, item =  2) %>%   add_within(\"subj\", time = c(\"pre\", \"post\")) #> # A tibble: 8 × 3 #>   subj  item  time  #>   <chr> <chr> <fct> #> 1 subj1 item1 pre   #> 2 subj1 item1 post  #> 3 subj1 item2 pre   #> 4 subj1 item2 post  #> 5 subj2 item1 pre   #> 6 subj2 item1 post  #> 7 subj2 item2 pre   #> 8 subj2 item2 post"},{"path":"https://debruine.github.io/faux/dev/reference/average_r2tau_0.html","id":null,"dir":"Reference","previous_headings":"","what":"Average r to Random Intercept SD — average_r2tau_0","title":"Average r to Random Intercept SD — average_r2tau_0","text":"Average r Random Intercept SD","code":""},{"path":"https://debruine.github.io/faux/dev/reference/average_r2tau_0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average r to Random Intercept SD — average_r2tau_0","text":"","code":"average_r2tau_0(average_r, sigma)"},{"path":"https://debruine.github.io/faux/dev/reference/average_r2tau_0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average r to Random Intercept SD — average_r2tau_0","text":"average_r average inter-item correlation sigma Total error variance","code":""},{"path":"https://debruine.github.io/faux/dev/reference/average_r2tau_0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average r to Random Intercept SD — average_r2tau_0","text":"standard deviation random intercept","code":""},{"path":"https://debruine.github.io/faux/dev/reference/beta2norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert beta to normal — beta2norm","title":"Convert beta to normal — beta2norm","text":"Convert beta normal","code":""},{"path":"https://debruine.github.io/faux/dev/reference/beta2norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert beta to normal — beta2norm","text":"","code":"beta2norm(x, mu = 0, sd = 1, shape1 = NULL, shape2 = NULL, ...)"},{"path":"https://debruine.github.io/faux/dev/reference/beta2norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert beta to normal — beta2norm","text":"x gamma distributed vector mu mean normal distribution convert sd SD normal distribution convert shape1, shape2 non-negative parameters beta distribution ... arguments pass pbeta (e.g., ncp)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/beta2norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert beta to normal — beta2norm","text":"vector normal distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/beta2norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert beta to normal — beta2norm","text":"","code":"x <- rbeta(10000, 2, 3) y <- beta2norm(x) #> shape1 was set to 1.99946638606174 #> shape2 was set to 3.02496939802887 g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")"},{"path":"https://debruine.github.io/faux/dev/reference/binom2norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert binomial to normal — binom2norm","title":"Convert binomial to normal — binom2norm","text":"Convert binomial distribution normal (gaussian) distribution specified mu sd","code":""},{"path":"https://debruine.github.io/faux/dev/reference/binom2norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert binomial to normal — binom2norm","text":"","code":"binom2norm(x, mu = 0, sd = 1, size = NULL, prob = NULL)"},{"path":"https://debruine.github.io/faux/dev/reference/binom2norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert binomial to normal — binom2norm","text":"x binomially distributed vector mu mean normal distribution return sd SD normal distribution return size number trials (set max value x specified) prob probability success trial (set mean probability specified)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/binom2norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert binomial to normal — binom2norm","text":"vector gaussian distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/binom2norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert binomial to normal — binom2norm","text":"","code":"x <- rbinom(10000, 20, 0.75) y <- binom2norm(x, 0, 1, 20, 0.75) g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")"},{"path":"https://debruine.github.io/faux/dev/reference/cell_combos.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell combos — cell_combos","title":"Cell combos — cell_combos","text":"Creates wide cell combination names, A1_B1, A2_B1, A1_B2, A2_B2.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/cell_combos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell combos — cell_combos","text":"","code":"cell_combos(factors, dv = \"y\", sep = faux_options(\"sep\"))"},{"path":"https://debruine.github.io/faux/dev/reference/cell_combos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell combos — cell_combos","text":"factors list lists named factor levels dv name dv column (\"y\") used factors sep separator","code":""},{"path":"https://debruine.github.io/faux/dev/reference/cell_combos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell combos — cell_combos","text":"list","code":""},{"path":"https://debruine.github.io/faux/dev/reference/check_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Validates the specified design — check_design","title":"Validates the specified design — check_design","text":"Specify number within- -subject factors number levels.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/check_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validates the specified design — check_design","text":"","code":"check_design(   within = list(),   between = list(),   n = 100,   mu = 0,   sd = 1,   r = 0,   dv = list(y = \"value\"),   id = list(id = \"id\"),   vardesc = list(),   plot = faux_options(\"plot\"),   design = NULL,   fix_names = FALSE,   sep = faux_options(\"sep\") )"},{"path":"https://debruine.github.io/faux/dev/reference/check_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validates the specified design — check_design","text":"within list within-subject factors list -subject factors n number samples required mu vector giving means variables sd standard deviations variables r correlations among variables (can single number, full correlation matrix matric vector, vector upper right triangle correlation matrix dv name DV column list(y = \"value\") id name ID column list(id = \"id\") vardesc list variable descriptions names within- -subject factors plot whether show plot design design design list including within, , n, mu, sd, r, dv, id fix_names deprecated sep separator factor levels","code":""},{"path":"https://debruine.github.io/faux/dev/reference/check_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validates the specified design — check_design","text":"list","code":""},{"path":"https://debruine.github.io/faux/dev/reference/check_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validates the specified design — check_design","text":"Specify n -subject cell; mu sd cell, r within-subject cells -subject cell. function returns validated design list use sim_data simulate data table design, archive design. See vignette(\"sim_design\", package = \"faux\") details.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/check_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validates the specified design — check_design","text":"","code":"within <- list(time = c(\"day\", \"night\")) between <- list(pet = c(\"dog\", \"cat\")) mu <- list(dog = 10, cat = 5) vardesc <- list(time = \"Time of Day\", pet = \"Type of Pet\") check_design(within, between, mu = mu, vardesc = vardesc)   between <- list(language = c(\"dutch\", \"thai\"),                 pet = c(\"dog\", \"cat\")) mu <- list(dutch_dog = 12, dutch_cat = 7, thai_dog = 8, thai_cat = 3) check_design(within, between, mu = mu)"},{"path":"https://debruine.github.io/faux/dev/reference/check_mixed_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Get random intercepts for subjects and items — check_mixed_design","title":"Get random intercepts for subjects and items — check_mixed_design","text":"Get error terms existing data table.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/check_mixed_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get random intercepts for subjects and items — check_mixed_design","text":"","code":"check_mixed_design(data, dv = 1, sub_id = 2, item_id = 3, formula = NULL)"},{"path":"https://debruine.github.io/faux/dev/reference/check_mixed_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get random intercepts for subjects and items — check_mixed_design","text":"data existing tbl dv column name index containing DV sub_id column name index subject IDs item_id column name index item IDs formula formula run lmer (defaults null model dv ~ 1 + (1|sub_id) + (1|item_id))","code":""},{"path":"https://debruine.github.io/faux/dev/reference/check_mixed_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get random intercepts for subjects and items — check_mixed_design","text":"list parameters","code":""},{"path":"https://debruine.github.io/faux/dev/reference/check_mixed_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get random intercepts for subjects and items — check_mixed_design","text":"","code":"des <- check_mixed_design(fr4, \"rating\", \"rater_id\", \"face_id\") str(des[1:4]) #> List of 4 #>  $ grand_i : num 2.68 #>  $ sub_sd  : num 0.896 #>  $ item_sd : num 0.655 #>  $ error_sd: num 1.04"},{"path":"https://debruine.github.io/faux/dev/reference/codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"Create PsychDS Codebook from Data — codebook","title":"Create PsychDS Codebook from Data — codebook","text":"See vignette(\"codebook\", package = \"faux\") details.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create PsychDS Codebook from Data — codebook","text":"","code":"codebook(   data,   name = NULL,   vardesc = list(),   ...,   schemaVersion = \"Psych-DS 0.1.0\",   return = c(\"json\", \"list\", \"data\"),   interactive = FALSE )"},{"path":"https://debruine.github.io/faux/dev/reference/codebook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create PsychDS Codebook from Data — codebook","text":"data data frame generate codebook name name dataset (NULL, `data`, limited 64 characters) vardesc Optional variable properties format named list vectors (can named unnamed order data) options \"description\", \"privacy\", \"dataType\", \"identifier\", \"minValue\", \"maxValue\", \"levels\", \"levelsOrdered\", \"na\", \"naValue\", \"alternateName\", \"privacy\", \"unitCode\", \"unitText\" ... dataset properties (e.g., description, license, author, citation, funder, url, identifier, keywords, privacyPolicy) schemaVersion defaults \"Psych-DS 0.1.0\" return Whether output JSON format (json), list (list) reformatted data codebook attribute (data) interactive Whether function prompt user describe columns factor levels","code":""},{"path":"https://debruine.github.io/faux/dev/reference/codebook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create PsychDS Codebook from Data — codebook","text":"list json-formatted codebook, reformatted data codebook attribute","code":""},{"path":"https://debruine.github.io/faux/dev/reference/codebook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create PsychDS Codebook from Data — codebook","text":"","code":"vardesc = list(   description = c(\"Length of the sepal\",                   \"Width of the sepal\",                   \"Length of the petal\",                   \"Width of the petal\",                   \"The flower species\"),   type = c(\"float\", \"float\", \"float\", \"float\", \"string\") ) codebook(iris, vardesc = vardesc) #> Warning: The following variable properties are not standard: type #> Sepal.Length set to dataType float #> Sepal.Width set to dataType float #> Petal.Length set to dataType float #> Petal.Width set to dataType float #> Species set to dataType string #> { #>     \"@context\": \"https://schema.org/\", #>     \"@type\": \"Dataset\", #>     \"name\": \"iris\", #>     \"schemaVersion\": \"Psych-DS 0.1.0\", #>     \"variableMeasured\": [ #>         { #>             \"@type\": \"PropertyValue\", #>             \"name\": \"Sepal.Length\", #>             \"description\": \"Length of the sepal\", #>             \"type\": \"float\", #>             \"dataType\": \"float\" #>         }, #>         { #>             \"@type\": \"PropertyValue\", #>             \"name\": \"Sepal.Width\", #>             \"description\": \"Width of the sepal\", #>             \"type\": \"float\", #>             \"dataType\": \"float\" #>         }, #>         { #>             \"@type\": \"PropertyValue\", #>             \"name\": \"Petal.Length\", #>             \"description\": \"Length of the petal\", #>             \"type\": \"float\", #>             \"dataType\": \"float\" #>         }, #>         { #>             \"@type\": \"PropertyValue\", #>             \"name\": \"Petal.Width\", #>             \"description\": \"Width of the petal\", #>             \"type\": \"float\", #>             \"dataType\": \"float\" #>         }, #>         { #>             \"@type\": \"PropertyValue\", #>             \"name\": \"Species\", #>             \"description\": \"The flower species\", #>             \"type\": \"string\", #>             \"dataType\": \"string\", #>             \"levels\": { #>                 \"setosa\": \"setosa\", #>                 \"versicolor\": \"versicolor\", #>                 \"virginica\": \"virginica\" #>             }, #>             \"levelsOrdered\": false #>         } #>     ] #> } #>"},{"path":"https://debruine.github.io/faux/dev/reference/codebook_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive Codebook — codebook_interactive","title":"Interactive Codebook — codebook_interactive","text":"Create Psych-DS formatted codebook data answering questions interactively console.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/codebook_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive Codebook — codebook_interactive","text":"","code":"codebook_interactive(data, cb = NULL)"},{"path":"https://debruine.github.io/faux/dev/reference/codebook_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive Codebook — codebook_interactive","text":"data data frame generate codebook cb codebook list format already generated","code":""},{"path":"https://debruine.github.io/faux/dev/reference/codebook_interactive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive Codebook — codebook_interactive","text":"codebook list","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_anova.html","id":null,"dir":"Reference","previous_headings":"","what":"Anova code a factor — contr_code_anova","title":"Anova code a factor — contr_code_anova","text":"Anova coding (also called deviation simple coding) sets grand mean intercept.  contrast compares one level reference level (base).","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anova code a factor — contr_code_anova","text":"","code":"contr_code_anova(fct, levels = NULL, base = 1)"},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anova code a factor — contr_code_anova","text":"fct factor contrast code (vector) levels levels factor order base index level use baseline","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_anova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anova code a factor — contr_code_anova","text":"factor contrasts set","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_anova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anova code a factor — contr_code_anova","text":"","code":"df <- sim_design(between = list(pet = c(\"cat\", \"dog\")),                   mu = c(10, 20), plot = FALSE) df$pet <- contr_code_anova(df$pet) lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 2 × 5 #>   term        estimate std.error statistic   p.value #>   <chr>          <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)     15.0    0.0706     212.  1.81e-235 #> 2 pet.dog-cat     10.1    0.141       71.7 1.28e-143  df <- sim_design(between = list(pet = c(\"cat\", \"dog\", \"ferret\")),                   mu = c(2, 4, 9), empirical = TRUE, plot = FALSE)                   df$pet <- contr_code_anova(df$pet, base = 1) lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 3 × 5 #>   term           estimate std.error statistic   p.value #>   <chr>             <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)        5       0.0577      86.6 8.45e-213 #> 2 pet.dog-cat        2.00    0.141       14.1 4.53e- 35 #> 3 pet.ferret-cat     7       0.141       49.5 1.67e-145  df$pet <- contr_code_anova(df$pet, base = 2) lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 3 × 5 #>   term           estimate std.error statistic   p.value #>   <chr>             <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)           5    0.0577      86.6 8.45e-213 #> 2 pet.cat-dog          -2    0.141      -14.1 4.53e- 35 #> 3 pet.ferret-dog        5    0.141       35.4 1.89e-108  df$pet <- contr_code_anova(df$pet, base = \"ferret\") lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 3 × 5 #>   term           estimate std.error statistic   p.value #>   <chr>             <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)           5    0.0577      86.6 8.45e-213 #> 2 pet.cat-ferret       -7    0.141      -49.5 1.67e-145 #> 3 pet.dog-ferret       -5    0.141      -35.4 1.89e-108"},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Difference code a factor — contr_code_difference","title":"Difference code a factor — contr_code_difference","text":"Difference coding sets grand mean intercept.  contrast compares one level previous level.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Difference code a factor — contr_code_difference","text":"","code":"contr_code_difference(fct, levels = NULL)"},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Difference code a factor — contr_code_difference","text":"fct factor contrast code (vector) levels levels factor order","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Difference code a factor — contr_code_difference","text":"factor contrasts set","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_difference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Difference code a factor — contr_code_difference","text":"","code":"df <- sim_design(between = list(pet = c(\"cat\", \"dog\", \"ferret\")),                   mu = c(2, 4, 9), empirical = TRUE, plot = FALSE)                   df$pet <- contr_code_difference(df$pet) lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 3 × 5 #>   term           estimate std.error statistic   p.value #>   <chr>             <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)        5       0.0577      86.6 8.45e-213 #> 2 pet.dog-cat        2.00    0.141       14.1 4.53e- 35 #> 3 pet.ferret-dog     5       0.141       35.4 1.89e-108"},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_helmert.html","id":null,"dir":"Reference","previous_headings":"","what":"Helmert code a factor — contr_code_helmert","title":"Helmert code a factor — contr_code_helmert","text":"Helmert coding sets grand mean intercept.  contrast compares one level mean previous levels.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_helmert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helmert code a factor — contr_code_helmert","text":"","code":"contr_code_helmert(fct, levels = NULL)"},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_helmert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helmert code a factor — contr_code_helmert","text":"fct factor contrast code (vector) levels levels factor order","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_helmert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helmert code a factor — contr_code_helmert","text":"factor contrasts set","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_helmert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helmert code a factor — contr_code_helmert","text":"","code":"df <- sim_design(between = list(pet = c(\"cat\", \"dog\")),                   mu = c(10, 20), plot = FALSE) df$pet <- contr_code_helmert(df$pet) lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 2 × 5 #>   term        estimate std.error statistic   p.value #>   <chr>          <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)    15.0     0.0742     202.  2.90e-231 #> 2 pet.dog-cat     9.96    0.148       67.1 3.70e-138  df <- sim_design(between = list(pet = c(\"cat\", \"dog\", \"ferret\")),                   mu = c(2, 4, 9), empirical = TRUE, plot = FALSE)                   df$pet <- contr_code_helmert(df$pet) lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 3 × 5 #>   term               estimate std.error statistic   p.value #>   <chr>                 <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)               5    0.0577      86.6 8.45e-213 #> 2 pet.dog-cat               2    0.141       14.1 4.53e- 35 #> 3 pet.ferret-cat.dog        6    0.122       49.0 2.56e-144  # reorder the levels to change the comparisons df$pet <- contr_code_helmert(df$pet, levels = c(\"dog\", \"cat\", \"ferret\")) lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 3 × 5 #>   term               estimate std.error statistic   p.value #>   <chr>                 <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)               5    0.0577      86.6 8.45e-213 #> 2 pet.cat-dog              -2    0.141      -14.1 4.53e- 35 #> 3 pet.ferret-dog.cat        6    0.122       49.0 2.56e-144  df$pet <- contr_code_helmert(df$pet, levels = c(\"ferret\", \"dog\", \"cat\")) lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 3 × 5 #>   term               estimate std.error statistic   p.value #>   <chr>                 <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)             5      0.0577      86.6 8.45e-213 #> 2 pet.dog-ferret         -5      0.141      -35.4 1.89e-108 #> 3 pet.cat-ferret.dog     -4.5    0.122      -36.7 1.71e-112"},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Polynomial code a factor — contr_code_poly","title":"Polynomial code a factor — contr_code_poly","text":"Polynomial coding sets grand mean intercept.  contrast tests trend (linear, quadratic, cubic, etc.). suitable ordered factors.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polynomial code a factor — contr_code_poly","text":"","code":"contr_code_poly(fct, levels = NULL)"},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polynomial code a factor — contr_code_poly","text":"fct factor contrast code (vector) levels levels factor order","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polynomial code a factor — contr_code_poly","text":"factor contrasts set","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polynomial code a factor — contr_code_poly","text":"","code":"df <- sim_design(within = list(time = 1:6),                   mu = 1:6 + (1:6-3.5)^2,                   long = TRUE, plot = FALSE)                   df$time <- contr_code_poly(df$time) lm(y ~ time, df) %>% broom::tidy() #> # A tibble: 6 × 5 #>   term        estimate std.error statistic   p.value #>   <chr>          <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)   6.39      0.0438   146.    0         #> 2 time^1        4.23      0.107     39.4   6.94e-168 #> 3 time^2        5.94      0.107     55.4   1.06e-236 #> 4 time^3       -0.165     0.107     -1.53  1.25e-  1 #> 5 time^4        0.0147    0.107      0.137 8.91e-  1 #> 6 time^5       -0.125     0.107     -1.16  2.45e-  1"},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum code a factor — contr_code_sum","title":"Sum code a factor — contr_code_sum","text":"Sum coding sets grand mean intercept.  contrast compares one level grand mean.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum code a factor — contr_code_sum","text":"","code":"contr_code_sum(fct, levels = NULL, omit = length(levels))"},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum code a factor — contr_code_sum","text":"fct factor contrast code (vector) levels levels factor order omit level omit (defaults last level)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum code a factor — contr_code_sum","text":"factor contrasts set","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum code a factor — contr_code_sum","text":"","code":"df <- sim_design(between = list(pet = c(\"cat\", \"dog\", \"bird\", \"ferret\")),                   mu = c(2, 4, 9, 13), empirical = TRUE, plot = FALSE)  df$pet <- contr_code_sum(df$pet) lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 4 × 5 #>   term               estimate std.error statistic   p.value #>   <chr>                 <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)               7    0.05       140   0         #> 2 pet.cat-intercept        -5    0.0866     -57.7 6.13e-195 #> 3 pet.dog-intercept        -3    0.0866     -34.6 6.42e-122 #> 4 pet.bird-intercept        2    0.0866      23.1 2.33e- 75  df$pet <- contr_code_sum(df$pet, omit = \"cat\") lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 4 × 5 #>   term                 estimate std.error statistic   p.value #>   <chr>                   <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)              7       0.05       140   0         #> 2 pet.dog-intercept       -3.00    0.0866     -34.6 6.42e-122 #> 3 pet.bird-intercept       2.00    0.0866      23.1 2.33e- 75 #> 4 pet.ferret-intercept     6       0.0866      69.3 1.82e-223  df$pet <- contr_code_sum(df$pet, omit = 1) lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 4 × 5 #>   term                 estimate std.error statistic   p.value #>   <chr>                   <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)              7       0.05       140   0         #> 2 pet.dog-intercept       -3.00    0.0866     -34.6 6.42e-122 #> 3 pet.bird-intercept       2.00    0.0866      23.1 2.33e- 75 #> 4 pet.ferret-intercept     6       0.0866      69.3 1.82e-223"},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_treatment.html","id":null,"dir":"Reference","previous_headings":"","what":"Treatment code a factor — contr_code_treatment","title":"Treatment code a factor — contr_code_treatment","text":"Treatment coding sets mean reference level (base) intercept.  contrast compares one level reference level.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_treatment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treatment code a factor — contr_code_treatment","text":"","code":"contr_code_treatment(fct, levels = NULL, base = 1)"},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_treatment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treatment code a factor — contr_code_treatment","text":"fct factor contrast code (vector) levels levels factor order base index level use baseline","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_treatment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treatment code a factor — contr_code_treatment","text":"factor contrasts set","code":""},{"path":"https://debruine.github.io/faux/dev/reference/contr_code_treatment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Treatment code a factor — contr_code_treatment","text":"","code":"df <- sim_design(between = list(pet = c(\"cat\", \"dog\")),                   mu = c(10, 20), plot = FALSE) df$pet <- contr_code_treatment(df$pet) lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 2 × 5 #>   term        estimate std.error statistic   p.value #>   <chr>          <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)     10.0    0.0983     102.  2.80e-173 #> 2 pet.dog-cat     10.0    0.139       72.0 5.60e-144  df <- sim_design(between = list(pet = c(\"cat\", \"dog\", \"ferret\")),                   mu = c(2, 4, 9), empirical = TRUE, plot = FALSE)                   df$pet <- contr_code_treatment(df$pet) lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 3 × 5 #>   term           estimate std.error statistic   p.value #>   <chr>             <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)        2.00     0.1        20.0 5.87e- 57 #> 2 pet.dog-cat        2.00     0.141      14.1 4.53e- 35 #> 3 pet.ferret-cat     7        0.141      49.5 1.67e-145  df$pet <- contr_code_treatment(df$pet, base = 2) lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 3 × 5 #>   term           estimate std.error statistic   p.value #>   <chr>             <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)        4        0.1        40.0 1.30e-121 #> 2 pet.cat-dog       -2.00     0.141     -14.1 4.53e- 35 #> 3 pet.ferret-dog     5        0.141      35.4 1.89e-108  df$pet <- contr_code_treatment(df$pet, base = \"ferret\") lm(y ~ pet, df) %>% broom::tidy() #> # A tibble: 3 × 5 #>   term           estimate std.error statistic   p.value #>   <chr>             <dbl>     <dbl>     <dbl>     <dbl> #> 1 (Intercept)           9     0.1        90   1.40e-217 #> 2 pet.cat-ferret       -7     0.141     -49.5 1.67e-145 #> 3 pet.dog-ferret       -5     0.141     -35.4 1.89e-108"},{"path":"https://debruine.github.io/faux/dev/reference/convert_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert parameter — convert_param","title":"Convert parameter — convert_param","text":"Converts parameter specification vector list format","code":""},{"path":"https://debruine.github.io/faux/dev/reference/convert_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert parameter — convert_param","text":"","code":"convert_param(param, cells_w, cells_b, type = \"this parameter\")"},{"path":"https://debruine.github.io/faux/dev/reference/convert_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert parameter — convert_param","text":"param parameter (mu, sd, n) cells_w vector within-subject cells combinations cells_b vector -subject cell combinations type name parameter (error messages)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/convert_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert parameter — convert_param","text":"list parameters","code":""},{"path":"https://debruine.github.io/faux/dev/reference/convert_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert r for NORTA — convert_r","title":"Convert r for NORTA — convert_r","text":"Given target r-value, returns correlation need induce bivariate normal distribution target correlation converting distributions.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/convert_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert r for NORTA — convert_r","text":"","code":"convert_r(   target_r = 0,   dist1 = \"norm\",   dist2 = \"norm\",   params1 = list(),   params2 = list(),   tol = 0.01 )"},{"path":"https://debruine.github.io/faux/dev/reference/convert_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert r for NORTA — convert_r","text":"target_r target correlation dist1 target distribution function variable 1 (e.g., norm, binom, gamma, truncnorm) dist2 target distribution function variable 2 params1 Arguments pass functions distribution 1 params2 Arguments pass functions distribution 2 tol Tolerance optimise function","code":""},{"path":"https://debruine.github.io/faux/dev/reference/convert_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert r for NORTA — convert_r","text":"r-value induce bivariate normal variables","code":""},{"path":"https://debruine.github.io/faux/dev/reference/convert_r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert r for NORTA — convert_r","text":"See Distributions distributions various arguments specify params1 params2.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/convert_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert r for NORTA — convert_r","text":"","code":"convert_r(target_r = 0.5,            dist1 = \"norm\",            dist2 = \"binom\",            params1 = list(mean = 100, sd = 10),           params2 = list(size = 1, prob = 0.5)) #> [1] 0.627            convert_r(target_r = 0.5,            dist1 = \"norm\",            dist2 = \"likert\",            params1 = list(mean = 100, sd = 10),           params2 = list(prob = c(5, 10, 20, 30, 20))) #> [1] 0.531"},{"path":"https://debruine.github.io/faux/dev/reference/cormat.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a correlation matrix — cormat","title":"Make a correlation matrix — cormat","text":"cormat makes correlation matrix single number,  vars\\*vars matrix, vars\\*vars vector, vars\\*(vars-1)/2 vector.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/cormat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a correlation matrix — cormat","text":"","code":"cormat(cors = 0, vars = 3)"},{"path":"https://debruine.github.io/faux/dev/reference/cormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a correlation matrix — cormat","text":"cors correlations among variables (can single number, vars\\*vars matrix, vars\\*vars vector, vars\\*(vars-1)/2 vector) vars number variables matrix","code":""},{"path":"https://debruine.github.io/faux/dev/reference/cormat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a correlation matrix — cormat","text":"matrix","code":""},{"path":"https://debruine.github.io/faux/dev/reference/cormat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a correlation matrix — cormat","text":"","code":"cormat(.5, 3) #>      [,1] [,2] [,3] #> [1,]  1.0  0.5  0.5 #> [2,]  0.5  1.0  0.5 #> [3,]  0.5  0.5  1.0 cormat(c( 1, .2, .3, .4,          .2,  1, .5, .6,           .3, .5,  1, .7,          .4, .6, .7,  1), 4) #>      [,1] [,2] [,3] [,4] #> [1,]  1.0  0.2  0.3  0.4 #> [2,]  0.2  1.0  0.5  0.6 #> [3,]  0.3  0.5  1.0  0.7 #> [4,]  0.4  0.6  0.7  1.0 cormat(c(.2, .3, .4, .5, .6, .7), 4) #>      [,1] [,2] [,3] [,4] #> [1,]  1.0  0.2  0.3  0.4 #> [2,]  0.2  1.0  0.5  0.6 #> [3,]  0.3  0.5  1.0  0.7 #> [4,]  0.4  0.6  0.7  1.0"},{"path":"https://debruine.github.io/faux/dev/reference/cormat_from_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Correlation Matrix from Triangle — cormat_from_triangle","title":"Make Correlation Matrix from Triangle — cormat_from_triangle","text":"cormat_from_triangle makes correlation matrix vector upper right triangle","code":""},{"path":"https://debruine.github.io/faux/dev/reference/cormat_from_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Correlation Matrix from Triangle — cormat_from_triangle","text":"","code":"cormat_from_triangle(cors)"},{"path":"https://debruine.github.io/faux/dev/reference/cormat_from_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Correlation Matrix from Triangle — cormat_from_triangle","text":"cors correlations among variables vars\\*(vars-1)/2 vector","code":""},{"path":"https://debruine.github.io/faux/dev/reference/cormat_from_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Correlation Matrix from Triangle — cormat_from_triangle","text":"matrix","code":""},{"path":"https://debruine.github.io/faux/dev/reference/cormat_from_triangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Correlation Matrix from Triangle — cormat_from_triangle","text":"","code":"cormat_from_triangle(c(.2, .3, .4,                             .5, .6,                                 .7)) #>      [,1] [,2] [,3] [,4] #> [1,]  1.0  0.2  0.3  0.4 #> [2,]  0.2  1.0  0.5  0.6 #> [3,]  0.3  0.5  1.0  0.7 #> [4,]  0.4  0.6  0.7  1.0"},{"path":"https://debruine.github.io/faux/dev/reference/distfuncs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get distribution functions — distfuncs","title":"Get distribution functions — distfuncs","text":"Get distribution functions","code":""},{"path":"https://debruine.github.io/faux/dev/reference/distfuncs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get distribution functions — distfuncs","text":"","code":"distfuncs(dist = \"norm\")"},{"path":"https://debruine.github.io/faux/dev/reference/distfuncs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get distribution functions — distfuncs","text":"dist target distribution function (e.g., norm, binom, gamma, truncnorm, likert). distribution definited packages stats, truncnorm, faux, use format \"package::dist\".","code":""},{"path":"https://debruine.github.io/faux/dev/reference/distfuncs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get distribution functions — distfuncs","text":"list r q functions","code":""},{"path":"https://debruine.github.io/faux/dev/reference/distfuncs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get distribution functions — distfuncs","text":"","code":"qfunc <- distfuncs(\"norm\")$q # returns qnorm p <- seq(0.1, 0.9, .1) qfunc(p) == qnorm(p) #> [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE  rfunc <- distfuncs(\"norm\")$r # returns rnorm rfunc(n = 10, mean = 100, sd = 10) #>  [1]  87.77887  84.91134 101.77772 115.29058 105.56906 105.89406  97.24234 #>  [8]  93.58947 114.37990  92.64277"},{"path":"https://debruine.github.io/faux/dev/reference/dlikert.html","id":null,"dir":"Reference","previous_headings":"","what":"Likert density function — dlikert","title":"Likert density function — dlikert","text":"Likert density function","code":""},{"path":"https://debruine.github.io/faux/dev/reference/dlikert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likert density function — dlikert","text":"","code":"dlikert(x, prob, labels = names(prob))"},{"path":"https://debruine.github.io/faux/dev/reference/dlikert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likert density function — dlikert","text":"x likert distributed vector prob vector probabilities counts; named, output factor labels vector values, defaults names(prob) 1:length(prob), numeric, output numeric","code":""},{"path":"https://debruine.github.io/faux/dev/reference/dlikert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likert density function — dlikert","text":"vector densities","code":""},{"path":"https://debruine.github.io/faux/dev/reference/dlikert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likert density function — dlikert","text":"","code":"x <- 1:5 prob <- c(.1, .2, .4, .2, .1) dlikert(x, prob) #>   1   2   3   4   5  #> 0.1 0.2 0.4 0.2 0.1   x <- c(\"A\", \"C\", \"B\", \"B\") prob <- c(A = 10, B = 20, C = 30) dlikert(x, prob) #>         A         C         B         B  #> 0.1666667 0.5000000 0.3333333 0.3333333   # specify labels if prob not named and not 1:length(prob) labels <- -2:2  x <- sample(labels, 10, replace = TRUE) prob <- rep(1, length(labels)) # uniform probability dlikert(x, prob, labels) #>  -2  -1   2   0  -2   2   0   0   0   1  #> 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2"},{"path":"https://debruine.github.io/faux/dev/reference/faceratings.html","id":null,"dir":"Reference","previous_headings":"","what":"Attractiveness ratings of faces — faceratings","title":"Attractiveness ratings of faces — faceratings","text":"dataset containing attractiveness ratings (1-7 scale \"much less attractiveness average\" \"much attractive average\") neutral front faces 2513 people (ages 17-90)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/faceratings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attractiveness ratings of faces — faceratings","text":"","code":"faceratings"},{"path":"https://debruine.github.io/faux/dev/reference/faceratings.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Attractiveness ratings of faces — faceratings","text":"data frame 256326 rows 9 variables: rater_id rater's ID rater_sex rater's sex (female, male, intersex, NA) rater_age rater's age (17-90 years) rater_sexpref rater's preferred sex romantic relationships (either, men, neither, women, NA) face_id face's ID face_sex face's sex (female, male) face_age face's age (years) face_eth face's ethnic group rating attractiveness rating scale 1 (much less attractive average) 7 (much attractive average)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/faceratings.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Attractiveness ratings of faces — faceratings","text":"https://figshare.com/articles/dataset/Face_Research_Lab_London_Set/5047666","code":""},{"path":"https://debruine.github.io/faux/dev/reference/faux.html","id":null,"dir":"Reference","previous_headings":"","what":"faux: Simulation Functions. — faux","title":"faux: Simulation Functions. — faux","text":"faux package provides functions simulating datasets specified structure.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/faux_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set/get global faux options — faux_options","title":"Set/get global faux options — faux_options","text":"Global faux options used, example, set default separator cell names.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/faux_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set/get global faux options — faux_options","text":"","code":"faux_options(...)"},{"path":"https://debruine.github.io/faux/dev/reference/faux_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set/get global faux options — faux_options","text":"... One four: (1) nothing, returns options list; (2) name option element, returns value; (3) name-value pair sets corresponding option new value (returns nothing), (4) list option-value pairs sets corresponding arguments.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/faux_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set/get global faux options — faux_options","text":"list options, values option, nothing","code":""},{"path":"https://debruine.github.io/faux/dev/reference/faux_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set/get global faux options — faux_options","text":"","code":"faux_options() # see all options #> $connection #> A connection with                       #> description \"stdin\"    #> class       \"terminal\" #> mode        \"r\"        #> text        \"text\"     #> opened      \"opened\"   #> can read    \"yes\"      #> can write   \"no\"       #>  #> $plot #> [1] TRUE #>  #> $sep #> [1] \"_\" #>  #> $verbose #> [1] TRUE #>   faux_options(\"sep\") # see value of faux.sep #> [1] \"_\"  if (FALSE) { # changes cell separator (e.g., A1.B2) faux_options(sep = \".\")  # changes cell separator back to default (e.g., A1_B2) faux_options(sep = \"_\") }"},{"path":"https://debruine.github.io/faux/dev/reference/fh_bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Fréchet-Hoefding bounds — fh_bounds","title":"Get Fréchet-Hoefding bounds — fh_bounds","text":"Fréchet-Hoefding bounds limits correlation different distributions.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/fh_bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Fréchet-Hoefding bounds — fh_bounds","text":"","code":"fh_bounds(dist1 = \"norm\", dist2 = \"norm\", params1 = list(), params2 = list())"},{"path":"https://debruine.github.io/faux/dev/reference/fh_bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Fréchet-Hoefding bounds — fh_bounds","text":"dist1 target distribution function variable 1 (e.g., norm, binom, gamma, truncnorm) dist2 target distribution function variable 2 params1 Arguments pass rdist function distribution 1 params2 Arguments pass rdist function distribution 2","code":""},{"path":"https://debruine.github.io/faux/dev/reference/fh_bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Fréchet-Hoefding bounds — fh_bounds","text":"list min max possible values","code":""},{"path":"https://debruine.github.io/faux/dev/reference/fh_bounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Fréchet-Hoefding bounds — fh_bounds","text":"","code":"fh_bounds(dist1 = \"pois\",           dist2 = \"unif\",           params1 = list(lambda = 3),           params2 = list(min = 0, max = 100)) #> $min #> [1] -0.956052 #>  #> $max #> [1] 0.955946 #>"},{"path":"https://debruine.github.io/faux/dev/reference/fix_name_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix name labels — fix_name_labels","title":"Fix name labels — fix_name_labels","text":"Fixes factor list named levels special characters names","code":""},{"path":"https://debruine.github.io/faux/dev/reference/fix_name_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix name labels — fix_name_labels","text":"","code":"fix_name_labels(x, pattern = NA, replacement = \".\")"},{"path":"https://debruine.github.io/faux/dev/reference/fix_name_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix name labels — fix_name_labels","text":"x vector list fix pattern regex pattern replace; defaults non-word characters value faux_options(\"sep\") (default = _) replacement character replace; defaults . (_ faux_options(\"sep\") == \".\")","code":""},{"path":"https://debruine.github.io/faux/dev/reference/fix_name_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix name labels — fix_name_labels","text":"named list fixed names","code":""},{"path":"https://debruine.github.io/faux/dev/reference/fix_name_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix name labels — fix_name_labels","text":"","code":"source <- list(\"full.stop\", \" space \", \"under_score\", \"plus+\", \"dash-\", \"tab\\t\", \"line\\nbreak\") fix_name_labels(source) #> $full.stop #> [1] \"full.stop\" #>  #> $.space. #> [1] \" space \" #>  #> $under.score #> [1] \"under_score\" #>  #> $plus. #> [1] \"plus+\" #>  #> $dash. #> [1] \"dash-\" #>  #> $tab. #> [1] \"tab\\t\" #>  #> $line.break #> [1] \"line\\nbreak\" #>"},{"path":"https://debruine.github.io/faux/dev/reference/fr4.html","id":null,"dir":"Reference","previous_headings":"","what":"Attractiveness rating subset — fr4","title":"Attractiveness rating subset — fr4","text":"faceratings dataset cut demos first 4 raters sex  sexpref first 4 faces sex ethnicity non-NA ages","code":""},{"path":"https://debruine.github.io/faux/dev/reference/fr4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attractiveness rating subset — fr4","text":"","code":"fr4"},{"path":"https://debruine.github.io/faux/dev/reference/fr4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Attractiveness rating subset — fr4","text":"data frame 768 rows 9 variables: rater_id rater's ID rater_sex rater's sex (female, male) rater_age rater's age (17.4-54.3 years) rater_sexpref rater's preferred sex romantic relationships (either, men, women) face_id face's ID face_sex face's sex (female, male) face_age face's age (19-47 years) face_eth face's ethnic group (black, east_asian, west_asian, white) rating attractiveness rating scale 1 (much less attractive average) 7 (much attractive average)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/fr4.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Attractiveness rating subset — fr4","text":"https://figshare.com/articles/dataset/Face_Research_Lab_London_Set/5047666","code":""},{"path":"https://debruine.github.io/faux/dev/reference/gamma2norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert gamma to normal — gamma2norm","title":"Convert gamma to normal — gamma2norm","text":"Convert gamma normal","code":""},{"path":"https://debruine.github.io/faux/dev/reference/gamma2norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert gamma to normal — gamma2norm","text":"","code":"gamma2norm(x, mu = 0, sd = 1, shape = NULL, rate = 1, scale = 1/rate)"},{"path":"https://debruine.github.io/faux/dev/reference/gamma2norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert gamma to normal — gamma2norm","text":"x gamma distributed vector mu mean normal distribution convert sd SD normal distribution convert shape gamma distribution parameter (must positive) rate alternative way specify scale scale gamma distribution parameter (must positive)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/gamma2norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert gamma to normal — gamma2norm","text":"vector normal distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/gamma2norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert gamma to normal — gamma2norm","text":"","code":"x <- rgamma(10000, 2) y <- gamma2norm(x) #> shape was set to 2.03437063567883 g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")"},{"path":"https://debruine.github.io/faux/dev/reference/get_coefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Coefficients from Data — get_coefs","title":"Get Coefficients from Data — get_coefs","text":"need model coefficients simulate multilevel data, can get data simulated parameters using sim_design() rmulti().","code":""},{"path":"https://debruine.github.io/faux/dev/reference/get_coefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Coefficients from Data — get_coefs","text":"","code":"get_coefs(data, formula = NULL, fun = stats::lm, ...)"},{"path":"https://debruine.github.io/faux/dev/reference/get_coefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Coefficients from Data — get_coefs","text":"data dataset long format formula lm formula (can extracted datasets created sim_design) fun model function ... arguments model function","code":""},{"path":"https://debruine.github.io/faux/dev/reference/get_coefs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Coefficients from Data — get_coefs","text":"list model coefficients","code":""},{"path":"https://debruine.github.io/faux/dev/reference/get_coefs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Coefficients from Data — get_coefs","text":"","code":"# simulate some data data <- sim_design(within = 2, between = 2,                     mu = c(1, 0, 1, 1),                     long = TRUE, empirical = TRUE)   # get coefs for the full factorial model get_coefs(data) #>   (Intercept)            W1            B1         W1:B1  #>  1.000000e+00 -1.000000e+00 -6.661338e-16  1.000000e+00   # a reduced model get_coefs(data, y ~ B1 + W1) #> (Intercept)          B1          W1  #>        0.75        0.50       -0.50   # specify a different model function data$y <- norm2binom(data$y) get_coefs(data, fun = glm, family = binomial) #> (Intercept)          W1          B1       W1:B1  #>   0.4054651  -1.6711315  -0.1643031   1.8772816"},{"path":"https://debruine.github.io/faux/dev/reference/get_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Get design — get_design","title":"Get design — get_design","text":"Get design specification data table created faux. can used create simulated data design.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/get_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get design — get_design","text":"","code":"get_design(data)"},{"path":"https://debruine.github.io/faux/dev/reference/get_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get design — get_design","text":"data data table check","code":""},{"path":"https://debruine.github.io/faux/dev/reference/get_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get design — get_design","text":"list class design","code":""},{"path":"https://debruine.github.io/faux/dev/reference/get_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get design — get_design","text":"","code":"data <- sim_design(2, 2, plot = FALSE) design <- get_design(data) data2 <- sim_design(design, plot = FALSE)"},{"path":"https://debruine.github.io/faux/dev/reference/get_design_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Get design from long data — get_design_long","title":"Get design from long data — get_design_long","text":"Makes best guess design long-format data frame.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/get_design_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get design from long data — get_design_long","text":"","code":"get_design_long(   data,   dv = c(y = \"score\"),   id = c(id = \"id\"),   plot = faux_options(\"plot\") )"},{"path":"https://debruine.github.io/faux/dev/reference/get_design_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get design from long data — get_design_long","text":"data data frame (long format) dv column name identifies DV id column name(s) identify unit analysis plot whether show plot design","code":""},{"path":"https://debruine.github.io/faux/dev/reference/get_design_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get design from long data — get_design_long","text":"design list","code":""},{"path":"https://debruine.github.io/faux/dev/reference/get_design_long.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get design from long data — get_design_long","text":"Finds columns contain single value per unit analysis (factors),  columns contain values per unit analysis (within factors),  columns differ units analysis (dv, continuous factors)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/get_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parameters from a data table — get_params","title":"Get parameters from a data table — get_params","text":"Generates table correlations means numeric columns data frame. data generated sim_design \"design\" attribute, , within, dv id retrieved , unless overridden (use = 0 ","code":""},{"path":"https://debruine.github.io/faux/dev/reference/get_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parameters from a data table — get_params","text":"","code":"get_params(   data,   between = NULL,   within = NULL,   dv = NULL,   id = NULL,   digits = 2 )  check_sim_stats(   data,   between = NULL,   within = NULL,   dv = NULL,   id = NULL,   digits = 2 )"},{"path":"https://debruine.github.io/faux/dev/reference/get_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parameters from a data table — get_params","text":"data existing tbl vector column names -subject factors within vector column names within-subject factors (data long) dv column name(s) dv, NULL numeric columns selected id column name(s) subject ID, excluded table even numeric digits many digits round (default = 2)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/get_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parameters from a data table — get_params","text":"tbl correlations, means sds","code":""},{"path":"https://debruine.github.io/faux/dev/reference/get_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parameters from a data table — get_params","text":"","code":"get_params(iris, \"Species\") #>       Species  n          var Sepal.Length Sepal.Width Petal.Length Petal.Width #> 1      setosa 50 Sepal.Length         1.00        0.74         0.27        0.28 #> 2      setosa 50  Sepal.Width         0.74        1.00         0.18        0.23 #> 3      setosa 50 Petal.Length         0.27        0.18         1.00        0.33 #> 4      setosa 50  Petal.Width         0.28        0.23         0.33        1.00 #> 5  versicolor 50 Sepal.Length         1.00        0.53         0.75        0.55 #> 6  versicolor 50  Sepal.Width         0.53        1.00         0.56        0.66 #> 7  versicolor 50 Petal.Length         0.75        0.56         1.00        0.79 #> 8  versicolor 50  Petal.Width         0.55        0.66         0.79        1.00 #> 9   virginica 50 Sepal.Length         1.00        0.46         0.86        0.28 #> 10  virginica 50  Sepal.Width         0.46        1.00         0.40        0.54 #> 11  virginica 50 Petal.Length         0.86        0.40         1.00        0.32 #> 12  virginica 50  Petal.Width         0.28        0.54         0.32        1.00 #>    mean   sd #> 1  5.01 0.35 #> 2  3.43 0.38 #> 3  1.46 0.17 #> 4  0.25 0.11 #> 5  5.94 0.52 #> 6  2.77 0.31 #> 7  4.26 0.47 #> 8  1.33 0.20 #> 9  6.59 0.64 #> 10 2.97 0.32 #> 11 5.55 0.55 #> 12 2.03 0.27"},{"path":"https://debruine.github.io/faux/dev/reference/getcols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data columns — getcols","title":"Get data columns — getcols","text":"Get columns data table specifying index, column name string, unquoted column name. Returns column names indices.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/getcols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data columns — getcols","text":"","code":"getcols(data, ..., as_index = FALSE)"},{"path":"https://debruine.github.io/faux/dev/reference/getcols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data columns — getcols","text":"data existing tbl ... Columns get as_index return column indices (defaults name)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/getcols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data columns — getcols","text":"vector column names indices","code":""},{"path":"https://debruine.github.io/faux/dev/reference/getcols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data columns — getcols","text":"","code":"getcols(mtcars, 1, cyl, \"disp\", 5:7) #> [1] \"mpg\"  \"cyl\"  \"disp\" \"drat\" \"wt\"   \"qsec\""},{"path":"https://debruine.github.io/faux/dev/reference/interactive_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Set design interactively — interactive_design","title":"Set design interactively — interactive_design","text":"Set design interactively","code":""},{"path":"https://debruine.github.io/faux/dev/reference/interactive_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set design interactively — interactive_design","text":"","code":"interactive_design(output = c(\"faux\"), plot = faux_options(\"plot\"))"},{"path":"https://debruine.github.io/faux/dev/reference/interactive_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set design interactively — interactive_design","text":"output type design output (faux) plot whether show plot design","code":""},{"path":"https://debruine.github.io/faux/dev/reference/interactive_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set design interactively — interactive_design","text":"list","code":""},{"path":"https://debruine.github.io/faux/dev/reference/interactive_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set design interactively — interactive_design","text":"","code":"if(interactive()){ des <- interactive_design() }"},{"path":"https://debruine.github.io/faux/dev/reference/is_pos_def.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a Matrix is Positive Definite — is_pos_def","title":"Check a Matrix is Positive Definite — is_pos_def","text":"is_pos_def makes correlation matrix vector","code":""},{"path":"https://debruine.github.io/faux/dev/reference/is_pos_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a Matrix is Positive Definite — is_pos_def","text":"","code":"is_pos_def(cor_mat, tol = 1e-08)"},{"path":"https://debruine.github.io/faux/dev/reference/is_pos_def.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a Matrix is Positive Definite — is_pos_def","text":"cor_mat correlation matrix tol tolerance comparing eigenvalues 0","code":""},{"path":"https://debruine.github.io/faux/dev/reference/is_pos_def.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a Matrix is Positive Definite — is_pos_def","text":"logical value","code":""},{"path":"https://debruine.github.io/faux/dev/reference/is_pos_def.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check a Matrix is Positive Definite — is_pos_def","text":"","code":"is_pos_def(matrix(c(1, .5, .5, 1), 2)) # returns TRUE #> [1] TRUE is_pos_def(matrix(c(1, .9, .9,                     .9, 1, -.2,                     .9, -.2, 1), 3)) # returns FALSE #> [1] FALSE"},{"path":"https://debruine.github.io/faux/dev/reference/json_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert design to JSON — json_design","title":"Convert design to JSON — json_design","text":"Convert design list JSON notation archiving (e.g. scienceverse)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/json_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert design to JSON — json_design","text":"","code":"json_design(design, filename = NULL, digits = 8, pretty = FALSE, ...)"},{"path":"https://debruine.github.io/faux/dev/reference/json_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert design to JSON — json_design","text":"design design list including within, , n, mu, sd, r, dv, id filename option name file save json digits number digits save pretty whether print condensed readable ... options send jsonlite::toJSON","code":""},{"path":"https://debruine.github.io/faux/dev/reference/json_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert design to JSON — json_design","text":"JSON string","code":""},{"path":"https://debruine.github.io/faux/dev/reference/json_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert design to JSON — json_design","text":"","code":"des <- check_design(2,2)  json_design(des) #> {\"within\":{\"W1\":{\"W1a\":\"W1a\",\"W1b\":\"W1b\"}},\"between\":{\"B1\":{\"B1a\":\"B1a\",\"B1b\":\"B1b\"}},\"dv\":{\"y\":\"value\"},\"id\":{\"id\":\"id\"},\"vardesc\":{\"W1\":\"W1\",\"B1\":\"B1\"},\"n\":{\"B1a\":100,\"B1b\":100},\"mu\":{\"B1a\":{\"W1a\":0,\"W1b\":0},\"B1b\":{\"W1a\":0,\"W1b\":0}},\"sd\":{\"B1a\":{\"W1a\":1,\"W1b\":1},\"B1b\":{\"W1a\":1,\"W1b\":1}},\"r\":{\"B1a\":[[1,0],[0,1]],\"B1b\":[[1,0],[0,1]]},\"sep\":\"_\"}  json_design(des, pretty = TRUE) #> { #>   \"within\": { #>     \"W1\": { #>       \"W1a\": \"W1a\", #>       \"W1b\": \"W1b\" #>     } #>   }, #>   \"between\": { #>     \"B1\": { #>       \"B1a\": \"B1a\", #>       \"B1b\": \"B1b\" #>     } #>   }, #>   \"dv\": { #>     \"y\": \"value\" #>   }, #>   \"id\": { #>     \"id\": \"id\" #>   }, #>   \"vardesc\": { #>     \"W1\": \"W1\", #>     \"B1\": \"B1\" #>   }, #>   \"n\": { #>     \"B1a\": 100, #>     \"B1b\": 100 #>   }, #>   \"mu\": { #>     \"B1a\": { #>       \"W1a\": 0, #>       \"W1b\": 0 #>     }, #>     \"B1b\": { #>       \"W1a\": 0, #>       \"W1b\": 0 #>     } #>   }, #>   \"sd\": { #>     \"B1a\": { #>       \"W1a\": 1, #>       \"W1b\": 1 #>     }, #>     \"B1b\": { #>       \"W1a\": 1, #>       \"W1b\": 1 #>     } #>   }, #>   \"r\": { #>     \"B1a\": [ #>       [1, 0], #>       [0, 1] #>     ], #>     \"B1b\": [ #>       [1, 0], #>       [0, 1] #>     ] #>   }, #>   \"sep\": \"_\" #> }"},{"path":"https://debruine.github.io/faux/dev/reference/long2wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data from long to wide format — long2wide","title":"Convert data from long to wide format — long2wide","text":"Convert data long wide format","code":""},{"path":"https://debruine.github.io/faux/dev/reference/long2wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data from long to wide format — long2wide","text":"","code":"long2wide(   data,   within = c(),   between = c(),   dv = \"y\",   id = \"id\",   sep = faux_options(\"sep\") )"},{"path":"https://debruine.github.io/faux/dev/reference/long2wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data from long to wide format — long2wide","text":"data tbl long format within names within column(s) names column(s) (optional) dv name DV (value) column id names column(s) grouping observations sep separator factor levels","code":""},{"path":"https://debruine.github.io/faux/dev/reference/long2wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data from long to wide format — long2wide","text":"tbl wide format","code":""},{"path":"https://debruine.github.io/faux/dev/reference/long2wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data from long to wide format — long2wide","text":"","code":"df_long <- sim_design(2, 2, long = TRUE)  long2wide(df_long, \"A\", \"B\") #>       id  B1          W1a         W1b #> 1   S001 B1a  1.094260730  0.26288908 #> 2   S002 B1a -0.709067764 -2.58003442 #> 3   S003 B1a  0.151160845 -0.47092521 #> 4   S004 B1a -0.920019959 -0.04376454 #> 5   S005 B1a  0.219760656  0.20310814 #> 6   S006 B1a  0.893822793  0.30005308 #> 7   S007 B1a  0.181069621 -0.11441755 #> 8   S008 B1a  0.986797232  1.87171180 #> 9   S009 B1a -0.222839943  0.62259358 #> 10  S010 B1a -1.908416465 -0.34392982 #> 11  S011 B1a  0.680816967  0.69937977 #> 12  S012 B1a  0.200263555 -0.54118393 #> 13  S013 B1a  0.498864485 -0.94790199 #> 14  S014 B1a -1.160432120  0.05633224 #> 15  S015 B1a -0.428469616 -0.82627925 #> 16  S016 B1a  0.138597202  0.19483146 #> 17  S017 B1a  1.057883563 -0.21954244 #> 18  S018 B1a -0.631141085  0.75921055 #> 19  S019 B1a  0.182337426  1.23529387 #> 20  S020 B1a -0.613188420 -0.19714991 #> 21  S021 B1a -0.179853210 -0.47078765 #> 22  S022 B1a  0.971971965 -0.60986955 #> 23  S023 B1a -0.258814440  2.29790492 #> 24  S024 B1a  0.127944174 -0.44835963 #> 25  S025 B1a  1.148697835 -1.38882232 #> 26  S026 B1a  0.862292445  0.76945450 #> 27  S027 B1a  0.701835699  0.13358897 #> 28  S028 B1a -0.371732967  1.41156616 #> 29  S029 B1a -1.365350476 -0.51022333 #> 30  S030 B1a  0.358862873  0.50672594 #> 31  S031 B1a  0.410513719 -1.63429974 #> 32  S032 B1a -1.072139641 -0.15810781 #> 33  S033 B1a  0.592308096 -0.61292869 #> 34  S034 B1a -0.412926562 -1.48059124 #> 35  S035 B1a -0.063901735 -0.91699208 #> 36  S036 B1a  1.198831214 -0.32916625 #> 37  S037 B1a  0.159483095 -0.58101014 #> 38  S038 B1a -0.549560740 -0.35041639 #> 39  S039 B1a -0.803664349  1.64040164 #> 40  S040 B1a -1.792135149  0.16078316 #> 41  S041 B1a  1.453604763  0.97036631 #> 42  S042 B1a -0.092411921  0.73173548 #> 43  S043 B1a  0.180167121  0.64328878 #> 44  S044 B1a -0.175804863 -1.13582498 #> 45  S045 B1a  1.723324846 -0.14347688 #> 46  S046 B1a  1.720380439  0.53520563 #> 47  S047 B1a -0.777915641 -0.54657947 #> 48  S048 B1a  0.057669426  0.46701460 #> 49  S049 B1a -2.528351143  0.40670717 #> 50  S050 B1a  1.243430810 -0.67638361 #> 51  S051 B1a -0.888610122 -0.40153906 #> 52  S052 B1a  0.051046236 -0.17939762 #> 53  S053 B1a  1.170497229  1.26705580 #> 54  S054 B1a  0.800243759  1.00754595 #> 55  S055 B1a -0.178551175 -1.07402918 #> 56  S056 B1a -0.001703933 -0.29619265 #> 57  S057 B1a -0.434113473 -0.70548892 #> 58  S058 B1a -0.461805108  0.71105579 #> 59  S059 B1a  1.469329518 -1.57997357 #> 60  S060 B1a -0.094084620 -1.03060686 #> 61  S061 B1a  0.307915553 -1.34795859 #> 62  S062 B1a  0.402651974  1.08980455 #> 63  S063 B1a -0.754958360 -1.73216746 #> 64  S064 B1a -1.188090651  0.20270235 #> 65  S065 B1a -0.234279840 -0.62115234 #> 66  S066 B1a  0.557353849 -1.23996203 #> 67  S067 B1a -0.098934951 -0.60604926 #> 68  S068 B1a  1.970121382 -0.99819752 #> 69  S069 B1a -0.255373293  2.24195812 #> 70  S070 B1a  1.141362356 -0.56493368 #> 71  S071 B1a  0.889714557  1.51265568 #> 72  S072 B1a -0.905738309  0.34914583 #> 73  S073 B1a -1.013787175 -0.76003777 #> 74  S074 B1a  1.212234123 -1.55802223 #> 75  S075 B1a  1.276390787 -0.48793968 #> 76  S076 B1a -0.333678922 -0.20371948 #> 77  S077 B1a -2.283988454  0.42225769 #> 78  S078 B1a -1.266865271  0.53595674 #> 79  S079 B1a -0.243031188 -0.95685837 #> 80  S080 B1a  1.017864359 -1.02130300 #> 81  S081 B1a  1.158520906 -0.95405666 #> 82  S082 B1a  0.897740297  0.17586437 #> 83  S083 B1a  0.580442770 -1.01698409 #> 84  S084 B1a  0.567893173  1.16046234 #> 85  S085 B1a  1.166083502  0.69909757 #> 86  S086 B1a  0.455963325 -0.48580335 #> 87  S087 B1a  0.138276081 -2.71198943 #> 88  S088 B1a -1.469600345 -0.44275899 #> 89  S089 B1a  0.620125356  0.55435326 #> 90  S090 B1a  0.752483307  1.10225358 #> 91  S091 B1a -0.308855489 -1.92736918 #> 92  S092 B1a -0.738451134 -0.88275409 #> 93  S093 B1a  0.088068441  0.40382151 #> 94  S094 B1a -0.970841448  0.54360067 #> 95  S095 B1a  0.266758282 -0.85833201 #> 96  S096 B1a -0.603746950  1.23361637 #> 97  S097 B1a -0.672658338 -0.34612093 #> 98  S098 B1a  0.211613075  0.91815148 #> 99  S099 B1a  2.761687514  0.66571940 #> 100 S100 B1a -0.528893447 -0.30290458 #> 101 S101 B1b -0.776800369  0.59712429 #> 102 S102 B1b  1.653624218  1.48038258 #> 103 S103 B1b  0.672738371 -0.84722569 #> 104 S104 B1b -1.486818758  0.58916714 #> 105 S105 B1b  0.665182244  1.43316681 #> 106 S106 B1b -0.919255728 -0.73197726 #> 107 S107 B1b  0.564437898  0.25959702 #> 108 S108 B1b  0.589388654 -0.40838372 #> 109 S109 B1b  0.599213118 -0.36390385 #> 110 S110 B1b  0.772055824  0.08990821 #> 111 S111 B1b -2.108187407 -0.52757714 #> 112 S112 B1b  1.084198814  0.17405066 #> 113 S113 B1b -0.241416575  0.10946244 #> 114 S114 B1b -1.834364125  0.11752380 #> 115 S115 B1b  0.394125038 -0.44332745 #> 116 S116 B1b -1.120235222 -0.30268772 #> 117 S117 B1b  0.849661315 -1.71820813 #> 118 S118 B1b -1.113825306  0.24275729 #> 119 S119 B1b -1.480620001 -0.12824851 #> 120 S120 B1b -0.368568799  1.32671198 #> 121 S121 B1b  0.665731277  0.52730383 #> 122 S122 B1b -0.646220370  1.47130853 #> 123 S123 B1b  0.717765432 -0.86358702 #> 124 S124 B1b  1.779657868  0.84777478 #> 125 S125 B1b  1.062317798  0.81370173 #> 126 S126 B1b  0.460478692 -0.29921523 #> 127 S127 B1b  0.541524829 -2.14114381 #> 128 S128 B1b -0.901614822 -3.24778796 #> 129 S129 B1b -0.219014708  0.60616590 #> 130 S130 B1b -0.927241921 -0.13801449 #> 131 S131 B1b  1.158945112  0.87382228 #> 132 S132 B1b -0.056598193 -0.95961755 #> 133 S133 B1b -0.367225248  0.20071100 #> 134 S134 B1b -0.856542974 -0.52299095 #> 135 S135 B1b  0.436203658 -1.62242025 #> 136 S136 B1b  1.000568268  0.29085740 #> 137 S137 B1b -1.787623121  0.05240718 #> 138 S138 B1b -0.267168470  0.55608820 #> 139 S139 B1b -0.101008798  0.17073508 #> 140 S140 B1b  0.878908685 -1.82746665 #> 141 S141 B1b  0.859956127  1.43779016 #> 142 S142 B1b  0.118316573  1.29456761 #> 143 S143 B1b  0.272304499 -0.60161239 #> 144 S144 B1b  1.935152287 -1.21076011 #> 145 S145 B1b  1.998594330 -0.79126984 #> 146 S146 B1b -0.529042555 -0.57572410 #> 147 S147 B1b -0.960477725 -1.26934309 #> 148 S148 B1b -1.205798323  0.64952001 #> 149 S149 B1b  1.722798478 -0.33947357 #> 150 S150 B1b -0.693264171  0.36665919 #> 151 S151 B1b -1.401667591 -0.75332348 #> 152 S152 B1b  0.074746242  0.63317931 #> 153 S153 B1b  0.977935593  0.27368876 #> 154 S154 B1b  1.852058652  1.28739039 #> 155 S155 B1b -0.280458375  0.18450025 #> 156 S156 B1b -0.344486349 -0.27576664 #> 157 S157 B1b  2.233905637  0.31019586 #> 158 S158 B1b -1.330132239 -1.07799279 #> 159 S159 B1b  0.894747153 -1.16151931 #> 160 S160 B1b -0.367494933 -0.31244379 #> 161 S161 B1b -0.044410989 -0.29555136 #> 162 S162 B1b  1.190036480 -0.62565146 #> 163 S163 B1b -1.018095384 -0.87167515 #> 164 S164 B1b -0.179739522  1.01576194 #> 165 S165 B1b -0.428513068  0.27009258 #> 166 S166 B1b -1.000217217  0.07680987 #> 167 S167 B1b  0.578564982 -0.61459138 #> 168 S168 B1b -1.707389630 -1.71560123 #> 169 S169 B1b  0.749092068  0.58587531 #> 170 S170 B1b -0.925324781 -0.24353727 #> 171 S171 B1b  0.244920160 -0.59797854 #> 172 S172 B1b -0.649912557 -0.33367381 #> 173 S173 B1b -0.754997680 -0.41556628 #> 174 S174 B1b -0.630150366 -1.34901339 #> 175 S175 B1b  0.389926736 -1.44303650 #> 176 S176 B1b  0.943820405  0.08439574 #> 177 S177 B1b  1.246419766  0.49972085 #> 178 S178 B1b -0.108657707 -0.91766800 #> 179 S179 B1b  0.298520964 -0.01408452 #> 180 S180 B1b -0.804102279  0.45237535 #> 181 S181 B1b  0.723656939 -0.10481785 #> 182 S182 B1b -0.697715312  1.47508118 #> 183 S183 B1b -0.404622725 -0.70941655 #> 184 S184 B1b  1.184508702 -0.28916828 #> 185 S185 B1b  2.302304091 -0.70055397 #> 186 S186 B1b  1.915927178 -0.64659125 #> 187 S187 B1b  0.312893699  0.13203764 #> 188 S188 B1b -0.274574521  0.70271522 #> 189 S189 B1b  1.071247423 -0.30461461 #> 190 S190 B1b  1.249437790  1.03260476 #> 191 S191 B1b  0.369386999 -1.21531690 #> 192 S192 B1b  0.022942673  1.53240569 #> 193 S193 B1b  0.632294043  0.18551096 #> 194 S194 B1b -1.870539000  0.80223878 #> 195 S195 B1b  1.152051981  0.74952520 #> 196 S196 B1b -2.086103514 -0.64717589 #> 197 S197 B1b -0.746585687 -0.95204020 #> 198 S198 B1b -0.810879779 -0.26611643 #> 199 S199 B1b  1.488703193  1.09338924 #> 200 S200 B1b -0.110661612 -0.76382049"},{"path":"https://debruine.github.io/faux/dev/reference/make_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Make ID — make_id","title":"Make ID — make_id","text":"Make IDs fixed length prefix (e.g., S001, S002, ..., S100).","code":""},{"path":"https://debruine.github.io/faux/dev/reference/make_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make ID — make_id","text":"","code":"make_id(n = 100, prefix = \"S\", digits = 0, suffix = \"\")"},{"path":"https://debruine.github.io/faux/dev/reference/make_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make ID — make_id","text":"n number IDs generate (vector numbers) prefix prefix number (default \"S\") digits number digits use numeric part. used larger largest number digits n. suffix suffix number (default \"\")","code":""},{"path":"https://debruine.github.io/faux/dev/reference/make_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make ID — make_id","text":"vector IDs","code":""},{"path":"https://debruine.github.io/faux/dev/reference/make_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make ID — make_id","text":"","code":"make_id(20, \"SUBJECT_\") #>  [1] \"SUBJECT_01\" \"SUBJECT_02\" \"SUBJECT_03\" \"SUBJECT_04\" \"SUBJECT_05\" #>  [6] \"SUBJECT_06\" \"SUBJECT_07\" \"SUBJECT_08\" \"SUBJECT_09\" \"SUBJECT_10\" #> [11] \"SUBJECT_11\" \"SUBJECT_12\" \"SUBJECT_13\" \"SUBJECT_14\" \"SUBJECT_15\" #> [16] \"SUBJECT_16\" \"SUBJECT_17\" \"SUBJECT_18\" \"SUBJECT_19\" \"SUBJECT_20\" make_id(10:30, digits = 3) #>  [1] \"S010\" \"S011\" \"S012\" \"S013\" \"S014\" \"S015\" \"S016\" \"S017\" \"S018\" \"S019\" #> [11] \"S020\" \"S021\" \"S022\" \"S023\" \"S024\" \"S025\" \"S026\" \"S027\" \"S028\" \"S029\" #> [21] \"S030\""},{"path":"https://debruine.github.io/faux/dev/reference/message.html","id":null,"dir":"Reference","previous_headings":"","what":"Less scary green messages — message","title":"Less scary green messages — message","text":"Less scary green messages","code":""},{"path":"https://debruine.github.io/faux/dev/reference/message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Less scary green messages — message","text":"","code":"message(..., domain = NULL, appendLF = TRUE)"},{"path":"https://debruine.github.io/faux/dev/reference/message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Less scary green messages — message","text":"... message components (see message) domain (see message) appendLF append new line? (see message)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Less scary green messages — message","text":"TRUE","code":""},{"path":"https://debruine.github.io/faux/dev/reference/messy.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate missing data — messy","title":"Simulate missing data — messy","text":"Insert NA another replacement value proportion specified  columns simulate missing data.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/messy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate missing data — messy","text":"","code":"messy(data, prop = 0, ..., replace = NA)"},{"path":"https://debruine.github.io/faux/dev/reference/messy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate missing data — messy","text":"data tbl prop proportion data mess ... columns mess (vector column names numbers) replace replacement value (defaults NA)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/messy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate missing data — messy","text":"messed table","code":""},{"path":"https://debruine.github.io/faux/dev/reference/messy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate missing data — messy","text":"","code":"messy(iris, 0.1, \"Species\", replace = \"NO SPECIES\") #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2 NO SPECIES #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1 NO SPECIES #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4 NO SPECIES #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2 NO SPECIES #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2 NO SPECIES #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 NO SPECIES #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 NO SPECIES #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 NO SPECIES #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 NO SPECIES #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 NO SPECIES #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8 NO SPECIES #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3 NO SPECIES #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8 NO SPECIES #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8 NO SPECIES #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 143          5.8         2.7          5.1         1.9  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9 NO SPECIES #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica messy(iris, 0.5, 1:4) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5           NA         0.2     setosa #> 2            4.9          NA          1.4          NA     setosa #> 3             NA         3.2           NA          NA     setosa #> 4            4.6         3.1           NA         0.2     setosa #> 5            5.0         3.6           NA         0.2     setosa #> 6             NA          NA           NA          NA     setosa #> 7             NA          NA           NA         0.3     setosa #> 8             NA         3.4          1.5         0.2     setosa #> 9            4.4         2.9           NA          NA     setosa #> 10            NA          NA           NA          NA     setosa #> 11            NA         3.7          1.5          NA     setosa #> 12           4.8          NA           NA          NA     setosa #> 13            NA         3.0          1.4         0.1     setosa #> 14            NA         3.0          1.1         0.1     setosa #> 15           5.8          NA           NA         0.2     setosa #> 16           5.7         4.4           NA         0.4     setosa #> 17            NA         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19            NA          NA           NA         0.3     setosa #> 20            NA          NA          1.5         0.3     setosa #> 21            NA         3.4          1.7         0.2     setosa #> 22            NA         3.7          1.5          NA     setosa #> 23            NA         3.6           NA          NA     setosa #> 24            NA          NA           NA         0.5     setosa #> 25            NA          NA           NA          NA     setosa #> 26            NA          NA          1.6          NA     setosa #> 27           5.0          NA           NA          NA     setosa #> 28           5.2         3.5          1.5          NA     setosa #> 29           5.2          NA           NA         0.2     setosa #> 30           4.7          NA          1.6         0.2     setosa #> 31           4.8          NA           NA         0.2     setosa #> 32           5.4         3.4           NA          NA     setosa #> 33           5.2          NA           NA         0.1     setosa #> 34           5.5          NA          1.4          NA     setosa #> 35           4.9         3.1          1.5          NA     setosa #> 36            NA         3.2          1.2          NA     setosa #> 37           5.5          NA          1.3          NA     setosa #> 38            NA          NA          1.4         0.1     setosa #> 39           4.4         3.0          1.3          NA     setosa #> 40            NA          NA          1.5         0.2     setosa #> 41           5.0         3.5           NA          NA     setosa #> 42            NA         2.3           NA          NA     setosa #> 43           4.4          NA          1.3         0.2     setosa #> 44           5.0         3.5           NA          NA     setosa #> 45            NA          NA          1.9          NA     setosa #> 46           4.8         3.0          1.4          NA     setosa #> 47           5.1          NA          1.6         0.2     setosa #> 48            NA          NA          1.4          NA     setosa #> 49            NA         3.7           NA          NA     setosa #> 50           5.0         3.3           NA          NA     setosa #> 51           7.0          NA          4.7         1.4 versicolor #> 52            NA          NA          4.5         1.5 versicolor #> 53           6.9         3.1           NA         1.5 versicolor #> 54           5.5         2.3           NA         1.3 versicolor #> 55           6.5         2.8           NA         1.5 versicolor #> 56           5.7          NA           NA         1.3 versicolor #> 57           6.3          NA           NA          NA versicolor #> 58            NA          NA           NA         1.0 versicolor #> 59            NA         2.9          4.6          NA versicolor #> 60            NA         2.7           NA         1.4 versicolor #> 61            NA          NA          3.5          NA versicolor #> 62            NA          NA          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64            NA          NA           NA         1.4 versicolor #> 65            NA          NA           NA          NA versicolor #> 66            NA          NA           NA          NA versicolor #> 67            NA          NA          4.5         1.5 versicolor #> 68           5.8          NA           NA          NA versicolor #> 69            NA          NA          4.5         1.5 versicolor #> 70            NA          NA          3.9          NA versicolor #> 71            NA         3.2           NA         1.8 versicolor #> 72           6.1          NA          4.0         1.3 versicolor #> 73           6.3          NA           NA         1.5 versicolor #> 74           6.1         2.8           NA          NA versicolor #> 75            NA          NA           NA          NA versicolor #> 76           6.6         3.0           NA         1.4 versicolor #> 77            NA          NA          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79            NA          NA           NA          NA versicolor #> 80           5.7         2.6           NA          NA versicolor #> 81            NA         2.4          3.8         1.1 versicolor #> 82            NA          NA          3.7          NA versicolor #> 83           5.8          NA           NA         1.2 versicolor #> 84           6.0          NA          5.1          NA versicolor #> 85            NA         3.0           NA          NA versicolor #> 86            NA         3.4           NA          NA versicolor #> 87            NA          NA           NA         1.5 versicolor #> 88            NA          NA           NA         1.3 versicolor #> 89           5.6          NA           NA         1.3 versicolor #> 90           5.5         2.5          4.0          NA versicolor #> 91            NA          NA           NA         1.2 versicolor #> 92            NA         3.0          4.6         1.4 versicolor #> 93            NA         2.6           NA         1.2 versicolor #> 94            NA          NA           NA         1.0 versicolor #> 95           5.6          NA          4.2          NA versicolor #> 96           5.7         3.0           NA         1.2 versicolor #> 97            NA         2.9           NA          NA versicolor #> 98            NA          NA           NA          NA versicolor #> 99            NA         2.5          3.0         1.1 versicolor #> 100           NA         2.8           NA         1.3 versicolor #> 101          6.3          NA          6.0          NA  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103           NA          NA           NA          NA  virginica #> 104          6.3         2.9           NA          NA  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106           NA         3.0          6.6         2.1  virginica #> 107          4.9          NA          4.5          NA  virginica #> 108          7.3          NA           NA          NA  virginica #> 109          6.7         2.5          5.8          NA  virginica #> 110          7.2         3.6           NA          NA  virginica #> 111          6.5          NA          5.1         2.0  virginica #> 112           NA         2.7           NA          NA  virginica #> 113          6.8         3.0          5.5          NA  virginica #> 114          5.7         2.5          5.0          NA  virginica #> 115           NA          NA          5.1          NA  virginica #> 116           NA          NA          5.3          NA  virginica #> 117           NA         3.0          5.5         1.8  virginica #> 118           NA         3.8          6.7         2.2  virginica #> 119          7.7         2.6           NA         2.3  virginica #> 120          6.0          NA           NA          NA  virginica #> 121          6.9          NA          5.7          NA  virginica #> 122           NA         2.8          4.9          NA  virginica #> 123          7.7          NA           NA          NA  virginica #> 124           NA         2.7          4.9          NA  virginica #> 125           NA          NA           NA          NA  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127           NA          NA          4.8         1.8  virginica #> 128          6.1          NA          4.9          NA  virginica #> 129          6.4         2.8           NA         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4          NA          6.1         1.9  virginica #> 132           NA         3.8          6.4          NA  virginica #> 133           NA          NA           NA          NA  virginica #> 134           NA         2.8           NA         1.5  virginica #> 135          6.1          NA          5.6         1.4  virginica #> 136          7.7         3.0           NA         2.3  virginica #> 137           NA         3.4           NA          NA  virginica #> 138          6.4          NA          5.5         1.8  virginica #> 139           NA          NA          4.8          NA  virginica #> 140           NA         3.1           NA          NA  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142           NA         3.1           NA          NA  virginica #> 143          5.8         2.7          5.1          NA  virginica #> 144           NA          NA          5.9          NA  virginica #> 145          6.7          NA           NA         2.5  virginica #> 146           NA          NA          5.2          NA  virginica #> 147           NA         2.5          5.0          NA  virginica #> 148          6.5         3.0           NA         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9          NA           NA         1.8  virginica"},{"path":"https://debruine.github.io/faux/dev/reference/nested_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Output a nested list in RMarkdown list format — nested_list","title":"Output a nested list in RMarkdown list format — nested_list","text":"Output nested list RMarkdown list format","code":""},{"path":"https://debruine.github.io/faux/dev/reference/nested_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output a nested list in RMarkdown list format — nested_list","text":"","code":"nested_list(x, pre = \"\", quote = \"\")"},{"path":"https://debruine.github.io/faux/dev/reference/nested_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output a nested list in RMarkdown list format — nested_list","text":"x list pre Text prefix line (e.g., want lines indented 4 spaces start, use \"    \") quote Text quote values (e.g., use \"`\" make sure values parsed markdown","code":""},{"path":"https://debruine.github.io/faux/dev/reference/nested_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output a nested list in RMarkdown list format — nested_list","text":"character string","code":""},{"path":"https://debruine.github.io/faux/dev/reference/nested_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output a nested list in RMarkdown list format — nested_list","text":"","code":"x <- list(   a = list(a1 = \"Named\", a2 = \"List\"),   b = list(\"Unnamed\", \"List\"),   c = c(c1 = \"Named\", c2 = \"Vector\"),   d = c(\"Unnamed\", \"Vector\"),   e = list(e1 = list(\"A\", \"B\", \"C\"),            e2 = list(a = \"A\", b = \"B\"),            e3 = c(\"A\", \"B\", \"C\"),            e4 = 100),   f = \"single item vector\",   g = list() ) nested_list(x)  #> * a:  #>     * a1: Named #>     * a2: List #> * b:  #>     1. Unnamed #>     2. List #> * c:  #>     * c1: Named #>     * c2: Vector #> * d:  #>     1. Unnamed #>     2. Vector #> * e:  #>     * e1:  #>         1. A #>         2. B #>         3. C #>     * e2:  #>         * a: A #>         * b: B #>     * e3:  #>         1. A #>         2. B #>         3. C #>     * e4: 100 #> * f: single item vector #> * g: {empty}"},{"path":"https://debruine.github.io/faux/dev/reference/norm2beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert normal to beta — norm2beta","title":"Convert normal to beta — norm2beta","text":"Convert normal beta","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert normal to beta — norm2beta","text":"","code":"norm2beta(x, shape1, shape2, mu = mean(x), sd = stats::sd(x), ...)"},{"path":"https://debruine.github.io/faux/dev/reference/norm2beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert normal to beta — norm2beta","text":"x normally distributed vector shape1, shape2 non-negative parameters distribution return mu mean x (calculated x given) sd SD x (calculated x given) ... arguments pass qbeta (e.g., ncp)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert normal to beta — norm2beta","text":"vector beta distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2beta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert normal to beta — norm2beta","text":"","code":"x <- rnorm(10000) y <- norm2beta(x, 1, 3) g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")"},{"path":"https://debruine.github.io/faux/dev/reference/norm2binom.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert normal to binomial — norm2binom","title":"Convert normal to binomial — norm2binom","text":"Convert normal binomial","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2binom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert normal to binomial — norm2binom","text":"","code":"norm2binom(x, size = 1, prob = 0.5, mu = mean(x), sd = stats::sd(x))"},{"path":"https://debruine.github.io/faux/dev/reference/norm2binom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert normal to binomial — norm2binom","text":"x normally distributed vector size number trials (0 ) prob probability success trial (0 1) mu mean x (calculated x given) sd SD x (calculated x given)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2binom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert normal to binomial — norm2binom","text":"vector binomial distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2binom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert normal to binomial — norm2binom","text":"","code":"x <- rnorm(10000) y <- norm2binom(x) g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")"},{"path":"https://debruine.github.io/faux/dev/reference/norm2gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert normal to gamma — norm2gamma","title":"Convert normal to gamma — norm2gamma","text":"Convert normal gamma","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert normal to gamma — norm2gamma","text":"","code":"norm2gamma(x, shape, rate = 1, scale = 1/rate, mu = mean(x), sd = stats::sd(x))"},{"path":"https://debruine.github.io/faux/dev/reference/norm2gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert normal to gamma — norm2gamma","text":"x normally distributed vector shape gamma distribution parameter (must positive) rate alternative way specify scale scale gamma distribution parameter (must positive) mu mean x (calculated x given) sd SD x (calculated x given)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert normal to gamma — norm2gamma","text":"vector gamma distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2gamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert normal to gamma — norm2gamma","text":"","code":"x <- rnorm(10000) y <- norm2gamma(x, shape = 2) g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")"},{"path":"https://debruine.github.io/faux/dev/reference/norm2likert.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert normal to likert — norm2likert","title":"Convert normal to likert — norm2likert","text":"Convert normal likert","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2likert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert normal to likert — norm2likert","text":"","code":"norm2likert(x, prob, labels = names(prob), mu = mean(x), sd = stats::sd(x))"},{"path":"https://debruine.github.io/faux/dev/reference/norm2likert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert normal to likert — norm2likert","text":"x normally distributed vector prob vector probabilities counts; named, output factor labels vector values, defaults names(prob) 1:length(prob), numeric, output numeric mu mean x (calculated x given) sd SD x (calculated x given)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2likert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert normal to likert — norm2likert","text":"vector specified distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2likert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert normal to likert — norm2likert","text":"","code":"x <- rnorm(10000) y <- norm2likert(x, c(.1, .2, .35, .2, .1, .05)) g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")  y <- norm2likert(x, c(40, 30, 20, 10)) g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")  y <- norm2likert(x, c(lower = .5, upper = .5)) g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\") #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: Removed 10000 rows containing non-finite values (`stat_bin()`)."},{"path":"https://debruine.github.io/faux/dev/reference/norm2norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert normal to normal — norm2norm","title":"Convert normal to normal — norm2norm","text":"Convert normal distribution normal (gaussian) distribution specified mu sd","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert normal to normal — norm2norm","text":"","code":"norm2norm(x, mu = 0, sd = 1, x_mu = mean(x), x_sd = stats::sd(x))"},{"path":"https://debruine.github.io/faux/dev/reference/norm2norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert normal to normal — norm2norm","text":"x uniformly distributed vector mu mean normal distribution return sd SD normal distribution return x_mu mean x (calculated x given) x_sd SD x (calculated x given)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert normal to normal — norm2norm","text":"vector gaussian distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert normal to normal — norm2norm","text":"","code":"x <- rnorm(10000) y <- norm2norm(x, 100, 10) g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")"},{"path":"https://debruine.github.io/faux/dev/reference/norm2pois.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert normal to poisson — norm2pois","title":"Convert normal to poisson — norm2pois","text":"Convert normal poisson","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert normal to poisson — norm2pois","text":"","code":"norm2pois(x, lambda, mu = mean(x), sd = stats::sd(x))"},{"path":"https://debruine.github.io/faux/dev/reference/norm2pois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert normal to poisson — norm2pois","text":"x normally distributed vector lambda mean distribution return mu mean x (calculated x given) sd SD x (calculated x given)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2pois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert normal to poisson — norm2pois","text":"vector poisson distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2pois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert normal to poisson — norm2pois","text":"","code":"x <- rnorm(10000) y <- norm2pois(x, 2) g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")"},{"path":"https://debruine.github.io/faux/dev/reference/norm2trunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert normal to truncated normal — norm2trunc","title":"Convert normal to truncated normal — norm2trunc","text":"Convert normal (gaussian) distribution truncated normal distribution specified minimum maximum","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2trunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert normal to truncated normal — norm2trunc","text":"","code":"norm2trunc(   x,   min = -Inf,   max = Inf,   mu = mean(x),   sd = stats::sd(x),   x_mu = mean(x),   x_sd = stats::sd(x) )"},{"path":"https://debruine.github.io/faux/dev/reference/norm2trunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert normal to truncated normal — norm2trunc","text":"x normally distributed vector min minimum truncated distribution return max maximum truncated distribution return mu mean distribution return (calculated x given) sd SD distribution return (calculated x given) x_mu mean x (calculated x given) x_sd SD x (calculated x given)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2trunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert normal to truncated normal — norm2trunc","text":"vector uniform distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2trunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert normal to truncated normal — norm2trunc","text":"","code":"x <- rnorm(10000) y <- norm2trunc(x, 1, 7, 3.5, 2) g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")"},{"path":"https://debruine.github.io/faux/dev/reference/norm2unif.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert normal to uniform — norm2unif","title":"Convert normal to uniform — norm2unif","text":"Convert normal (gaussian) distribution uniform distribution specified minimum maximum","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2unif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert normal to uniform — norm2unif","text":"","code":"norm2unif(x, min = 0, max = 1, mu = mean(x), sd = stats::sd(x))"},{"path":"https://debruine.github.io/faux/dev/reference/norm2unif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert normal to uniform — norm2unif","text":"x normally distributed vector min minimum uniform distribution return max maximum uniform distribution return mu mean x (calculated x given) sd SD x (calculated x given)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2unif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert normal to uniform — norm2unif","text":"vector uniform distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/norm2unif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert normal to uniform — norm2unif","text":"","code":"x <- rnorm(10000) y <- norm2unif(x) g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")"},{"path":"https://debruine.github.io/faux/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See dplyr::%>% details.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://debruine.github.io/faux/dev/reference/plikert.html","id":null,"dir":"Reference","previous_headings":"","what":"Likert distribution function — plikert","title":"Likert distribution function — plikert","text":"Likert distribution function","code":""},{"path":"https://debruine.github.io/faux/dev/reference/plikert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likert distribution function — plikert","text":"","code":"plikert(q, prob, labels = names(prob))"},{"path":"https://debruine.github.io/faux/dev/reference/plikert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likert distribution function — plikert","text":"q vector quantiles prob vector probabilities counts; named, output factor labels vector values, defaults names(prob) 1:length(prob), numeric, output numeric","code":""},{"path":"https://debruine.github.io/faux/dev/reference/plikert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likert distribution function — plikert","text":"vector densities","code":""},{"path":"https://debruine.github.io/faux/dev/reference/plikert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likert distribution function — plikert","text":"","code":"q <- 1:5 prob <- c(.1, .2, .4, .2, .1) plikert(q, prob) #>   1   2   3   4   5  #> 0.1 0.3 0.7 0.9 1.0   q <- c(\"A\", \"C\", \"B\", \"B\") prob <- c(A = 10, B = 20, C = 30) plikert(q, prob) #>         A         C         B         B  #> 0.1666667 1.0000000 0.5000000 0.5000000   # specify labels if prob not named and not 1:length(prob) labels <- -2:2  q <- labels prob <- rep(1, length(labels)) # uniform probability plikert(q, prob, labels) #>  -2  -1   0   1   2  #> 0.2 0.4 0.6 0.8 1.0"},{"path":"https://debruine.github.io/faux/dev/reference/plot_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot design — plot_design","title":"Plot design — plot_design","text":"Plots specified within design. See vignette(\"plots\", package = \"faux\") examples details.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/plot_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot design — plot_design","text":"","code":"plot_design(x, ..., geoms = NULL, palette = \"Dark2\", labeller = \"label_value\")  # S3 method for design plot(x, ...)  # S3 method for faux plot(x, ...)"},{"path":"https://debruine.github.io/faux/dev/reference/plot_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot design — plot_design","text":"x list design parameters created check_design() data tbl (long format) ... list factor names determine visualisation (see vignette) order color, x, facet row(s), facet col(s) geoms list ggplot2 geoms display, defaults \"pointrangeSD\" (mean ± 1SD) designs c(\"violin\", \"box\") data, options : pointrangeSD, pointrangeSE, violin, box, jitter palette brewer palette, defaults \"Dark2\" (see ggplot2::scale_colour_brewer) labeller label facets (see ggplot2::facet_grid). \"label_value\" used default.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/plot_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot design — plot_design","text":"plot","code":""},{"path":"https://debruine.github.io/faux/dev/reference/plot_design.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plot design — plot_design","text":"plot(design): Plotting faux design list plot(faux): Plotting faux data table","code":""},{"path":"https://debruine.github.io/faux/dev/reference/plot_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot design — plot_design","text":"","code":"within <- list(time = c(\"day\", \"night\")) between <- list(pet = c(\"dog\", \"cat\")) des <- check_design(within, between, plot = FALSE) plot_design(des)   data <- sim_design(within, between, plot = FALSE) plot_design(data)"},{"path":"https://debruine.github.io/faux/dev/reference/pos_def_limits.html","id":null,"dir":"Reference","previous_headings":"","what":"Limits on Missing Value for Positive Definite Matrix — pos_def_limits","title":"Limits on Missing Value for Positive Definite Matrix — pos_def_limits","text":"pos_def_limits returns min max possible values positive definite matrix specified missing value","code":""},{"path":"https://debruine.github.io/faux/dev/reference/pos_def_limits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limits on Missing Value for Positive Definite Matrix — pos_def_limits","text":"","code":"pos_def_limits(..., steps = 0.01, tol = 1e-08)"},{"path":"https://debruine.github.io/faux/dev/reference/pos_def_limits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limits on Missing Value for Positive Definite Matrix — pos_def_limits","text":"... correlations among variables vars\\*(vars-1)/2 vector steps tolerance min max values tol tolerance comparing eigenvalues 0","code":""},{"path":"https://debruine.github.io/faux/dev/reference/pos_def_limits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limits on Missing Value for Positive Definite Matrix — pos_def_limits","text":"dataframe min max values","code":""},{"path":"https://debruine.github.io/faux/dev/reference/pos_def_limits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Limits on Missing Value for Positive Definite Matrix — pos_def_limits","text":"","code":"pos_def_limits(.8, .2, NA) #> $min #> [1] -0.42 #>  #> $max #> [1] 0.74 #>"},{"path":"https://debruine.github.io/faux/dev/reference/print.design.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Design List — print.design","title":"Print Design List — print.design","text":"Print Design List","code":""},{"path":"https://debruine.github.io/faux/dev/reference/print.design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Design List — print.design","text":"","code":"# S3 method for design print(x, ...)"},{"path":"https://debruine.github.io/faux/dev/reference/print.design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Design List — print.design","text":"x design list ... Additional parameters print","code":""},{"path":"https://debruine.github.io/faux/dev/reference/print.nested_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Nested List — print.nested_list","title":"Print Nested List — print.nested_list","text":"Print Nested List","code":""},{"path":"https://debruine.github.io/faux/dev/reference/print.nested_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Nested List — print.nested_list","text":"","code":"# S3 method for nested_list print(x, ...)"},{"path":"https://debruine.github.io/faux/dev/reference/print.nested_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Nested List — print.nested_list","text":"x nested_list string ... Additional parameters print","code":""},{"path":"https://debruine.github.io/faux/dev/reference/print.psychds_codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Codebook Object — print.psychds_codebook","title":"Print Codebook Object — print.psychds_codebook","text":"Print Codebook Object","code":""},{"path":"https://debruine.github.io/faux/dev/reference/print.psychds_codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Codebook Object — print.psychds_codebook","text":"","code":"# S3 method for psychds_codebook print(x, ...)"},{"path":"https://debruine.github.io/faux/dev/reference/print.psychds_codebook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Codebook Object — print.psychds_codebook","text":"x psychds_codebook list ... Additional parameters print","code":""},{"path":"https://debruine.github.io/faux/dev/reference/qlikert.html","id":null,"dir":"Reference","previous_headings":"","what":"Likert quantile function — qlikert","title":"Likert quantile function — qlikert","text":"Likert quantile function","code":""},{"path":"https://debruine.github.io/faux/dev/reference/qlikert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likert quantile function — qlikert","text":"","code":"qlikert(p, prob, labels = names(prob))"},{"path":"https://debruine.github.io/faux/dev/reference/qlikert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likert quantile function — qlikert","text":"p vector probabilities prob vector probabilities counts; named, output factor labels vector values, defaults names(prob) 1:length(prob), numeric, output numeric","code":""},{"path":"https://debruine.github.io/faux/dev/reference/qlikert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likert quantile function — qlikert","text":"vector quantiles","code":""},{"path":"https://debruine.github.io/faux/dev/reference/qlikert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likert quantile function — qlikert","text":"","code":"p <- seq(0, 1, .1) prob <- c(.1, .2, .4, .2, .1) qlikert(p, prob) #>  [1] 1 1 2 2 3 3 3 3 4 4 5  p <- seq(0, 1, .1) prob <- c(A = 10, B = 20, C = 30) qlikert(p, prob) #>  [1] A A B B B B C C C C C #> Levels: A B C  # specify labels if prob not named and not 1:length(prob) labels <- -2:2  p <- seq(0, 1, .1) prob <- rep(1, length(labels)) # uniform probability qlikert(p, prob, labels) #>  [1] -2 -2 -2 -1 -1  0  0  1  1  2  2"},{"path":"https://debruine.github.io/faux/dev/reference/readline_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check readline input — readline_check","title":"Check readline input — readline_check","text":"Check readline input","code":""},{"path":"https://debruine.github.io/faux/dev/reference/readline_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check readline input — readline_check","text":"","code":"readline_check(   prompt,   type = c(\"numeric\", \"integer\", \"length\", \"grep\"),   min = -Inf,   max = Inf,   warning = NULL,   default = NULL,   ... )"},{"path":"https://debruine.github.io/faux/dev/reference/readline_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check readline input — readline_check","text":"prompt prompt readline type type check perform, one  c(\"numeric\", \"integer\", \"length\", \"grep\") min minimum value max maximum value warning optional custom warning message default default option return entry blank, NULL allows default, default value displayed text [default] ... arguments pass grep","code":""},{"path":"https://debruine.github.io/faux/dev/reference/readline_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check readline input — readline_check","text":"validated result readline","code":""},{"path":"https://debruine.github.io/faux/dev/reference/readline_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check readline input — readline_check","text":"","code":"if(interactive()){ readline_check(\"Type a number: \", \"numeric\") readline_check(\"Type two characters: \", \"length\", min = 2, max = 2) readline_check(\"Type at least 3 characters: \", \"length\", min = 3) readline_check(\"Type no more than 4 characters: \", \"length\", max = 44) readline_check(\"Type a letter and a number: \", \"grep\", pattern = \"^[a-zA-Z]\\\\d$\") }"},{"path":"https://debruine.github.io/faux/dev/reference/rlikert.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Likert distribution — rlikert","title":"Random Likert distribution — rlikert","text":"Random Likert distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/rlikert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Likert distribution — rlikert","text":"","code":"rlikert(n, prob, labels = names(prob))"},{"path":"https://debruine.github.io/faux/dev/reference/rlikert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Likert distribution — rlikert","text":"n number observations prob vector probabilities counts; named, output factor labels vector values, defaults names(prob) 1:length(prob), numeric, output numeric","code":""},{"path":"https://debruine.github.io/faux/dev/reference/rlikert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Likert distribution — rlikert","text":"vector sampled likert distribution specified parameters","code":""},{"path":"https://debruine.github.io/faux/dev/reference/rlikert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Likert distribution — rlikert","text":"","code":"# no names or labels returns integer vector of values 1:length(prob) prob <- c(.1, .2, .4, .2, .1) rlikert(10, prob) #>  [1] 5 2 4 3 2 4 2 2 4 3  # named prob returns factor  prob <- c(A = 10, B = 20, C = 30) rlikert(10, prob) #>  [1] A C C B C A C B B C #> Levels: A B C  # specify labels if prob not named and not 1:length(prob) labels <- -2:2  prob <- rep(1, length(labels)) # uniform probability rlikert(10, prob, labels) #>  [1]  0 -2  2 -2 -2 -2 -2  2 -1 -1"},{"path":"https://debruine.github.io/faux/dev/reference/rmulti.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple correlated distributions — rmulti","title":"Multiple correlated distributions — rmulti","text":"Multiple correlated distributions","code":""},{"path":"https://debruine.github.io/faux/dev/reference/rmulti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple correlated distributions — rmulti","text":"","code":"rmulti(   n = 100,   dist = c(A = \"norm\", B = \"norm\"),   params = list(),   r = 0,   empirical = FALSE,   as.matrix = FALSE )"},{"path":"https://debruine.github.io/faux/dev/reference/rmulti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple correlated distributions — rmulti","text":"n number samples required dist named vector distributions variable params list lists arguments pass distribution function r correlations among variables (can single number, vars\\*vars matrix, vars\\*vars vector, vars\\*(vars-1)/2 vector) empirical logical. true, params specify sample parameters, population parameters .matrix logical. true, returns matrix","code":""},{"path":"https://debruine.github.io/faux/dev/reference/rmulti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple correlated distributions — rmulti","text":"tbl vars vectors","code":""},{"path":"https://debruine.github.io/faux/dev/reference/rmulti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple correlated distributions — rmulti","text":"","code":"dist <- c(A = \"norm\",            B = \"pois\",            C = \"binom\") params <- list(A = list(mean = 100, sd = 10),                B = list(lambda = 5),                C = list(size = 10, prob = 0.5)) x <- rmulti(100, dist, params, c(0.2, 0.4, 0.6), empirical = TRUE) get_params(x) #>     n var    A    B    C   mean    sd #> 1 100   A 1.00 0.20 0.42 100.00 10.00 #> 2 100   B 0.20 1.00 0.61   5.00  2.19 #> 3 100   C 0.42 0.61 1.00   4.96  1.54"},{"path":"https://debruine.github.io/faux/dev/reference/rnorm_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple correlated normal distributions — rnorm_multi","title":"Multiple correlated normal distributions — rnorm_multi","text":"Make normally distributed vectors specified relationships. See vignette(\"rnorm_multi\", package = \"faux\") details.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/rnorm_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple correlated normal distributions — rnorm_multi","text":"","code":"rnorm_multi(   n = 100,   vars = NULL,   mu = 0,   sd = 1,   r = 0,   varnames = NULL,   empirical = FALSE,   as.matrix = FALSE,   seed = NULL )"},{"path":"https://debruine.github.io/faux/dev/reference/rnorm_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple correlated normal distributions — rnorm_multi","text":"n number samples required vars number variables return mu vector giving means variables (numeric vector length 1 vars) sd standard deviations variables (numeric vector length 1 vars) r correlations among variables (can single number, vars\\*vars matrix, vars\\*vars vector, vars\\*(vars-1)/2 vector) varnames optional names variables (string vector length vars) defaults r matrix column names empirical logical. true, mu, sd r specify empirical population mean, sd covariance .matrix logical. true, returns matrix seed DEPRECATED use set.seed() instead running function","code":""},{"path":"https://debruine.github.io/faux/dev/reference/rnorm_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple correlated normal distributions — rnorm_multi","text":"tbl vars vectors","code":""},{"path":"https://debruine.github.io/faux/dev/reference/rnorm_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple correlated normal distributions — rnorm_multi","text":"","code":"# 4 10-item vectors each correlated r = .5 rnorm_multi(10, 4, r = 0.5) #>              X1         X2          X3         X4 #> 1  -0.815780066 -1.2351185 -0.40726533 -1.6746540 #> 2  -0.963176706  0.5643239 -0.07538908  1.1697940 #> 3  -1.785264990  0.2400259 -1.55855641 -1.2618257 #> 4  -2.680583102 -2.7197955 -2.32027558 -1.8531943 #> 5   0.771659601 -0.3030900  0.73508147 -0.5872710 #> 6  -0.507771241 -1.8094514  0.50592089 -0.4763213 #> 7   1.469498042 -0.1037821  1.22485031  0.8477937 #> 8  -0.165759340  0.8674088  0.64154726  0.5942794 #> 9  -0.007278901 -0.5067206 -0.49613358 -1.3637240 #> 10  0.597292365  0.3570845  0.66837550 -0.9823218  # set r with the upper right triangle b <- rnorm_multi(100, 3, c(0, .5, 1), 1,                   r = c(0.2, -0.5, 0.5),                   varnames=c(\"A\", \"B\", \"C\")) cor(b) #>            A         B          C #> A  1.0000000 0.2091250 -0.4688501 #> B  0.2091250 1.0000000  0.4498988 #> C -0.4688501 0.4498988  1.0000000  # set r with a correlation matrix and column names from mu names c <- rnorm_multi(   n = 100,    mu = c(A = 0, B = 0.5, C = 1),   r = c( 1,   0.2, -0.5,           0.2, 1,    0.5,          -0.5, 0.5,  1) ) cor(c) #>            A         B          C #> A  1.0000000 0.2142911 -0.5252217 #> B  0.2142911 1.0000000  0.4153675 #> C -0.5252217 0.4153675  1.0000000"},{"path":"https://debruine.github.io/faux/dev/reference/rnorm_pre.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a normal vector correlated to existing vectors — rnorm_pre","title":"Make a normal vector correlated to existing vectors — rnorm_pre","text":"rnorm_pre Produces random normally distributed vector specified correlation one existing vectors","code":""},{"path":"https://debruine.github.io/faux/dev/reference/rnorm_pre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a normal vector correlated to existing vectors — rnorm_pre","text":"","code":"rnorm_pre(x, mu = 0, sd = 1, r = 0, empirical = FALSE, threshold = 1e-12)"},{"path":"https://debruine.github.io/faux/dev/reference/rnorm_pre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a normal vector correlated to existing vectors — rnorm_pre","text":"x existing vector data table vectors mu desired mean returned vector sd desired SD returned vector r desired correlation(s) existing returned vectors empirical logical. true, mu, sd r specify empirical population mean, sd covariance threshold checking correlation matrix","code":""},{"path":"https://debruine.github.io/faux/dev/reference/rnorm_pre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a normal vector correlated to existing vectors — rnorm_pre","text":"vector","code":""},{"path":"https://debruine.github.io/faux/dev/reference/rnorm_pre.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a normal vector correlated to existing vectors — rnorm_pre","text":"","code":"v1 <- rnorm(10) v2 <- rnorm_pre(v1, 0, 1, 0.5) cor(v1, v2) #> [1] 0.3370717  x <- rnorm_multi(50, 2, .5) x$y <- rnorm_pre(x, r = c(0.5, 0.25)) cor(x) #>           X1        X2        y #> X1 1.0000000 0.2271942 0.572903 #> X2 0.2271942 1.0000000 0.394464 #> y  0.5729030 0.3944640 1.000000"},{"path":"https://debruine.github.io/faux/dev/reference/sample_from_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Parameters from Population Parameters — sample_from_pop","title":"Sample Parameters from Population Parameters — sample_from_pop","text":"Sample Parameters Population Parameters","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sample_from_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Parameters from Population Parameters — sample_from_pop","text":"","code":"sample_from_pop(n = 100, mu = 0, sd = 1, r = 0)"},{"path":"https://debruine.github.io/faux/dev/reference/sample_from_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Parameters from Population Parameters — sample_from_pop","text":"n sample size mu population mean sd population SD r population r","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sample_from_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Parameters from Population Parameters — sample_from_pop","text":"list sample parameters (mu, sd, r)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sample_from_pop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Parameters from Population Parameters — sample_from_pop","text":"","code":"sample_from_pop(10) #> $mu #> [1] -0.2277026 #>  #> $sd #> [1] 1.350315 #>  #> $r #> [1] -0.0963461 #>"},{"path":"https://debruine.github.io/faux/dev/reference/set_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Set design — set_design","title":"Set design — set_design","text":"Add design specification data table","code":""},{"path":"https://debruine.github.io/faux/dev/reference/set_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set design — set_design","text":"","code":"set_design(data, design)"},{"path":"https://debruine.github.io/faux/dev/reference/set_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set design — set_design","text":"data data table design design list","code":""},{"path":"https://debruine.github.io/faux/dev/reference/set_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set design — set_design","text":"data frame design attribute","code":""},{"path":"https://debruine.github.io/faux/dev/reference/set_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set design — set_design","text":"","code":"design <- check_design()  data <- data.frame(id = 1:100, y = rnorm(100)) %>%   set_design(design)"},{"path":"https://debruine.github.io/faux/dev/reference/sim_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data from design (internal) — sim_data","title":"Simulate data from design (internal) — sim_data","text":"Simulate data design (internal)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data from design (internal) — sim_data","text":"","code":"sim_data(   design,   empirical = FALSE,   long = FALSE,   rep = 1,   nested = TRUE,   seed = NULL )"},{"path":"https://debruine.github.io/faux/dev/reference/sim_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data from design (internal) — sim_data","text":"design list design parameters created check_design() empirical logical. true, mu, sd r specify empirical population mean, sd covariance long Whether returned tbl wide (default = FALSE) long (TRUE) format rep number data frames return (default 1); greater 1, returned data frame nested rep nested Whether nest data frames rep rep > 1 seed DEPRECATED use set.seed() instead running function","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data from design (internal) — sim_data","text":"tbl","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data from design — sim_design","title":"Simulate data from design — sim_design","text":"Generates data table specified within design. See vignette(\"sim_design\", package = \"faux\") examples details.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data from design — sim_design","text":"","code":"sim_design(   within = list(),   between = list(),   n = 100,   mu = 0,   sd = 1,   r = 0,   empirical = FALSE,   long = FALSE,   dv = list(y = \"value\"),   id = list(id = \"id\"),   vardesc = list(),   plot = faux_options(\"plot\"),   interactive = FALSE,   design = NULL,   rep = 1,   nested = TRUE,   seed = NULL,   sep = faux_options(\"sep\") )"},{"path":"https://debruine.github.io/faux/dev/reference/sim_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data from design — sim_design","text":"within list within-subject factors list -subject factors n number samples required mu means variables sd standard deviations variables r correlations among variables (can single number, full correlation matrix matrix vector, vector upper right triangle correlation matrix empirical logical. true, mu, sd r specify empirical population mean, sd covariance long Whether returned tbl wide (default = FALSE) long (TRUE) format dv name dv long plots (defaults y) id name id column (defaults id) vardesc list variable descriptions names within- -subject factors plot whether show plot design interactive whether run function interactively design design list including within, , n, mu, sd, r, dv, id, vardesc rep number data frames return (default 1); greater 1, returned data frame nested rep (nested = TRUE) nested Whether nest data frames rep rep > 1 seed DEPRECATED use set.seed() instead running function sep separator factor levels","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data from design — sim_design","text":"tbl","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an existing dataframe — sim_df","title":"Simulate an existing dataframe — sim_df","text":"Produces data table distributions correlations  existing data table returns numeric columns simulates numeric variables continuous normal distribution (now).","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an existing dataframe — sim_df","text":"","code":"sim_df(   data,   n = 100,   within = c(),   between = c(),   id = \"id\",   dv = \"value\",   empirical = FALSE,   long = FALSE,   seed = NULL,   missing = FALSE,   sep = faux_options(\"sep\") )"},{"path":"https://debruine.github.io/faux/dev/reference/sim_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an existing dataframe — sim_df","text":"data existing tbl n number samples return per group within list within-subject factor columns (long format) list -subject factor columns id names column(s) grouping observations dv name DV (value) column empirical returned data exact parameters? (versus sampled population parameters) long whether return data table long format seed DEPRECATED use set.seed() instead running function missing simulate missing data? sep separator factor levels","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an existing dataframe — sim_df","text":"tbl","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate an existing dataframe — sim_df","text":"See vignette(\"sim_df\", package = \"faux\") details.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate an existing dataframe — sim_df","text":"","code":"iris100 <- sim_df(iris, 100) iris_species <- sim_df(iris, 100, between = \"Species\")  # set the names of within factors and (the separator character)  # if you want to return a long version longdf <- sim_df(iris,                   between = \"Species\",                   within = c(\"type\", \"dim\"),                  sep = \".\",                  long = TRUE)                   # or if you are simulating data from a table in long format widedf <- sim_df(longdf,                   between = \"Species\",                   within = c(\"type\", \"dim\"),                  sep = \".\")"},{"path":"https://debruine.github.io/faux/dev/reference/sim_joint_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate category joint distribution — sim_joint_dist","title":"Simulate category joint distribution — sim_joint_dist","text":"function mainly used internally, simulating  missing data patterns, available case anyone finds useful.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_joint_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate category joint distribution — sim_joint_dist","text":"","code":"sim_joint_dist(data, ..., n = 100, empirical = FALSE)"},{"path":"https://debruine.github.io/faux/dev/reference/sim_joint_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate category joint distribution — sim_joint_dist","text":"data existing tbl ... columns calculate joint distribution , none chosen, columns 10 fewer unique values chosen n number total observations return empirical returned data exact distribution conditions? (versus sampled population distribution)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_joint_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate category joint distribution — sim_joint_dist","text":"data table","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_joint_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate category joint distribution — sim_joint_dist","text":"","code":"sim_joint_dist(ggplot2::diamonds, cut, color, n = 10) #> # A tibble: 10 × 2 #>    cut       color #>    <ord>     <ord> #>  1 Ideal     D     #>  2 Ideal     G     #>  3 Ideal     G     #>  4 Ideal     I     #>  5 Very Good H     #>  6 Premium   G     #>  7 Ideal     G     #>  8 Good      D     #>  9 Ideal     I     #> 10 Ideal     G"},{"path":"https://debruine.github.io/faux/dev/reference/sim_mixed_cc.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a cross-classified sample — sim_mixed_cc","title":"Generate a cross-classified sample — sim_mixed_cc","text":"Makes basic cross-classified design random intercepts subjects items. See vignette(\"sim_mixed\", package = \"faux\") examples details.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_mixed_cc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a cross-classified sample — sim_mixed_cc","text":"","code":"sim_mixed_cc(   sub_n = 100,   item_n = 20,   grand_i = 0,   sub_sd = 1,   item_sd = 1,   error_sd = 1,   empirical = FALSE,   seed = NULL )"},{"path":"https://debruine.github.io/faux/dev/reference/sim_mixed_cc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a cross-classified sample — sim_mixed_cc","text":"sub_n number subjects item_n number items grand_i grand intercept (overall mean) sub_sd SD subject random intercepts (sub_n-length named vector random intercepts subject) item_sd SD item random intercepts (item_n-length named vector random intercepts item) error_sd SD error term empirical returned data exact parameters? (versus sampled population parameters) seed DEPRECATED use set.seed() instead running function","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_mixed_cc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a cross-classified sample — sim_mixed_cc","text":"tbl","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_mixed_cc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a cross-classified sample — sim_mixed_cc","text":"","code":"sim_mixed_cc(10, 10) #>     sub_id item_id            y grand_i       sub_i     item_i         err #> 1      S01     I01 -1.409399619       0 -0.18902605 -1.0922544 -0.12811919 #> 15     S01     I02 -0.833687787       0 -0.18902605 -0.9874887  0.34282694 #> 29     S01     I03 -0.538930011       0 -0.18902605 -0.5440981  0.19419413 #> 31     S01     I04  1.523286569       0 -0.18902605  0.1692168  1.54309582 #> 44     S01     I05  0.055032990       0 -0.18902605 -0.5968080  0.84086707 #> 58     S01     I06 -0.277471494       0 -0.18902605  0.6353539 -0.72379930 #> 61     S01     I07  0.628653115       0 -0.18902605 -0.2653338  1.08301300 #> 73     S01     I08  1.020638461       0 -0.18902605  1.3963789 -0.18671441 #> 87     S01     I09 -1.331830999       0 -0.18902605 -0.7947550 -0.34804996 #> 91     S01     I10  0.430967192       0 -0.18902605 -1.1095781  1.72957133 #> 7      S02     I01 -3.237938821       0 -0.58729648 -1.0922544 -1.55838796 #> 17     S02     I02 -2.678845798       0 -0.58729648 -0.9874887 -1.10406064 #> 30     S02     I03 -0.954243407       0 -0.58729648 -0.5440981  0.17715116 #> 36     S02     I04 -0.473881065       0 -0.58729648  0.1692168 -0.05580138 #> 46     S02     I05 -0.460827678       0 -0.58729648 -0.5968080  0.72327683 #> 59     S02     I06  0.287956955       0 -0.58729648  0.6353539  0.23989958 #> 69     S02     I07 -1.793350935       0 -0.58729648 -0.2653338 -0.94072062 #> 75     S02     I08  1.108525741       0 -0.58729648  1.3963789  0.29944330 #> 88     S02     I09 -2.287170523       0 -0.58729648 -0.7947550 -0.90511905 #> 98     S02     I10 -2.029212917       0 -0.58729648 -1.1095781 -0.33233836 #> 4      S03     I01 -2.439553199       0 -1.65674757 -1.0922544  0.30944875 #> 18     S03     I02 -3.648070467       0 -1.65674757 -0.9874887 -1.00383422 #> 23     S03     I03 -2.446642235       0 -1.65674757 -0.5440981 -0.24579658 #> 33     S03     I04 -1.616151407       0 -1.65674757  0.1692168 -0.12862063 #> 47     S03     I05 -2.159483337       0 -1.65674757 -0.5968080  0.09407226 #> 60     S03     I06 -1.569371123       0 -1.65674757  0.6353539 -0.54797741 #> 62     S03     I07 -1.459497024       0 -1.65674757 -0.2653338  0.46258438 #> 76     S03     I08 -0.407908704       0 -1.65674757  1.3963789 -0.14754006 #> 89     S03     I09 -2.619350588       0 -1.65674757 -0.7947550 -0.16784803 #> 95     S03     I10 -1.424492344       0 -1.65674757 -1.1095781  1.34183331 #> 5      S04     I01 -1.358569192       0 -1.37707395 -1.0922544  1.11075913 #> 19     S04     I02 -4.278890333       0 -1.37707395 -0.9874887 -1.91432771 #> 21     S04     I03 -2.275216690       0 -1.37707395 -0.5440981 -0.35404466 #> 34     S04     I04 -0.344123960       0 -1.37707395  0.1692168  0.86373319 #> 48     S04     I05 -2.096498177       0 -1.37707395 -0.5968080 -0.12261620 #> 51     S04     I06 -0.371372474       0 -1.37707395  0.6353539  0.37034762 #> 63     S04     I07 -0.952250516       0 -1.37707395 -0.2653338  0.69015727 #> 77     S04     I08 -0.667643465       0 -1.37707395  1.3963789 -0.68694844 #> 90     S04     I09 -2.876732805       0 -1.37707395 -0.7947550 -0.70490387 #> 92     S04     I10 -3.823782415       0 -1.37707395 -1.1095781 -1.33713039 #> 2      S05     I01 -4.535894113       0 -1.80023932 -1.0922544 -1.64340041 #> 16     S05     I02 -3.532914165       0 -1.80023932 -0.9874887 -0.74518617 #> 22     S05     I03 -1.444935680       0 -1.80023932 -0.5440981  0.89940173 #> 35     S05     I04 -0.841633415       0 -1.80023932  0.1692168  0.78938911 #> 45     S05     I05 -3.515759916       0 -1.80023932 -0.5968080 -1.11871256 #> 52     S05     I06 -0.004341175       0 -1.80023932  0.6353539  1.16054429 #> 64     S05     I07 -1.549091327       0 -1.80023932 -0.2653338  0.51648183 #> 74     S05     I08 -1.237744642       0 -1.80023932  1.3963789 -0.83388424 #> 81     S05     I09 -4.442790371       0 -1.80023932 -0.7947550 -1.84779606 #> 93     S05     I10 -4.302704060       0 -1.80023932 -1.1095781 -1.39288666 #> 8      S06     I01 -1.792809705       0  0.06492634 -1.0922544 -0.76548167 #> 20     S06     I02  0.134685563       0  0.06492634 -0.9874887  1.05724790 #> 27     S06     I03  0.113354290       0  0.06492634 -0.5440981  0.59252604 #> 37     S06     I04  0.323720144       0  0.06492634  0.1692168  0.08957701 #> 49     S06     I05  0.193792222       0  0.06492634 -0.5968080  0.72567391 #> 56     S06     I06  1.931335697       0  0.06492634  0.6353539  1.23105550 #> 66     S06     I07 -0.647614603       0  0.06492634 -0.2653338 -0.44720711 #> 79     S06     I08  0.549137960       0  0.06492634  1.3963789 -0.91216731 #> 85     S06     I09 -0.180213641       0  0.06492634 -0.7947550  0.54961501 #> 99     S06     I10 -0.007457697       0  0.06492634 -1.1095781  1.03719404 #> 9      S07     I01  0.484023785       0  0.31641974 -1.0922544  1.25985842 #> 11     S07     I02 -0.480258136       0  0.31641974 -0.9874887  0.19081080 #> 24     S07     I03 -0.365887380       0  0.31641974 -0.5440981 -0.13820903 #> 38     S07     I04 -0.572303391       0  0.31641974  0.1692168 -1.05793993 #> 50     S07     I05 -1.536531748       0  0.31641974 -0.5968080 -1.25614346 #> 53     S07     I06  0.969073776       0  0.31641974  0.6353539  0.01730018 #> 67     S07     I07 -0.536733247       0  0.31641974 -0.2653338 -0.58781915 #> 80     S07     I08  3.786816584       0  0.31641974  1.3963789  2.07401792 #> 82     S07     I09 -1.042831257       0  0.31641974 -0.7947550 -0.56449600 #> 96     S07     I10 -0.257338995       0  0.31641974 -1.1095781  0.53581935 #> 6      S08     I01 -2.748295533       0 -1.40405396 -1.0922544 -0.25198719 #> 12     S08     I02 -1.608419907       0 -1.40405396 -0.9874887  0.78312273 #> 25     S08     I03 -3.544310556       0 -1.40405396 -0.5440981 -1.59615850 #> 39     S08     I04 -3.313283239       0 -1.40405396  0.1692168 -2.07844607 #> 41     S08     I05 -1.938397863       0 -1.40405396 -0.5968080  0.06246413 #> 54     S08     I06 -1.574526957       0 -1.40405396  0.6353539 -0.80582685 #> 68     S08     I07 -2.178673381       0 -1.40405396 -0.2653338 -0.50928558 #> 78     S08     I08  0.419085911       0 -1.40405396  1.3963789  0.42676095 #> 83     S08     I09 -1.939856886       0 -1.40405396 -0.7947550  0.25895207 #> 97     S08     I10 -2.977594851       0 -1.40405396 -1.1095781 -0.46396280 #> 3      S09     I01 -1.579951138       0  0.25868823 -1.0922544 -0.74638499 #> 13     S09     I02 -0.642168067       0  0.25868823 -0.9874887  0.08663238 #> 26     S09     I03  1.098891920       0  0.25868823 -0.5440981  1.38430178 #> 32     S09     I04  2.115082232       0  0.25868823  0.1692168  1.68717720 #> 42     S09     I05 -1.425013908       0  0.25868823 -0.5968080 -1.08689411 #> 55     S09     I06  1.931512871       0  0.25868823  0.6353539  1.03747079 #> 65     S09     I07 -0.286848373       0  0.25868823 -0.2653338 -0.28020277 #> 71     S09     I08  3.060329809       0  0.25868823  1.3963789  1.40526265 #> 84     S09     I09 -1.077320605       0  0.25868823 -0.7947550 -0.54125384 #> 94     S09     I10 -1.603093871       0  0.25868823 -1.1095781 -0.75220402 #> 10     S10     I01 -4.778540415       0 -1.55147462 -1.0922544 -2.13481142 #> 14     S10     I02 -3.744991698       0 -1.55147462 -0.9874887 -1.20602840 #> 28     S10     I03 -2.418470187       0 -1.55147462 -0.5440981 -0.32289748 #> 40     S10     I04 -0.274662420       0 -1.55147462  0.1692168  1.10759540 #> 43     S10     I05 -2.105791881       0 -1.55147462 -0.5968080  0.04249077 #> 57     S10     I06  0.654077499       0 -1.55147462  0.6353539  1.57019827 #> 70     S10     I07 -2.535221606       0 -1.55147462 -0.2653338 -0.71841315 #> 72     S10     I08 -0.713296008       0 -1.55147462  1.3963789 -0.55820031 #> 86     S10     I09 -3.271739260       0 -1.55147462 -0.7947550 -0.92550965 #> 100    S10     I10 -2.473085779       0 -1.55147462 -1.1095781  0.18796692"},{"path":"https://debruine.github.io/faux/dev/reference/sim_mixed_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a mixed design from existing data — sim_mixed_df","title":"Generate a mixed design from existing data — sim_mixed_df","text":"sim_mixed_df() produces data table distributions  -subject -item random intercepts existing data table.","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_mixed_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a mixed design from existing data — sim_mixed_df","text":"","code":"sim_mixed_df(   data,   sub_n = NULL,   item_n = NULL,   dv = \"y\",   sub_id = \"sub_id\",   item_id = \"item_id\" )"},{"path":"https://debruine.github.io/faux/dev/reference/sim_mixed_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a mixed design from existing data — sim_mixed_df","text":"data existing tbl sub_n number subjects simulate (NULL, returns data subjects) item_n number items simulate (NULL, returns data items) dv column name index containing DV sub_id column name index subject IDs item_id column name index item IDs","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_mixed_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a mixed design from existing data — sim_mixed_df","text":"tbl","code":""},{"path":"https://debruine.github.io/faux/dev/reference/sim_mixed_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a mixed design from existing data — sim_mixed_df","text":"","code":"sim_mixed_df(faceratings, 10, 10, \"rating\", \"rater_id\", \"face_id\") #>     sub_id item_id          y  grand_i        sub_i     item_i          err #> 1      S01     I01  5.8705090 3.018906  1.157556991  0.5524068  1.141639591 #> 15     S01     I02  2.4799882 3.018906  1.157556991 -1.1857130 -0.510761341 #> 29     S01     I03  2.9520550 3.018906  1.157556991 -1.1521728 -0.072234831 #> 31     S01     I04  6.1595280 3.018906  1.157556991  0.3174069  1.665658576 #> 44     S01     I05  4.1188480 3.018906  1.157556991 -0.8475896  0.789975038 #> 58     S01     I06  3.3842406 3.018906  1.157556991 -0.8684548  0.076232789 #> 61     S01     I07  4.2988416 3.018906  1.157556991  0.1363663 -0.013987295 #> 73     S01     I08  3.4893811 3.018906  1.157556991 -0.4399390 -0.247142467 #> 87     S01     I09  4.2856218 3.018906  1.157556991  1.2586441 -1.149484924 #> 91     S01     I10  5.1901401 3.018906  1.157556991  0.9073945  0.106283014 #> 7      S02     I01  1.8283435 3.018906 -0.516397190  0.5524068 -1.226571754 #> 17     S02     I02 -0.3661918 3.018906 -0.516397190 -1.1857130 -1.682987209 #> 30     S02     I03  1.6230033 3.018906 -0.516397190 -1.1521728  0.272667677 #> 36     S02     I04  2.8384243 3.018906 -0.516397190  0.3174069  0.018508977 #> 46     S02     I05  2.7482028 3.018906 -0.516397190 -0.8475896  1.093283968 #> 59     S02     I06  1.5971279 3.018906 -0.516397190 -0.8684548 -0.036925720 #> 69     S02     I07  2.2287113 3.018906 -0.516397190  0.1363663 -0.410163449 #> 75     S02     I08  2.3134564 3.018906 -0.516397190 -0.4399390  0.250887001 #> 88     S02     I09  4.6864241 3.018906 -0.516397190  1.2586441  0.925271591 #> 98     S02     I10  3.2060479 3.018906 -0.516397190  0.9073945 -0.203854996 #> 4      S03     I01  3.0366232 3.018906 -1.455322491  0.5524068  0.920633187 #> 18     S03     I02 -0.3674664 3.018906 -1.455322491 -1.1857130 -0.745336471 #> 23     S03     I03 -1.4741634 3.018906 -1.455322491 -1.1521728 -1.885573727 #> 33     S03     I04  2.7128198 3.018906 -1.455322491  0.3174069  0.831829838 #> 47     S03     I05  1.1579550 3.018906 -1.455322491 -0.8475896  0.441961542 #> 60     S03     I06  0.4493406 3.018906 -1.455322491 -0.8684548 -0.245787740 #> 62     S03     I07  0.1331160 3.018906 -1.455322491  0.1363663 -1.566833428 #> 76     S03     I08  4.0009389 3.018906 -1.455322491 -0.4399390  2.877294841 #> 89     S03     I09  3.4567185 3.018906 -1.455322491  1.2586441  0.634491297 #> 95     S03     I10  2.7995042 3.018906 -1.455322491  0.9073945  0.328526593 #> 5      S04     I01  7.4426675 3.018906  0.009725293  0.5524068  3.861629777 #> 19     S04     I02  2.6825545 3.018906  0.009725293 -1.1857130  0.839636597 #> 21     S04     I03  0.8719674 3.018906  0.009725293 -1.1521728 -1.004490744 #> 34     S04     I04  4.6273472 3.018906  0.009725293  0.3174069  1.281309396 #> 48     S04     I05  1.9672711 3.018906  0.009725293 -0.8475896 -0.213770153 #> 51     S04     I06  1.7172197 3.018906  0.009725293 -0.8684548 -0.442956376 #> 63     S04     I07  2.0395297 3.018906  0.009725293  0.1363663 -1.125467568 #> 77     S04     I08  0.9059727 3.018906  0.009725293 -0.4399390 -1.682719112 #> 90     S04     I09  4.5352373 3.018906  0.009725293  1.2586441  0.247962237 #> 92     S04     I10  3.8473116 3.018906  0.009725293  0.9073945 -0.088713797 #> 2      S05     I01  5.5299908 3.018906  0.367091477  0.5524068  1.591586876 #> 16     S05     I02  3.1098332 3.018906  0.367091477 -1.1857130  0.909549193 #> 22     S05     I03  1.4206604 3.018906  0.367091477 -1.1521728 -0.813163906 #> 35     S05     I04  3.6235920 3.018906  0.367091477  0.3174069 -0.079811963 #> 45     S05     I05  4.5703297 3.018906  0.367091477 -0.8475896  2.031922253 #> 52     S05     I06  3.7356314 3.018906  0.367091477 -0.8684548  1.218089148 #> 64     S05     I07  1.7493992 3.018906  0.367091477  0.1363663 -1.772964222 #> 74     S05     I08  2.9130510 3.018906  0.367091477 -0.4399390 -0.033007074 #> 81     S05     I09  3.1273784 3.018906  0.367091477  1.2586441 -1.517262823 #> 93     S05     I10  3.4706670 3.018906  0.367091477  0.9073945 -0.822724526 #> 8      S06     I01  5.4228159 3.018906  0.952160743  0.5524068  0.899342678 #> 20     S06     I02  3.4949617 3.018906  0.952160743 -1.1857130  0.709608361 #> 27     S06     I03  4.8500239 3.018906  0.952160743 -1.1521728  2.031130361 #> 37     S06     I04  4.9805727 3.018906  0.952160743  0.3174069  0.692099523 #> 49     S06     I05  2.0579839 3.018906  0.952160743 -0.8475896 -1.065492854 #> 56     S06     I06  4.1442431 3.018906  0.952160743 -0.8684548  1.041631581 #> 66     S06     I07  2.1899729 3.018906  0.952160743  0.1363663 -1.917459828 #> 79     S06     I08  3.5401710 3.018906  0.952160743 -0.4399390  0.009043665 #> 85     S06     I09  5.6463757 3.018906  0.952160743  1.2586441  0.416665219 #> 99     S06     I10  5.3461299 3.018906  0.952160743  0.9073945  0.467669123 #> 9      S07     I01  3.9097574 3.018906 -0.401338042  0.5524068  0.739782965 #> 11     S07     I02  2.9453618 3.018906 -0.401338042 -1.1857130  1.513507285 #> 24     S07     I03  1.2077257 3.018906 -0.401338042 -1.1521728 -0.257669041 #> 38     S07     I04  3.8404993 3.018906 -0.401338042  0.3174069  0.905524908 #> 50     S07     I05  1.4873728 3.018906 -0.401338042 -0.8475896 -0.282605170 #> 53     S07     I06  2.2279268 3.018906 -0.401338042 -0.8684548  0.478814035 #> 67     S07     I07  2.1279559 3.018906 -0.401338042  0.1363663 -0.625978034 #> 80     S07     I08  1.6054858 3.018906 -0.401338042 -0.4399390 -0.572142706 #> 82     S07     I09  5.9752414 3.018906 -0.401338042  1.2586441  2.099029743 #> 96     S07     I10  2.2311517 3.018906 -0.401338042  0.9073945 -1.293810387 #> 6      S08     I01  3.2515372 3.018906  0.702682746  0.5524068 -1.022458044 #> 12     S08     I02  3.7402885 3.018906  0.702682746 -1.1857130  1.204413216 #> 25     S08     I03  3.2385663 3.018906  0.702682746 -1.1521728  0.669150778 #> 39     S08     I04  5.7522285 3.018906  0.702682746  0.3174069  1.713233308 #> 41     S08     I05  3.9797102 3.018906  0.702682746 -0.8475896  1.105711474 #> 54     S08     I06  3.2946077 3.018906  0.702682746 -0.8684548  0.441474190 #> 68     S08     I07  1.1532217 3.018906  0.702682746  0.1363663 -2.704733037 #> 78     S08     I08  2.3104917 3.018906  0.702682746 -0.4399390 -0.971157598 #> 83     S08     I09  7.1425032 3.018906  0.702682746  1.2586441  2.162270768 #> 97     S08     I10  5.6841290 3.018906  0.702682746  0.9073945  1.055146212 #> 3      S09     I01  2.3513821 3.018906  0.911857315  0.5524068 -2.131787631 #> 13     S09     I02  2.7197759 3.018906  0.911857315 -1.1857130 -0.025273958 #> 26     S09     I03  3.0126423 3.018906  0.911857315 -1.1521728  0.234052203 #> 32     S09     I04  2.9122027 3.018906  0.911857315  0.3174069 -1.335967126 #> 42     S09     I05  3.2620266 3.018906  0.911857315 -0.8475896  0.178853291 #> 55     S09     I06  4.1561734 3.018906  0.911857315 -0.8684548  1.093865335 #> 65     S09     I07  3.8120971 3.018906  0.911857315  0.1363663 -0.255032155 #> 71     S09     I08  2.6876547 3.018906  0.911857315 -0.4399390 -0.803169139 #> 84     S09     I09  4.1678197 3.018906  0.911857315  1.2586441 -1.021587305 #> 94     S09     I10  4.0816714 3.018906  0.911857315  0.9073945 -0.756485997 #> 10     S10     I01  3.4761689 3.018906 -0.009847584  0.5524068 -0.085295956 #> 14     S10     I02  2.6857394 3.018906 -0.009847584 -1.1857130  0.862394370 #> 28     S10     I03  2.2583047 3.018906 -0.009847584 -1.1521728  0.401419517 #> 40     S10     I04  3.8639121 3.018906 -0.009847584  0.3174069  0.537447185 #> 43     S10     I05  2.9547812 3.018906 -0.009847584 -0.8475896  0.793312753 #> 57     S10     I06  2.9005605 3.018906 -0.009847584 -0.8684548  0.759957311 #> 70     S10     I07  4.4972966 3.018906 -0.009847584  0.1363663  1.351872241 #> 72     S10     I08  2.5608134 3.018906 -0.009847584 -0.4399390 -0.008305563 #> 86     S10     I09  3.6957436 3.018906 -0.009847584  1.2586441 -0.571958506 #> 100    S10     I10  4.6951100 3.018906 -0.009847584  0.9073945  0.778657527"},{"path":"https://debruine.github.io/faux/dev/reference/std_alpha2average_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Alpha to Average R — std_alpha2average_r","title":"Standardized Alpha to Average R — std_alpha2average_r","text":"Standardized Alpha Average R","code":""},{"path":"https://debruine.github.io/faux/dev/reference/std_alpha2average_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Alpha to Average R — std_alpha2average_r","text":"","code":"std_alpha2average_r(std_alpha, n)"},{"path":"https://debruine.github.io/faux/dev/reference/std_alpha2average_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Alpha to Average R — std_alpha2average_r","text":"std_alpha standarized alpha n number items","code":""},{"path":"https://debruine.github.io/faux/dev/reference/std_alpha2average_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Alpha to Average R — std_alpha2average_r","text":"average inter-item correlation","code":""},{"path":"https://debruine.github.io/faux/dev/reference/std_alpha2average_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Alpha to Average R — std_alpha2average_r","text":"","code":"std_alpha2average_r(.8, 10) #> [1] 0.2857143"},{"path":"https://debruine.github.io/faux/dev/reference/trunc2norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert truncated normal to normal — trunc2norm","title":"Convert truncated normal to normal — trunc2norm","text":"Convert truncated normal distribution normal (gaussian) distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/trunc2norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert truncated normal to normal — trunc2norm","text":"","code":"trunc2norm(x, min = NULL, max = NULL, mu = mean(x), sd = stats::sd(x))"},{"path":"https://debruine.github.io/faux/dev/reference/trunc2norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert truncated normal to normal — trunc2norm","text":"x truncated normally distributed vector min minimum truncated distribution (calculated x given) max maximum truncated distribution (calculated x given) mu mean distribution return (calculated x given) sd SD distribution return (calculated x given)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/trunc2norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert truncated normal to normal — trunc2norm","text":"vector uniform distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/trunc2norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert truncated normal to normal — trunc2norm","text":"","code":"x <- truncnorm::rtruncnorm(10000, 1, 7, 3.5, 2) y <- trunc2norm(x, 1, 7) g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")"},{"path":"https://debruine.github.io/faux/dev/reference/unif2norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert uniform to normal — unif2norm","title":"Convert uniform to normal — unif2norm","text":"Convert uniform distribution normal (gaussian) distribution specified mu sd","code":""},{"path":"https://debruine.github.io/faux/dev/reference/unif2norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert uniform to normal — unif2norm","text":"","code":"unif2norm(x, mu = 0, sd = 1, min = NULL, max = NULL)"},{"path":"https://debruine.github.io/faux/dev/reference/unif2norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert uniform to normal — unif2norm","text":"x uniformly distributed vector mu mean normal distribution return sd SD normal distribution return min minimum possible value x (calculated x given) max maximum possible value x (calculated x given)","code":""},{"path":"https://debruine.github.io/faux/dev/reference/unif2norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert uniform to normal — unif2norm","text":"vector gaussian distribution","code":""},{"path":"https://debruine.github.io/faux/dev/reference/unif2norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert uniform to normal — unif2norm","text":"","code":"x <- runif(10000) y <- unif2norm(x) #> min was set to -1.91735405474901e-05 #> max was set to 1.00002274167016 g <- ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x, y)) ggExtra::ggMarginal(g, type = \"histogram\")"},{"path":"https://debruine.github.io/faux/dev/reference/unique_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Make unique pairs of level names for correlations — unique_pairs","title":"Make unique pairs of level names for correlations — unique_pairs","text":"Make unique pairs level names correlations","code":""},{"path":"https://debruine.github.io/faux/dev/reference/unique_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make unique pairs of level names for correlations — unique_pairs","text":"","code":"unique_pairs(v)"},{"path":"https://debruine.github.io/faux/dev/reference/unique_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make unique pairs of level names for correlations — unique_pairs","text":"v vector level names number levels","code":""},{"path":"https://debruine.github.io/faux/dev/reference/unique_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make unique pairs of level names for correlations — unique_pairs","text":"vector unique pairs","code":""},{"path":"https://debruine.github.io/faux/dev/reference/unique_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make unique pairs of level names for correlations — unique_pairs","text":"","code":"unique_pairs(c(\"O\", \"C\", \"E\", \"A\", \"N\")) #>  [1] \"O-C\" \"O-E\" \"O-A\" \"O-N\" \"C-E\" \"C-A\" \"C-N\" \"E-A\" \"E-N\" \"A-N\" unique_pairs(3) #> [1] \"A-B\" \"A-C\" \"B-C\""},{"path":"https://debruine.github.io/faux/dev/reference/wide2long.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data from wide to long format — wide2long","title":"Convert data from wide to long format — wide2long","text":"Convert data wide long format","code":""},{"path":"https://debruine.github.io/faux/dev/reference/wide2long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data from wide to long format — wide2long","text":"","code":"wide2long(   data,   within_factors = c(),   within_cols = c(),   dv = \"y\",   id = \"id\",   sep = faux_options(\"sep\") )"},{"path":"https://debruine.github.io/faux/dev/reference/wide2long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data from wide to long format — wide2long","text":"data tbl wide format within_factors names within factors within_cols names (indices) within-subject (value) columns dv name dv column (defaults \"y\") id name ID column(s) exist, new column made (defaults (\"id\") sep separator within-columns (used strsplit, can regex), defaults \"_\"","code":""},{"path":"https://debruine.github.io/faux/dev/reference/wide2long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data from wide to long format — wide2long","text":"tbl long format","code":""},{"path":"https://debruine.github.io/faux/dev/reference/wide2long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data from wide to long format — wide2long","text":"","code":"wide2long(iris, c(\"Feature\", \"Measure\"), 1:4, sep = \"\\\\.\") #>       id    Species Feature Measure   y #> 1   S001     setosa   Sepal  Length 5.1 #> 2   S002     setosa   Sepal  Length 4.9 #> 3   S003     setosa   Sepal  Length 4.7 #> 4   S004     setosa   Sepal  Length 4.6 #> 5   S005     setosa   Sepal  Length 5.0 #> 6   S006     setosa   Sepal  Length 5.4 #> 7   S007     setosa   Sepal  Length 4.6 #> 8   S008     setosa   Sepal  Length 5.0 #> 9   S009     setosa   Sepal  Length 4.4 #> 10  S010     setosa   Sepal  Length 4.9 #> 11  S011     setosa   Sepal  Length 5.4 #> 12  S012     setosa   Sepal  Length 4.8 #> 13  S013     setosa   Sepal  Length 4.8 #> 14  S014     setosa   Sepal  Length 4.3 #> 15  S015     setosa   Sepal  Length 5.8 #> 16  S016     setosa   Sepal  Length 5.7 #> 17  S017     setosa   Sepal  Length 5.4 #> 18  S018     setosa   Sepal  Length 5.1 #> 19  S019     setosa   Sepal  Length 5.7 #> 20  S020     setosa   Sepal  Length 5.1 #> 21  S021     setosa   Sepal  Length 5.4 #> 22  S022     setosa   Sepal  Length 5.1 #> 23  S023     setosa   Sepal  Length 4.6 #> 24  S024     setosa   Sepal  Length 5.1 #> 25  S025     setosa   Sepal  Length 4.8 #> 26  S026     setosa   Sepal  Length 5.0 #> 27  S027     setosa   Sepal  Length 5.0 #> 28  S028     setosa   Sepal  Length 5.2 #> 29  S029     setosa   Sepal  Length 5.2 #> 30  S030     setosa   Sepal  Length 4.7 #> 31  S031     setosa   Sepal  Length 4.8 #> 32  S032     setosa   Sepal  Length 5.4 #> 33  S033     setosa   Sepal  Length 5.2 #> 34  S034     setosa   Sepal  Length 5.5 #> 35  S035     setosa   Sepal  Length 4.9 #> 36  S036     setosa   Sepal  Length 5.0 #> 37  S037     setosa   Sepal  Length 5.5 #> 38  S038     setosa   Sepal  Length 4.9 #> 39  S039     setosa   Sepal  Length 4.4 #> 40  S040     setosa   Sepal  Length 5.1 #> 41  S041     setosa   Sepal  Length 5.0 #> 42  S042     setosa   Sepal  Length 4.5 #> 43  S043     setosa   Sepal  Length 4.4 #> 44  S044     setosa   Sepal  Length 5.0 #> 45  S045     setosa   Sepal  Length 5.1 #> 46  S046     setosa   Sepal  Length 4.8 #> 47  S047     setosa   Sepal  Length 5.1 #> 48  S048     setosa   Sepal  Length 4.6 #> 49  S049     setosa   Sepal  Length 5.3 #> 50  S050     setosa   Sepal  Length 5.0 #> 51  S051 versicolor   Sepal  Length 7.0 #> 52  S052 versicolor   Sepal  Length 6.4 #> 53  S053 versicolor   Sepal  Length 6.9 #> 54  S054 versicolor   Sepal  Length 5.5 #> 55  S055 versicolor   Sepal  Length 6.5 #> 56  S056 versicolor   Sepal  Length 5.7 #> 57  S057 versicolor   Sepal  Length 6.3 #> 58  S058 versicolor   Sepal  Length 4.9 #> 59  S059 versicolor   Sepal  Length 6.6 #> 60  S060 versicolor   Sepal  Length 5.2 #> 61  S061 versicolor   Sepal  Length 5.0 #> 62  S062 versicolor   Sepal  Length 5.9 #> 63  S063 versicolor   Sepal  Length 6.0 #> 64  S064 versicolor   Sepal  Length 6.1 #> 65  S065 versicolor   Sepal  Length 5.6 #> 66  S066 versicolor   Sepal  Length 6.7 #> 67  S067 versicolor   Sepal  Length 5.6 #> 68  S068 versicolor   Sepal  Length 5.8 #> 69  S069 versicolor   Sepal  Length 6.2 #> 70  S070 versicolor   Sepal  Length 5.6 #> 71  S071 versicolor   Sepal  Length 5.9 #> 72  S072 versicolor   Sepal  Length 6.1 #> 73  S073 versicolor   Sepal  Length 6.3 #> 74  S074 versicolor   Sepal  Length 6.1 #> 75  S075 versicolor   Sepal  Length 6.4 #> 76  S076 versicolor   Sepal  Length 6.6 #> 77  S077 versicolor   Sepal  Length 6.8 #> 78  S078 versicolor   Sepal  Length 6.7 #> 79  S079 versicolor   Sepal  Length 6.0 #> 80  S080 versicolor   Sepal  Length 5.7 #> 81  S081 versicolor   Sepal  Length 5.5 #> 82  S082 versicolor   Sepal  Length 5.5 #> 83  S083 versicolor   Sepal  Length 5.8 #> 84  S084 versicolor   Sepal  Length 6.0 #> 85  S085 versicolor   Sepal  Length 5.4 #> 86  S086 versicolor   Sepal  Length 6.0 #> 87  S087 versicolor   Sepal  Length 6.7 #> 88  S088 versicolor   Sepal  Length 6.3 #> 89  S089 versicolor   Sepal  Length 5.6 #> 90  S090 versicolor   Sepal  Length 5.5 #> 91  S091 versicolor   Sepal  Length 5.5 #> 92  S092 versicolor   Sepal  Length 6.1 #> 93  S093 versicolor   Sepal  Length 5.8 #> 94  S094 versicolor   Sepal  Length 5.0 #> 95  S095 versicolor   Sepal  Length 5.6 #> 96  S096 versicolor   Sepal  Length 5.7 #> 97  S097 versicolor   Sepal  Length 5.7 #> 98  S098 versicolor   Sepal  Length 6.2 #> 99  S099 versicolor   Sepal  Length 5.1 #> 100 S100 versicolor   Sepal  Length 5.7 #> 101 S101  virginica   Sepal  Length 6.3 #> 102 S102  virginica   Sepal  Length 5.8 #> 103 S103  virginica   Sepal  Length 7.1 #> 104 S104  virginica   Sepal  Length 6.3 #> 105 S105  virginica   Sepal  Length 6.5 #> 106 S106  virginica   Sepal  Length 7.6 #> 107 S107  virginica   Sepal  Length 4.9 #> 108 S108  virginica   Sepal  Length 7.3 #> 109 S109  virginica   Sepal  Length 6.7 #> 110 S110  virginica   Sepal  Length 7.2 #> 111 S111  virginica   Sepal  Length 6.5 #> 112 S112  virginica   Sepal  Length 6.4 #> 113 S113  virginica   Sepal  Length 6.8 #> 114 S114  virginica   Sepal  Length 5.7 #> 115 S115  virginica   Sepal  Length 5.8 #> 116 S116  virginica   Sepal  Length 6.4 #> 117 S117  virginica   Sepal  Length 6.5 #> 118 S118  virginica   Sepal  Length 7.7 #> 119 S119  virginica   Sepal  Length 7.7 #> 120 S120  virginica   Sepal  Length 6.0 #> 121 S121  virginica   Sepal  Length 6.9 #> 122 S122  virginica   Sepal  Length 5.6 #> 123 S123  virginica   Sepal  Length 7.7 #> 124 S124  virginica   Sepal  Length 6.3 #> 125 S125  virginica   Sepal  Length 6.7 #> 126 S126  virginica   Sepal  Length 7.2 #> 127 S127  virginica   Sepal  Length 6.2 #> 128 S128  virginica   Sepal  Length 6.1 #> 129 S129  virginica   Sepal  Length 6.4 #> 130 S130  virginica   Sepal  Length 7.2 #> 131 S131  virginica   Sepal  Length 7.4 #> 132 S132  virginica   Sepal  Length 7.9 #> 133 S133  virginica   Sepal  Length 6.4 #> 134 S134  virginica   Sepal  Length 6.3 #> 135 S135  virginica   Sepal  Length 6.1 #> 136 S136  virginica   Sepal  Length 7.7 #> 137 S137  virginica   Sepal  Length 6.3 #> 138 S138  virginica   Sepal  Length 6.4 #> 139 S139  virginica   Sepal  Length 6.0 #> 140 S140  virginica   Sepal  Length 6.9 #> 141 S141  virginica   Sepal  Length 6.7 #> 142 S142  virginica   Sepal  Length 6.9 #> 143 S143  virginica   Sepal  Length 5.8 #> 144 S144  virginica   Sepal  Length 6.8 #> 145 S145  virginica   Sepal  Length 6.7 #> 146 S146  virginica   Sepal  Length 6.7 #> 147 S147  virginica   Sepal  Length 6.3 #> 148 S148  virginica   Sepal  Length 6.5 #> 149 S149  virginica   Sepal  Length 6.2 #> 150 S150  virginica   Sepal  Length 5.9 #> 151 S001     setosa   Sepal   Width 3.5 #> 152 S002     setosa   Sepal   Width 3.0 #> 153 S003     setosa   Sepal   Width 3.2 #> 154 S004     setosa   Sepal   Width 3.1 #> 155 S005     setosa   Sepal   Width 3.6 #> 156 S006     setosa   Sepal   Width 3.9 #> 157 S007     setosa   Sepal   Width 3.4 #> 158 S008     setosa   Sepal   Width 3.4 #> 159 S009     setosa   Sepal   Width 2.9 #> 160 S010     setosa   Sepal   Width 3.1 #> 161 S011     setosa   Sepal   Width 3.7 #> 162 S012     setosa   Sepal   Width 3.4 #> 163 S013     setosa   Sepal   Width 3.0 #> 164 S014     setosa   Sepal   Width 3.0 #> 165 S015     setosa   Sepal   Width 4.0 #> 166 S016     setosa   Sepal   Width 4.4 #> 167 S017     setosa   Sepal   Width 3.9 #> 168 S018     setosa   Sepal   Width 3.5 #> 169 S019     setosa   Sepal   Width 3.8 #> 170 S020     setosa   Sepal   Width 3.8 #> 171 S021     setosa   Sepal   Width 3.4 #> 172 S022     setosa   Sepal   Width 3.7 #> 173 S023     setosa   Sepal   Width 3.6 #> 174 S024     setosa   Sepal   Width 3.3 #> 175 S025     setosa   Sepal   Width 3.4 #> 176 S026     setosa   Sepal   Width 3.0 #> 177 S027     setosa   Sepal   Width 3.4 #> 178 S028     setosa   Sepal   Width 3.5 #> 179 S029     setosa   Sepal   Width 3.4 #> 180 S030     setosa   Sepal   Width 3.2 #> 181 S031     setosa   Sepal   Width 3.1 #> 182 S032     setosa   Sepal   Width 3.4 #> 183 S033     setosa   Sepal   Width 4.1 #> 184 S034     setosa   Sepal   Width 4.2 #> 185 S035     setosa   Sepal   Width 3.1 #> 186 S036     setosa   Sepal   Width 3.2 #> 187 S037     setosa   Sepal   Width 3.5 #> 188 S038     setosa   Sepal   Width 3.6 #> 189 S039     setosa   Sepal   Width 3.0 #> 190 S040     setosa   Sepal   Width 3.4 #> 191 S041     setosa   Sepal   Width 3.5 #> 192 S042     setosa   Sepal   Width 2.3 #> 193 S043     setosa   Sepal   Width 3.2 #> 194 S044     setosa   Sepal   Width 3.5 #> 195 S045     setosa   Sepal   Width 3.8 #> 196 S046     setosa   Sepal   Width 3.0 #> 197 S047     setosa   Sepal   Width 3.8 #> 198 S048     setosa   Sepal   Width 3.2 #> 199 S049     setosa   Sepal   Width 3.7 #> 200 S050     setosa   Sepal   Width 3.3 #> 201 S051 versicolor   Sepal   Width 3.2 #> 202 S052 versicolor   Sepal   Width 3.2 #> 203 S053 versicolor   Sepal   Width 3.1 #> 204 S054 versicolor   Sepal   Width 2.3 #> 205 S055 versicolor   Sepal   Width 2.8 #> 206 S056 versicolor   Sepal   Width 2.8 #> 207 S057 versicolor   Sepal   Width 3.3 #> 208 S058 versicolor   Sepal   Width 2.4 #> 209 S059 versicolor   Sepal   Width 2.9 #> 210 S060 versicolor   Sepal   Width 2.7 #> 211 S061 versicolor   Sepal   Width 2.0 #> 212 S062 versicolor   Sepal   Width 3.0 #> 213 S063 versicolor   Sepal   Width 2.2 #> 214 S064 versicolor   Sepal   Width 2.9 #> 215 S065 versicolor   Sepal   Width 2.9 #> 216 S066 versicolor   Sepal   Width 3.1 #> 217 S067 versicolor   Sepal   Width 3.0 #> 218 S068 versicolor   Sepal   Width 2.7 #> 219 S069 versicolor   Sepal   Width 2.2 #> 220 S070 versicolor   Sepal   Width 2.5 #> 221 S071 versicolor   Sepal   Width 3.2 #> 222 S072 versicolor   Sepal   Width 2.8 #> 223 S073 versicolor   Sepal   Width 2.5 #> 224 S074 versicolor   Sepal   Width 2.8 #> 225 S075 versicolor   Sepal   Width 2.9 #> 226 S076 versicolor   Sepal   Width 3.0 #> 227 S077 versicolor   Sepal   Width 2.8 #> 228 S078 versicolor   Sepal   Width 3.0 #> 229 S079 versicolor   Sepal   Width 2.9 #> 230 S080 versicolor   Sepal   Width 2.6 #> 231 S081 versicolor   Sepal   Width 2.4 #> 232 S082 versicolor   Sepal   Width 2.4 #> 233 S083 versicolor   Sepal   Width 2.7 #> 234 S084 versicolor   Sepal   Width 2.7 #> 235 S085 versicolor   Sepal   Width 3.0 #> 236 S086 versicolor   Sepal   Width 3.4 #> 237 S087 versicolor   Sepal   Width 3.1 #> 238 S088 versicolor   Sepal   Width 2.3 #> 239 S089 versicolor   Sepal   Width 3.0 #> 240 S090 versicolor   Sepal   Width 2.5 #> 241 S091 versicolor   Sepal   Width 2.6 #> 242 S092 versicolor   Sepal   Width 3.0 #> 243 S093 versicolor   Sepal   Width 2.6 #> 244 S094 versicolor   Sepal   Width 2.3 #> 245 S095 versicolor   Sepal   Width 2.7 #> 246 S096 versicolor   Sepal   Width 3.0 #> 247 S097 versicolor   Sepal   Width 2.9 #> 248 S098 versicolor   Sepal   Width 2.9 #> 249 S099 versicolor   Sepal   Width 2.5 #> 250 S100 versicolor   Sepal   Width 2.8 #> 251 S101  virginica   Sepal   Width 3.3 #> 252 S102  virginica   Sepal   Width 2.7 #> 253 S103  virginica   Sepal   Width 3.0 #> 254 S104  virginica   Sepal   Width 2.9 #> 255 S105  virginica   Sepal   Width 3.0 #> 256 S106  virginica   Sepal   Width 3.0 #> 257 S107  virginica   Sepal   Width 2.5 #> 258 S108  virginica   Sepal   Width 2.9 #> 259 S109  virginica   Sepal   Width 2.5 #> 260 S110  virginica   Sepal   Width 3.6 #> 261 S111  virginica   Sepal   Width 3.2 #> 262 S112  virginica   Sepal   Width 2.7 #> 263 S113  virginica   Sepal   Width 3.0 #> 264 S114  virginica   Sepal   Width 2.5 #> 265 S115  virginica   Sepal   Width 2.8 #> 266 S116  virginica   Sepal   Width 3.2 #> 267 S117  virginica   Sepal   Width 3.0 #> 268 S118  virginica   Sepal   Width 3.8 #> 269 S119  virginica   Sepal   Width 2.6 #> 270 S120  virginica   Sepal   Width 2.2 #> 271 S121  virginica   Sepal   Width 3.2 #> 272 S122  virginica   Sepal   Width 2.8 #> 273 S123  virginica   Sepal   Width 2.8 #> 274 S124  virginica   Sepal   Width 2.7 #> 275 S125  virginica   Sepal   Width 3.3 #> 276 S126  virginica   Sepal   Width 3.2 #> 277 S127  virginica   Sepal   Width 2.8 #> 278 S128  virginica   Sepal   Width 3.0 #> 279 S129  virginica   Sepal   Width 2.8 #> 280 S130  virginica   Sepal   Width 3.0 #> 281 S131  virginica   Sepal   Width 2.8 #> 282 S132  virginica   Sepal   Width 3.8 #> 283 S133  virginica   Sepal   Width 2.8 #> 284 S134  virginica   Sepal   Width 2.8 #> 285 S135  virginica   Sepal   Width 2.6 #> 286 S136  virginica   Sepal   Width 3.0 #> 287 S137  virginica   Sepal   Width 3.4 #> 288 S138  virginica   Sepal   Width 3.1 #> 289 S139  virginica   Sepal   Width 3.0 #> 290 S140  virginica   Sepal   Width 3.1 #> 291 S141  virginica   Sepal   Width 3.1 #> 292 S142  virginica   Sepal   Width 3.1 #> 293 S143  virginica   Sepal   Width 2.7 #> 294 S144  virginica   Sepal   Width 3.2 #> 295 S145  virginica   Sepal   Width 3.3 #> 296 S146  virginica   Sepal   Width 3.0 #> 297 S147  virginica   Sepal   Width 2.5 #> 298 S148  virginica   Sepal   Width 3.0 #> 299 S149  virginica   Sepal   Width 3.4 #> 300 S150  virginica   Sepal   Width 3.0 #> 301 S001     setosa   Petal  Length 1.4 #> 302 S002     setosa   Petal  Length 1.4 #> 303 S003     setosa   Petal  Length 1.3 #> 304 S004     setosa   Petal  Length 1.5 #> 305 S005     setosa   Petal  Length 1.4 #> 306 S006     setosa   Petal  Length 1.7 #> 307 S007     setosa   Petal  Length 1.4 #> 308 S008     setosa   Petal  Length 1.5 #> 309 S009     setosa   Petal  Length 1.4 #> 310 S010     setosa   Petal  Length 1.5 #> 311 S011     setosa   Petal  Length 1.5 #> 312 S012     setosa   Petal  Length 1.6 #> 313 S013     setosa   Petal  Length 1.4 #> 314 S014     setosa   Petal  Length 1.1 #> 315 S015     setosa   Petal  Length 1.2 #> 316 S016     setosa   Petal  Length 1.5 #> 317 S017     setosa   Petal  Length 1.3 #> 318 S018     setosa   Petal  Length 1.4 #> 319 S019     setosa   Petal  Length 1.7 #> 320 S020     setosa   Petal  Length 1.5 #> 321 S021     setosa   Petal  Length 1.7 #> 322 S022     setosa   Petal  Length 1.5 #> 323 S023     setosa   Petal  Length 1.0 #> 324 S024     setosa   Petal  Length 1.7 #> 325 S025     setosa   Petal  Length 1.9 #> 326 S026     setosa   Petal  Length 1.6 #> 327 S027     setosa   Petal  Length 1.6 #> 328 S028     setosa   Petal  Length 1.5 #> 329 S029     setosa   Petal  Length 1.4 #> 330 S030     setosa   Petal  Length 1.6 #> 331 S031     setosa   Petal  Length 1.6 #> 332 S032     setosa   Petal  Length 1.5 #> 333 S033     setosa   Petal  Length 1.5 #> 334 S034     setosa   Petal  Length 1.4 #> 335 S035     setosa   Petal  Length 1.5 #> 336 S036     setosa   Petal  Length 1.2 #> 337 S037     setosa   Petal  Length 1.3 #> 338 S038     setosa   Petal  Length 1.4 #> 339 S039     setosa   Petal  Length 1.3 #> 340 S040     setosa   Petal  Length 1.5 #> 341 S041     setosa   Petal  Length 1.3 #> 342 S042     setosa   Petal  Length 1.3 #> 343 S043     setosa   Petal  Length 1.3 #> 344 S044     setosa   Petal  Length 1.6 #> 345 S045     setosa   Petal  Length 1.9 #> 346 S046     setosa   Petal  Length 1.4 #> 347 S047     setosa   Petal  Length 1.6 #> 348 S048     setosa   Petal  Length 1.4 #> 349 S049     setosa   Petal  Length 1.5 #> 350 S050     setosa   Petal  Length 1.4 #> 351 S051 versicolor   Petal  Length 4.7 #> 352 S052 versicolor   Petal  Length 4.5 #> 353 S053 versicolor   Petal  Length 4.9 #> 354 S054 versicolor   Petal  Length 4.0 #> 355 S055 versicolor   Petal  Length 4.6 #> 356 S056 versicolor   Petal  Length 4.5 #> 357 S057 versicolor   Petal  Length 4.7 #> 358 S058 versicolor   Petal  Length 3.3 #> 359 S059 versicolor   Petal  Length 4.6 #> 360 S060 versicolor   Petal  Length 3.9 #> 361 S061 versicolor   Petal  Length 3.5 #> 362 S062 versicolor   Petal  Length 4.2 #> 363 S063 versicolor   Petal  Length 4.0 #> 364 S064 versicolor   Petal  Length 4.7 #> 365 S065 versicolor   Petal  Length 3.6 #> 366 S066 versicolor   Petal  Length 4.4 #> 367 S067 versicolor   Petal  Length 4.5 #> 368 S068 versicolor   Petal  Length 4.1 #> 369 S069 versicolor   Petal  Length 4.5 #> 370 S070 versicolor   Petal  Length 3.9 #> 371 S071 versicolor   Petal  Length 4.8 #> 372 S072 versicolor   Petal  Length 4.0 #> 373 S073 versicolor   Petal  Length 4.9 #> 374 S074 versicolor   Petal  Length 4.7 #> 375 S075 versicolor   Petal  Length 4.3 #> 376 S076 versicolor   Petal  Length 4.4 #> 377 S077 versicolor   Petal  Length 4.8 #> 378 S078 versicolor   Petal  Length 5.0 #> 379 S079 versicolor   Petal  Length 4.5 #> 380 S080 versicolor   Petal  Length 3.5 #> 381 S081 versicolor   Petal  Length 3.8 #> 382 S082 versicolor   Petal  Length 3.7 #> 383 S083 versicolor   Petal  Length 3.9 #> 384 S084 versicolor   Petal  Length 5.1 #> 385 S085 versicolor   Petal  Length 4.5 #> 386 S086 versicolor   Petal  Length 4.5 #> 387 S087 versicolor   Petal  Length 4.7 #> 388 S088 versicolor   Petal  Length 4.4 #> 389 S089 versicolor   Petal  Length 4.1 #> 390 S090 versicolor   Petal  Length 4.0 #> 391 S091 versicolor   Petal  Length 4.4 #> 392 S092 versicolor   Petal  Length 4.6 #> 393 S093 versicolor   Petal  Length 4.0 #> 394 S094 versicolor   Petal  Length 3.3 #> 395 S095 versicolor   Petal  Length 4.2 #> 396 S096 versicolor   Petal  Length 4.2 #> 397 S097 versicolor   Petal  Length 4.2 #> 398 S098 versicolor   Petal  Length 4.3 #> 399 S099 versicolor   Petal  Length 3.0 #> 400 S100 versicolor   Petal  Length 4.1 #> 401 S101  virginica   Petal  Length 6.0 #> 402 S102  virginica   Petal  Length 5.1 #> 403 S103  virginica   Petal  Length 5.9 #> 404 S104  virginica   Petal  Length 5.6 #> 405 S105  virginica   Petal  Length 5.8 #> 406 S106  virginica   Petal  Length 6.6 #> 407 S107  virginica   Petal  Length 4.5 #> 408 S108  virginica   Petal  Length 6.3 #> 409 S109  virginica   Petal  Length 5.8 #> 410 S110  virginica   Petal  Length 6.1 #> 411 S111  virginica   Petal  Length 5.1 #> 412 S112  virginica   Petal  Length 5.3 #> 413 S113  virginica   Petal  Length 5.5 #> 414 S114  virginica   Petal  Length 5.0 #> 415 S115  virginica   Petal  Length 5.1 #> 416 S116  virginica   Petal  Length 5.3 #> 417 S117  virginica   Petal  Length 5.5 #> 418 S118  virginica   Petal  Length 6.7 #> 419 S119  virginica   Petal  Length 6.9 #> 420 S120  virginica   Petal  Length 5.0 #> 421 S121  virginica   Petal  Length 5.7 #> 422 S122  virginica   Petal  Length 4.9 #> 423 S123  virginica   Petal  Length 6.7 #> 424 S124  virginica   Petal  Length 4.9 #> 425 S125  virginica   Petal  Length 5.7 #> 426 S126  virginica   Petal  Length 6.0 #> 427 S127  virginica   Petal  Length 4.8 #> 428 S128  virginica   Petal  Length 4.9 #> 429 S129  virginica   Petal  Length 5.6 #> 430 S130  virginica   Petal  Length 5.8 #> 431 S131  virginica   Petal  Length 6.1 #> 432 S132  virginica   Petal  Length 6.4 #> 433 S133  virginica   Petal  Length 5.6 #> 434 S134  virginica   Petal  Length 5.1 #> 435 S135  virginica   Petal  Length 5.6 #> 436 S136  virginica   Petal  Length 6.1 #> 437 S137  virginica   Petal  Length 5.6 #> 438 S138  virginica   Petal  Length 5.5 #> 439 S139  virginica   Petal  Length 4.8 #> 440 S140  virginica   Petal  Length 5.4 #> 441 S141  virginica   Petal  Length 5.6 #> 442 S142  virginica   Petal  Length 5.1 #> 443 S143  virginica   Petal  Length 5.1 #> 444 S144  virginica   Petal  Length 5.9 #> 445 S145  virginica   Petal  Length 5.7 #> 446 S146  virginica   Petal  Length 5.2 #> 447 S147  virginica   Petal  Length 5.0 #> 448 S148  virginica   Petal  Length 5.2 #> 449 S149  virginica   Petal  Length 5.4 #> 450 S150  virginica   Petal  Length 5.1 #> 451 S001     setosa   Petal   Width 0.2 #> 452 S002     setosa   Petal   Width 0.2 #> 453 S003     setosa   Petal   Width 0.2 #> 454 S004     setosa   Petal   Width 0.2 #> 455 S005     setosa   Petal   Width 0.2 #> 456 S006     setosa   Petal   Width 0.4 #> 457 S007     setosa   Petal   Width 0.3 #> 458 S008     setosa   Petal   Width 0.2 #> 459 S009     setosa   Petal   Width 0.2 #> 460 S010     setosa   Petal   Width 0.1 #> 461 S011     setosa   Petal   Width 0.2 #> 462 S012     setosa   Petal   Width 0.2 #> 463 S013     setosa   Petal   Width 0.1 #> 464 S014     setosa   Petal   Width 0.1 #> 465 S015     setosa   Petal   Width 0.2 #> 466 S016     setosa   Petal   Width 0.4 #> 467 S017     setosa   Petal   Width 0.4 #> 468 S018     setosa   Petal   Width 0.3 #> 469 S019     setosa   Petal   Width 0.3 #> 470 S020     setosa   Petal   Width 0.3 #> 471 S021     setosa   Petal   Width 0.2 #> 472 S022     setosa   Petal   Width 0.4 #> 473 S023     setosa   Petal   Width 0.2 #> 474 S024     setosa   Petal   Width 0.5 #> 475 S025     setosa   Petal   Width 0.2 #> 476 S026     setosa   Petal   Width 0.2 #> 477 S027     setosa   Petal   Width 0.4 #> 478 S028     setosa   Petal   Width 0.2 #> 479 S029     setosa   Petal   Width 0.2 #> 480 S030     setosa   Petal   Width 0.2 #> 481 S031     setosa   Petal   Width 0.2 #> 482 S032     setosa   Petal   Width 0.4 #> 483 S033     setosa   Petal   Width 0.1 #> 484 S034     setosa   Petal   Width 0.2 #> 485 S035     setosa   Petal   Width 0.2 #> 486 S036     setosa   Petal   Width 0.2 #> 487 S037     setosa   Petal   Width 0.2 #> 488 S038     setosa   Petal   Width 0.1 #> 489 S039     setosa   Petal   Width 0.2 #> 490 S040     setosa   Petal   Width 0.2 #> 491 S041     setosa   Petal   Width 0.3 #> 492 S042     setosa   Petal   Width 0.3 #> 493 S043     setosa   Petal   Width 0.2 #> 494 S044     setosa   Petal   Width 0.6 #> 495 S045     setosa   Petal   Width 0.4 #> 496 S046     setosa   Petal   Width 0.3 #> 497 S047     setosa   Petal   Width 0.2 #> 498 S048     setosa   Petal   Width 0.2 #> 499 S049     setosa   Petal   Width 0.2 #> 500 S050     setosa   Petal   Width 0.2 #> 501 S051 versicolor   Petal   Width 1.4 #> 502 S052 versicolor   Petal   Width 1.5 #> 503 S053 versicolor   Petal   Width 1.5 #> 504 S054 versicolor   Petal   Width 1.3 #> 505 S055 versicolor   Petal   Width 1.5 #> 506 S056 versicolor   Petal   Width 1.3 #> 507 S057 versicolor   Petal   Width 1.6 #> 508 S058 versicolor   Petal   Width 1.0 #> 509 S059 versicolor   Petal   Width 1.3 #> 510 S060 versicolor   Petal   Width 1.4 #> 511 S061 versicolor   Petal   Width 1.0 #> 512 S062 versicolor   Petal   Width 1.5 #> 513 S063 versicolor   Petal   Width 1.0 #> 514 S064 versicolor   Petal   Width 1.4 #> 515 S065 versicolor   Petal   Width 1.3 #> 516 S066 versicolor   Petal   Width 1.4 #> 517 S067 versicolor   Petal   Width 1.5 #> 518 S068 versicolor   Petal   Width 1.0 #> 519 S069 versicolor   Petal   Width 1.5 #> 520 S070 versicolor   Petal   Width 1.1 #> 521 S071 versicolor   Petal   Width 1.8 #> 522 S072 versicolor   Petal   Width 1.3 #> 523 S073 versicolor   Petal   Width 1.5 #> 524 S074 versicolor   Petal   Width 1.2 #> 525 S075 versicolor   Petal   Width 1.3 #> 526 S076 versicolor   Petal   Width 1.4 #> 527 S077 versicolor   Petal   Width 1.4 #> 528 S078 versicolor   Petal   Width 1.7 #> 529 S079 versicolor   Petal   Width 1.5 #> 530 S080 versicolor   Petal   Width 1.0 #> 531 S081 versicolor   Petal   Width 1.1 #> 532 S082 versicolor   Petal   Width 1.0 #> 533 S083 versicolor   Petal   Width 1.2 #> 534 S084 versicolor   Petal   Width 1.6 #> 535 S085 versicolor   Petal   Width 1.5 #> 536 S086 versicolor   Petal   Width 1.6 #> 537 S087 versicolor   Petal   Width 1.5 #> 538 S088 versicolor   Petal   Width 1.3 #> 539 S089 versicolor   Petal   Width 1.3 #> 540 S090 versicolor   Petal   Width 1.3 #> 541 S091 versicolor   Petal   Width 1.2 #> 542 S092 versicolor   Petal   Width 1.4 #> 543 S093 versicolor   Petal   Width 1.2 #> 544 S094 versicolor   Petal   Width 1.0 #> 545 S095 versicolor   Petal   Width 1.3 #> 546 S096 versicolor   Petal   Width 1.2 #> 547 S097 versicolor   Petal   Width 1.3 #> 548 S098 versicolor   Petal   Width 1.3 #> 549 S099 versicolor   Petal   Width 1.1 #> 550 S100 versicolor   Petal   Width 1.3 #> 551 S101  virginica   Petal   Width 2.5 #> 552 S102  virginica   Petal   Width 1.9 #> 553 S103  virginica   Petal   Width 2.1 #> 554 S104  virginica   Petal   Width 1.8 #> 555 S105  virginica   Petal   Width 2.2 #> 556 S106  virginica   Petal   Width 2.1 #> 557 S107  virginica   Petal   Width 1.7 #> 558 S108  virginica   Petal   Width 1.8 #> 559 S109  virginica   Petal   Width 1.8 #> 560 S110  virginica   Petal   Width 2.5 #> 561 S111  virginica   Petal   Width 2.0 #> 562 S112  virginica   Petal   Width 1.9 #> 563 S113  virginica   Petal   Width 2.1 #> 564 S114  virginica   Petal   Width 2.0 #> 565 S115  virginica   Petal   Width 2.4 #> 566 S116  virginica   Petal   Width 2.3 #> 567 S117  virginica   Petal   Width 1.8 #> 568 S118  virginica   Petal   Width 2.2 #> 569 S119  virginica   Petal   Width 2.3 #> 570 S120  virginica   Petal   Width 1.5 #> 571 S121  virginica   Petal   Width 2.3 #> 572 S122  virginica   Petal   Width 2.0 #> 573 S123  virginica   Petal   Width 2.0 #> 574 S124  virginica   Petal   Width 1.8 #> 575 S125  virginica   Petal   Width 2.1 #> 576 S126  virginica   Petal   Width 1.8 #> 577 S127  virginica   Petal   Width 1.8 #> 578 S128  virginica   Petal   Width 1.8 #> 579 S129  virginica   Petal   Width 2.1 #> 580 S130  virginica   Petal   Width 1.6 #> 581 S131  virginica   Petal   Width 1.9 #> 582 S132  virginica   Petal   Width 2.0 #> 583 S133  virginica   Petal   Width 2.2 #> 584 S134  virginica   Petal   Width 1.5 #> 585 S135  virginica   Petal   Width 1.4 #> 586 S136  virginica   Petal   Width 2.3 #> 587 S137  virginica   Petal   Width 2.4 #> 588 S138  virginica   Petal   Width 1.8 #> 589 S139  virginica   Petal   Width 1.8 #> 590 S140  virginica   Petal   Width 2.1 #> 591 S141  virginica   Petal   Width 2.4 #> 592 S142  virginica   Petal   Width 2.3 #> 593 S143  virginica   Petal   Width 1.9 #> 594 S144  virginica   Petal   Width 2.3 #> 595 S145  virginica   Petal   Width 2.5 #> 596 S146  virginica   Petal   Width 2.3 #> 597 S147  virginica   Petal   Width 1.9 #> 598 S148  virginica   Petal   Width 2.0 #> 599 S149  virginica   Petal   Width 2.3 #> 600 S150  virginica   Petal   Width 1.8"},{"path":[]},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-121-2023-04-18","dir":"Changelog","previous_headings":"","what":"faux 1.2.1 (2023-04-18)","title":"faux 1.2.1 (2023-04-18)","text":"CRAN release: 2023-04-20 add_between() add_within() don’t convert non-character levels factors * submitting CRAN (sorry letting get archived!)","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-120-2023-02-03","dir":"Changelog","previous_headings":"","what":"faux 1.2.0 (2023-02-03)","title":"faux 1.2.0 (2023-02-03)","text":"CRAN release: 2023-02-06 rmulti() function multivariate distributions aren’t normal (experimental) Minor changes add_random() Fixed minor vignette bugs CRAN Various minor bug fixes","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-1109005-2023-02-02","dir":"Changelog","previous_headings":"","what":"faux 1.1.0.9005 (2023-02-02)","title":"faux 1.1.0.9005 (2023-02-02)","text":"Fixed long argument sim_df()","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-1109004-2022-02-13","dir":"Changelog","previous_headings":"","what":"faux 1.1.0.9004 (2022-02-13)","title":"faux 1.1.0.9004 (2022-02-13)","text":"Improvements rmulti() associated helper functions convert_r() fh_bounds(). vignette NORTA","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-1109003-2021-12-02","dir":"Changelog","previous_headings":"","what":"faux 1.1.0.9003 (2021-12-02)","title":"faux 1.1.0.9003 (2021-12-02)","text":"rmulti() function multivariate distributions aren’t normal (experimental)","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-1109002-2021-12-01","dir":"Changelog","previous_headings":"","what":"faux 1.1.0.9002 (2021-12-01)","title":"faux 1.1.0.9002 (2021-12-01)","text":"Likert distribution functions rlikert(), dlikert(), plikert() qlikert()","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-1109001-2021-11-23","dir":"Changelog","previous_headings":"","what":"faux 1.1.0.9001 (2021-11-23)","title":"faux 1.1.0.9001 (2021-11-23)","text":"add_random() now names random factor items full random factor name (e.g., “class1”, “c1”) add_random() allows set specific factor item names (see vignette)","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-110-2021-09-13","dir":"Changelog","previous_headings":"","what":"faux 1.1.0 (2021-09-13)","title":"faux 1.1.0 (2021-09-13)","text":"CRAN release: 2021-09-13","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"breaking-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"faux 1.1.0 (2021-09-13)","text":"sim_design() now names anonymous within factors like W B W1, W2, W3, …, B1, B2, … instead , B, C, …","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"faux 1.1.0 (2021-09-13)","text":"add_contrast() associated contr_code_*** functions add_random() associated mixed design building functions","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"minor-improvements-and-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"faux 1.1.0 (2021-09-13)","text":"get_params() doesn’t need , within, id, dv set date created sim_design() plot_design() can display subset factors sim_design() fixed bug setting n unnamed vector within-subjects factors","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-1009006-2021-09-13","dir":"Changelog","previous_headings":"","what":"faux 1.0.0.9006 (2021-09-13)","title":"faux 1.0.0.9006 (2021-09-13)","text":"Added vignette creating random reports using mixed effects building functions.","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-1009006-2021-08-30","dir":"Changelog","previous_headings":"","what":"faux 1.0.0.9006 (2021-08-30)","title":"faux 1.0.0.9006 (2021-08-30)","text":"fixed bug sim_design() setting n unnamed vector within-subjects factors (wouldn’t run ). Updated add_between() add_within() make new columns factors ordering specification Updated contrast functions work non-factor columns add_between() .prob argument works expected now (tests)","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-1009005-2021-08-11","dir":"Changelog","previous_headings":"","what":"faux 1.0.0.9005 (2021-08-11)","title":"faux 1.0.0.9005 (2021-08-11)","text":"Updated contrasts vignette renamed contr_code_deviation() contr_code_anova()","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-1009004-2021-08-10","dir":"Changelog","previous_headings":"","what":"faux 1.0.0.9004 (2021-08-10)","title":"faux 1.0.0.9004 (2021-08-10)","text":"Updated contrasts vignette new add_contrast() function renamed contrast functions start contr_code_","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-1009003-2021-08-09","dir":"Changelog","previous_headings":"","what":"faux 1.0.0.9003 (2021-08-09)","title":"faux 1.0.0.9003 (2021-08-09)","text":"added new contrast functions changed labelling others updated contrasts vignette","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-1009002-2021-08-08","dir":"Changelog","previous_headings":"","what":"faux 1.0.0.9002 (2021-08-08)","title":"faux 1.0.0.9002 (2021-08-08)","text":"plot_design() can display subset factors updated plotting vignette explain changing palettes updated mixed effects builder functions avoid column name clashes added experimental contrast functions vignette","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-1009001-2021-03-27","dir":"Changelog","previous_headings":"","what":"faux 1.0.0.9001 (2021-03-27)","title":"faux 1.0.0.9001 (2021-03-27)","text":"added new mixed effect builder functions updated mixed effects vignette anonymous within factors sim_design() now named W B W1, W2, W3, …, B1, B2, … instead , B, C, … (fixed relevant tests vignette code) fixed get_params() doesn’t need , within, id, dv set date created sim_design()","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-100-2021-03-27","dir":"Changelog","previous_headings":"","what":"faux 1.0.0 (2021-03-27)","title":"faux 1.0.0 (2021-03-27)","text":"CRAN release: 2021-03-26 Released CRAN Fixed typo faceratings one face_eth (“eats asian/white” => “east asian/white”)","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-00165-2021-03-23","dir":"Changelog","previous_headings":"","what":"faux 0.0.1.65 (2021-03-23)","title":"faux 0.0.1.65 (2021-03-23)","text":"Fixed bug rnorm_pre() simulating vector correlations 2 pre-existing vectors. Updated vignettes new functions changes.","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-00164-2021-03-19","dir":"Changelog","previous_headings":"","what":"faux 0.0.1.64 (2021-03-19)","title":"faux 0.0.1.64 (2021-03-19)","text":"sim_design() longer mangle level values long format underscores sim_design() play better different separator. example, set faux_options(sep = \".\") within-subject factors B levels A_1/A_2 B_1/B_2, wide data columns A_1.B_1, A_1.B_2, A_2.B_1, A_2.B_2","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-00163-2021-03-14","dir":"Changelog","previous_headings":"","what":"faux 0.0.1.63 (2021-03-14)","title":"faux 0.0.1.63 (2021-03-14)","text":"fixed bug sim_design() parameters specified named vector couldn’t different order unless within factors specified (e.g., mu = c(A2 = 2, A1 = 1) resulted mu 2 A1 1 A2).","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-00162-2021-03-13","dir":"Changelog","previous_headings":"","what":"faux 0.0.1.62 (2021-03-13)","title":"faux 0.0.1.62 (2021-03-13)","text":"new sim_joint_dist() function simulate joint distribution categories sim_df() longer breaks NAs DV columns sim_df() now option include missing data, simulates joint distribution missingness -subject cell functions (sim_df() messy()) can choose columns unquoted names now (e.g., messy(mtcars, .5, mpg)) messy() now takes vector proportions can simulate different amounts missing data per selected column sample_from_pop() now vectorised","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-00161-2021-02-06","dir":"Changelog","previous_headings":"","what":"faux 0.0.1.61 (2021-02-06)","title":"faux 0.0.1.61 (2021-02-06)","text":"get_params() doesn’t require within set data made faux (“design” attribute) fixed bug get_params() var column alphabetised, corresponding columns correlation table factor order several new distribution conversion functions vignette version isn’t CRAN yet","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0016-2021-01-05","dir":"Changelog","previous_headings":"","what":"faux 0.0.1.6 (2021-01-05)","title":"faux 0.0.1.6 (2021-01-05)","text":"CRAN release: 2021-01-21 nested_list() updated match scienceverse version handle edge cases better changes tests changes CRAN development environments rnorm_multi() can get column names mu, sd, r names","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0015-2020-09-11","dir":"Changelog","previous_headings":"","what":"faux 0.0.1.5 (2020-09-11)","title":"faux 0.0.1.5 (2020-09-11)","text":"CRAN release: 2020-09-22 Removed test using markdown failed Solaris (causing faux pulled CRAN) Back CRAN! seed arguments reinstated deprecated produce warning","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0014-2020-08-12","dir":"Changelog","previous_headings":"","what":"faux 0.0.1.4 (2020-08-12)","title":"faux 0.0.1.4 (2020-08-12)","text":"CRAN release: 2020-08-19 Even fixes CRAN (CRAN 2009-08-19!) Removed seed arguments (request CRAN) Faster unit tests","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0013-2020-08-10","dir":"Changelog","previous_headings":"","what":"faux 0.0.1.3 (2020-08-10)","title":"faux 0.0.1.3 (2020-08-10)","text":"fixes CRAN (fingers crossed!) Added seed argument rnorm_multi() User options longer changed vignettes","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0012-2020-08-03","dir":"Changelog","previous_headings":"","what":"faux 0.0.1.2 (2020-08-03)","title":"faux 0.0.1.2 (2020-08-03)","text":"Removed dependencies Various bug fixes Submitting CRAN !","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0011-2020-06-25","dir":"Changelog","previous_headings":"","what":"faux 0.0.1.1 (2020-06-25)","title":"faux 0.0.1.1 (2020-06-25)","text":"Still accepted CRAN (haven’t worked long time) nested_list function printing nested lists Rmd New codebook function vignette Interactive mode codebooks (experimental) Updated new tidyverse versions","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0010-2020-02-27","dir":"Changelog","previous_headings":"","what":"faux 0.0.1.0 (2020-02-27)","title":"faux 0.0.1.0 (2020-02-27)","text":"Submitting CRAN (wish luck!)","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009019-2020-02-26","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9019 (2020-02-26)","title":"faux 0.0.0.9019 (2020-02-26)","text":"Andrew Heiss added norm2beta function Added contributors (Andrew Heiss Anna Krystali) trunc2norm now works min max omitted.","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009017-2019-12-26","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9017 (2019-12-26)","title":"faux 0.0.0.9017 (2019-12-26)","text":"Added rep argument sim_design() sim_data(). rep > 1, returns nested data frame rep simulated datasets. Fixed warnings get_params() Improved make_id() function","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009016-2019-12-10","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9016 (2019-12-10)","title":"faux 0.0.0.9016 (2019-12-10)","text":"Removed ANOVApower","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009015-2019-07-22","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9015 (2019-07-22)","title":"faux 0.0.0.9015 (2019-07-22)","text":"Added distribution conversion functions (still experimental)","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009014-2019-06-09","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9014 (2019-06-09)","title":"faux 0.0.0.9014 (2019-06-09)","text":"flexible parameter specification Set plotting default global option faux_options(plot = TRUE) Minor bug fixes efficiency increases","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009013-2019-05-27","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9013 (2019-05-27)","title":"faux 0.0.0.9013 (2019-05-27)","text":"multi-factor cell names now intuitive order (break old code inputs parameters unnamed vectors) flexible plotting styles (violin, jitter, box, pointrange SD SE, combos) Minor bug fixes","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009012-2019-05-22","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9012 (2019-05-22)","title":"faux 0.0.0.9012 (2019-05-22)","text":"flexible plots data plots Setting seed doesn’t change seed global environment Plot labels dv id (set like dv = list(colname = \"Name Plots\"))","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009011-2019-05-19","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9011 (2019-05-19)","title":"faux 0.0.0.9011 (2019-05-19)","text":"Changed default DV column name ‘val’ ‘y’ Changed default ID column name ‘sub_id’ ‘id’ sim_design() can take intercept-designs rnorm_multi() can take vars = 1 intercept-designs json_design() output save design specs JSON format Added functions converting distributions","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009010","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9010","title":"faux 0.0.0.9010","text":"Fixed bugs interactive specification Added messy() (thanks Emily) Better interactive specification (thanks Daniël)","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009009","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9009","title":"faux 0.0.0.9009","text":"Bug fix long2wide() (handle designs within factors) sim_df() returns subject IDs takes data long format Renamed check_sim_stats() get_params(), now returns design Added interactive option sim_design()","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009008","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9008","title":"faux 0.0.0.9008","text":"added sim_mixed_cc() simulate null cross-classified mixed effect designs subject, item error SDs sim_design(), sim_df(), sim_mixed_cc() sim_mixed_df() take seed argument now reproducible datasets","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009007","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9007","title":"faux 0.0.0.9007","text":"Added plot option check_design() sim_design() n, mu, sd data frames -cells rows within-cells columns within named lists; factors labels longer separately named","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009006","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9006","title":"faux 0.0.0.9006","text":"Changes argument order names (consistent, may break old scripts) Updated vignettes","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009005","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9005","title":"faux 0.0.0.9005","text":"Bug fixes sim_design() (failed within factor number 0)","code":""},{"path":"https://debruine.github.io/faux/dev/news/index.html","id":"faux-0009004","dir":"Changelog","previous_headings":"","what":"faux 0.0.0.9004","title":"faux 0.0.0.9004","text":"Added NEWS.md file track changes package. Added sim_design() simulate data mixed ANOVA designs.","code":""}]
